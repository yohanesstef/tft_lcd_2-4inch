
tft_lcd_2-4inch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007018  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080071b0  080071b0  000171b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007310  08007310  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007318  08007318  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007320  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  20000080  080073a0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  080073a0  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123a6  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003316  00000000  00000000  00032499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  000357b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c55  00000000  00000000  000367a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188d3  00000000  00000000  000373fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014658  00000000  00000000  0004fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099da5  00000000  00000000  00064328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000470c  00000000  00000000  000fe0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001027dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007198 	.word	0x08007198

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08007198 	.word	0x08007198

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b74:	f000 b970 	b.w	8000e58 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9e08      	ldr	r6, [sp, #32]
 8000b96:	460d      	mov	r5, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14a      	bne.n	8000c36 <__udivmoddi4+0xa6>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	d965      	bls.n	8000c72 <__udivmoddi4+0xe2>
 8000ba6:	fab2 f382 	clz	r3, r2
 8000baa:	b143      	cbz	r3, 8000bbe <__udivmoddi4+0x2e>
 8000bac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb0:	f1c3 0220 	rsb	r2, r3, #32
 8000bb4:	409f      	lsls	r7, r3
 8000bb6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bba:	4317      	orrs	r7, r2
 8000bbc:	409c      	lsls	r4, r3
 8000bbe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc2:	fa1f f58c 	uxth.w	r5, ip
 8000bc6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bca:	0c22      	lsrs	r2, r4, #16
 8000bcc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd4:	fb01 f005 	mul.w	r0, r1, r5
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x62>
 8000bdc:	eb1c 0202 	adds.w	r2, ip, r2
 8000be0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000be4:	f080 811c 	bcs.w	8000e20 <__udivmoddi4+0x290>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f240 8119 	bls.w	8000e20 <__udivmoddi4+0x290>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	4462      	add	r2, ip
 8000bf2:	1a12      	subs	r2, r2, r0
 8000bf4:	b2a4      	uxth	r4, r4
 8000bf6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	fb00 f505 	mul.w	r5, r0, r5
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x90>
 8000c0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x294>
 8000c16:	42a5      	cmp	r5, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x294>
 8000c1c:	4464      	add	r4, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11e      	cbz	r6, 8000c32 <__udivmoddi4+0xa2>
 8000c2a:	40dc      	lsrs	r4, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0xbc>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	f000 80ed 	beq.w	8000e1a <__udivmoddi4+0x28a>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e9c6 0500 	strd	r0, r5, [r6]
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	d149      	bne.n	8000ce8 <__udivmoddi4+0x158>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d302      	bcc.n	8000c5e <__udivmoddi4+0xce>
 8000c58:	4282      	cmp	r2, r0
 8000c5a:	f200 80f8 	bhi.w	8000e4e <__udivmoddi4+0x2be>
 8000c5e:	1a84      	subs	r4, r0, r2
 8000c60:	eb65 0203 	sbc.w	r2, r5, r3
 8000c64:	2001      	movs	r0, #1
 8000c66:	4617      	mov	r7, r2
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d0e2      	beq.n	8000c32 <__udivmoddi4+0xa2>
 8000c6c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c70:	e7df      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000c72:	b902      	cbnz	r2, 8000c76 <__udivmoddi4+0xe6>
 8000c74:	deff      	udf	#255	; 0xff
 8000c76:	fab2 f382 	clz	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x210>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c90:	fb07 2015 	mls	r0, r7, r5, r2
 8000c94:	0c22      	lsrs	r2, r4, #16
 8000c96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9a:	fb0e f005 	mul.w	r0, lr, r5
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x124>
 8000ca2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x122>
 8000cac:	4290      	cmp	r0, r2
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2b8>
 8000cb2:	4645      	mov	r5, r8
 8000cb4:	1a12      	subs	r2, r2, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cbc:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x14e>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x14c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2c2>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce6:	e79f      	b.n	8000c28 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfe:	40fd      	lsrs	r5, r7
 8000d00:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d18:	fb08 f50e 	mul.w	r5, r8, lr
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	fa00 f001 	lsl.w	r0, r0, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b0>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2b4>
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2b4>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	b29d      	uxth	r5, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d50:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1da>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2ac>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2ac>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46ae      	mov	lr, r5
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x29c>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x298>
 8000d80:	b156      	cbz	r6, 8000d98 <__udivmoddi4+0x208>
 8000d82:	ebb0 0208 	subs.w	r2, r0, r8
 8000d86:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8e:	40ca      	lsrs	r2, r1
 8000d90:	40cc      	lsrs	r4, r1
 8000d92:	4317      	orrs	r7, r2
 8000d94:	e9c6 7400 	strd	r7, r4, [r6]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	f1c3 0120 	rsb	r1, r3, #32
 8000da4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dac:	fa25 f101 	lsr.w	r1, r5, r1
 8000db0:	409d      	lsls	r5, r3
 8000db2:	432a      	orrs	r2, r5
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dca:	fb00 f50e 	mul.w	r5, r0, lr
 8000dce:	428d      	cmp	r5, r1
 8000dd0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x258>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b0>
 8000de0:	428d      	cmp	r5, r1
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b0>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4461      	add	r1, ip
 8000de8:	1b49      	subs	r1, r1, r5
 8000dea:	b292      	uxth	r2, r2
 8000dec:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df0:	fb07 1115 	mls	r1, r7, r5, r1
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dfc:	4291      	cmp	r1, r2
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x282>
 8000e00:	eb1c 0202 	adds.w	r2, ip, r2
 8000e04:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0a:	4291      	cmp	r1, r2
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0e:	3d02      	subs	r5, #2
 8000e10:	4462      	add	r2, ip
 8000e12:	1a52      	subs	r2, r2, r1
 8000e14:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0xfc>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000e20:	4639      	mov	r1, r7
 8000e22:	e6e6      	b.n	8000bf2 <__udivmoddi4+0x62>
 8000e24:	4610      	mov	r0, r2
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x90>
 8000e28:	4548      	cmp	r0, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f0>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e34:	3b01      	subs	r3, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f0>
 8000e38:	4645      	mov	r5, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x282>
 8000e3c:	462b      	mov	r3, r5
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1da>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x258>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b0>
 8000e48:	3d02      	subs	r5, #2
 8000e4a:	4462      	add	r2, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x124>
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e70a      	b.n	8000c68 <__udivmoddi4+0xd8>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x14e>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e9e:	4a17      	ldr	r2, [pc, #92]	; (8000efc <MX_ADC1_Init+0xa0>)
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000ebe:	f001 fe67 	bl	8002b90 <HAL_ADC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ec8:	f000 f9e2 	bl	8001290 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000ede:	f001 fe9b 	bl	8002c18 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ee8:	f000 f9d2 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000009c 	.word	0x2000009c
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	0f000001 	.word	0x0f000001

08000f00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_ADC_MspInit+0x7c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d127      	bne.n	8000f72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_ADC_MspInit+0x80>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <HAL_ADC_MspInit+0x80>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_ADC_MspInit+0x80>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_ADC_MspInit+0x80>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_ADC_MspInit+0x80>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_ADC_MspInit+0x80>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f5a:	2330      	movs	r3, #48	; 0x30
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_ADC_MspInit+0x84>)
 8000f6e:	f002 fd85 	bl	8003a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000

08000f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_DMA_Init+0x6c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <MX_DMA_Init+0x6c>)
 8000f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_DMA_Init+0x6c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2039      	movs	r0, #57	; 0x39
 8000fb0:	f002 f92b 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fb4:	2039      	movs	r0, #57	; 0x39
 8000fb6:	f002 f944 	bl	8003242 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	203a      	movs	r0, #58	; 0x3a
 8000fc0:	f002 f923 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fc4:	203a      	movs	r0, #58	; 0x3a
 8000fc6:	f002 f93c 	bl	8003242 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2045      	movs	r0, #69	; 0x45
 8000fd0:	f002 f91b 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fd4:	2045      	movs	r0, #69	; 0x45
 8000fd6:	f002 f934 	bl	8003242 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2046      	movs	r0, #70	; 0x46
 8000fe0:	f002 f913 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fe4:	2046      	movs	r0, #70	; 0x46
 8000fe6:	f002 f92c 	bl	8003242 <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <MX_GPIO_Init+0x128>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <MX_GPIO_Init+0x128>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <MX_GPIO_Init+0x128>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <MX_GPIO_Init+0x128>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a3b      	ldr	r2, [pc, #236]	; (8001120 <MX_GPIO_Init+0x128>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <MX_GPIO_Init+0x128>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_GPIO_Init+0x128>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a34      	ldr	r2, [pc, #208]	; (8001120 <MX_GPIO_Init+0x128>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b32      	ldr	r3, [pc, #200]	; (8001120 <MX_GPIO_Init+0x128>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_GPIO_Init+0x128>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <MX_GPIO_Init+0x128>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_GPIO_Init+0x128>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4827      	ldr	r0, [pc, #156]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001086:	f002 fe95 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15
 800108a:	2200      	movs	r2, #0
 800108c:	f248 71fe 	movw	r1, #34814	; 0x87fe
 8001090:	4825      	ldr	r0, [pc, #148]	; (8001128 <MX_GPIO_Init+0x130>)
 8001092:	f002 fe8f 	bl	8003db4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800109c:	4823      	ldr	r0, [pc, #140]	; (800112c <MX_GPIO_Init+0x134>)
 800109e:	f002 fe89 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <MX_GPIO_Init+0x12c>)
 80010bc:	f002 fcde 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15
 80010c0:	f248 73fe 	movw	r3, #34814	; 0x87fe
 80010c4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <MX_GPIO_Init+0x130>)
 80010da:	f002 fccf 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_GPIO_Init+0x130>)
 80010f4:	f002 fcc2 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80010f8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_GPIO_Init+0x134>)
 8001112:	f002 fcb3 	bl	8003a7c <HAL_GPIO_Init>

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40020800 	.word	0x40020800
 8001128:	40020400 	.word	0x40020400
 800112c:	40020000 	.word	0x40020000

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f001 fc96 	bl	8002a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f82c 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f7ff ff5c 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001140:	f7ff ff22 	bl	8000f88 <MX_DMA_Init>
  MX_TIM1_Init();
 8001144:	f000 f976 	bl	8001434 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001148:	f7ff fe88 	bl	8000e5c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800114c:	f000 f9e4 	bl	8001518 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001150:	f000 fa36 	bl	80015c0 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8001154:	f000 fa0a 	bl	800156c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <main+0x54>)
 800115a:	f003 fb11 	bl	8004780 <HAL_TIM_Base_Start>

  server_init(&huart6);
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <main+0x58>)
 8001160:	f001 fc14 	bl	800298c <server_init>
  lora_init(&huart1);
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <main+0x5c>)
 8001166:	f001 fa1f 	bl	80025a8 <lora_init>
  Ringbuf_init();
 800116a:	f000 ffbf 	bl	80020ec <Ringbuf_init>
//		  LCD_SetMode(LCD_MODE_DRAW);
//		  testLines(CYAN);
//	  }
//	  server_transmit_routine();
//	  lora_receive_routine();
	  lora_wireless_transmit_routine();
 800116e:	f001 fbd1 	bl	8002914 <lora_wireless_transmit_routine>
	  gps_GGA_routine();
 8001172:	f001 f9d1 	bl	8002518 <gps_GGA_routine>
	  flag++;
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <main+0x60>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <main+0x60>)
 8001180:	701a      	strb	r2, [r3, #0]
	  lora_wireless_transmit_routine();
 8001182:	e7f4      	b.n	800116e <main+0x3e>
 8001184:	200000e8 	.word	0x200000e8
 8001188:	200001b8 	.word	0x200001b8
 800118c:	20000130 	.word	0x20000130
 8001190:	200000e4 	.word	0x200000e4

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	; 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 f88c 	bl	80062c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <SystemClock_Config+0xcc>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011e0:	4a20      	ldr	r2, [pc, #128]	; (8001264 <SystemClock_Config+0xd0>)
 80011e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <SystemClock_Config+0xd0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001208:	2319      	movs	r3, #25
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800120c:	23a8      	movs	r3, #168	; 0xa8
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001214:	2304      	movs	r3, #4
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fe07 	bl	8003e30 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001228:	f000 f832 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2102      	movs	r1, #2
 8001248:	4618      	mov	r0, r3
 800124a:	f003 f869 	bl	8004320 <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001254:	f000 f81c 	bl	8001290 <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	3750      	adds	r7, #80	; 0x50
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <HAL_UART_RxHalfCpltCallback>:
//    SSD1306_Clear();
//    previousTick = HAL_GetTick();
//  }
//}
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	callback++;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_UART_RxHalfCpltCallback+0x24>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <HAL_UART_RxHalfCpltCallback+0x24>)
 800127a:	701a      	strb	r2, [r3, #0]
	server_receive_callback(huart);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f001 fbbd 	bl	80029fc <server_receive_callback>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000e5 	.word	0x200000e5

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout>0)timeout--;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SysTick_Handler+0x20>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <SysTick_Handler+0x18>
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Handler+0x20>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	3b01      	subs	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <SysTick_Handler+0x20>)
 800134a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f001 fbdc 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000038c 	.word	0x2000038c

08001358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <USART1_IRQHandler+0x10>)
 800135e:	f003 fe35 	bl	8004fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000130 	.word	0x20000130

0800136c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <USART2_IRQHandler+0x10>)
 8001372:	f001 f873 	bl	800245c <Uart_isr>
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000174 	.word	0x20000174

08001380 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <DMA2_Stream1_IRQHandler+0x10>)
 8001386:	f002 f90f 	bl	80035a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002bc 	.word	0x200002bc

08001394 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <DMA2_Stream2_IRQHandler+0x10>)
 800139a:	f002 f905 	bl	80035a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200001fc 	.word	0x200001fc

080013a8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Stream6_IRQHandler+0x10>)
 80013ae:	f002 f8fb 	bl	80035a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000031c 	.word	0x2000031c

080013bc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <DMA2_Stream7_IRQHandler+0x10>)
 80013c2:	f002 f8f1 	bl	80035a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000025c 	.word	0x2000025c

080013d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <USART6_IRQHandler+0x10>)
 80013d6:	f003 fdf9 	bl	8004fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001b8 	.word	0x200001b8

080013e4 <EXTI4_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_IRQHandler(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 80013e8:	2110      	movs	r1, #16
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <EXTI4_IRQHandler+0x28>)
 80013ec:	f002 fcca 	bl	8003d84 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <EXTI4_IRQHandler+0x18>
		LCD_Touch_OnDown();
 80013f6:	f001 f8b1 	bl	800255c <LCD_Touch_OnDown>
 80013fa:	e001      	b.n	8001400 <EXTI4_IRQHandler+0x1c>
	} else {
		LCD_Touch_OnUp();
 80013fc:	f001 f8be 	bl	800257c <LCD_Touch_OnUp>
	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001400:	2010      	movs	r0, #16
 8001402:	f002 fcf1 	bl	8003de8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020000 	.word	0x40020000

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_TIM1_Init+0x98>)
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <MX_TIM1_Init+0x9c>)
 8001454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_TIM1_Init+0x98>)
 8001458:	2253      	movs	r2, #83	; 0x53
 800145a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_TIM1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM1_Init+0x98>)
 8001464:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_TIM1_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_TIM1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <MX_TIM1_Init+0x98>)
 800147e:	f003 f92f 	bl	80046e0 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001488:	f7ff ff02 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_TIM1_Init+0x98>)
 800149a:	f003 f9cb 	bl	8004834 <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014a4:	f7ff fef4 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM1_Init+0x98>)
 80014b6:	f003 fb9f 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014c0:	f7ff fee6 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000e8 	.word	0x200000e8
 80014d0:	40010000 	.word	0x40010000

080014d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_TIM_Base_MspInit+0x3c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10d      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_TIM_Base_MspInit+0x40>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <HAL_TIM_Base_MspInit+0x40>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_TIM_Base_MspInit+0x40>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40010000 	.word	0x40010000
 8001514:	40023800 	.word	0x40023800

08001518 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART1_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001524:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART1_UART_Init+0x4c>)
 8001550:	f003 fbc0 	bl	8004cd4 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f7ff fe99 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000130 	.word	0x20000130
 8001568:	40011000 	.word	0x40011000

0800156c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_USART2_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001578:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800157c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f003 fb96 	bl	8004cd4 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f7ff fe6f 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000174 	.word	0x20000174
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_USART6_UART_Init+0x50>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_USART6_UART_Init+0x4c>)
 80015f8:	f003 fb6c 	bl	8004cd4 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001602:	f7ff fe45 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200001b8 	.word	0x200001b8
 8001610:	40011400 	.word	0x40011400

08001614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a67      	ldr	r2, [pc, #412]	; (80017d0 <HAL_UART_MspInit+0x1bc>)
 8001632:	4293      	cmp	r3, r2
 8001634:	f040 8092 	bne.w	800175c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	4a64      	ldr	r2, [pc, #400]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6453      	str	r3, [r2, #68]	; 0x44
 8001648:	4b62      	ldr	r3, [pc, #392]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a5d      	ldr	r2, [pc, #372]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001670:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001682:	2307      	movs	r3, #7
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4852      	ldr	r0, [pc, #328]	; (80017d8 <HAL_UART_MspInit+0x1c4>)
 800168e:	f002 f9f5 	bl	8003a7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001692:	4b52      	ldr	r3, [pc, #328]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 8001694:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_UART_MspInit+0x1cc>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 800169a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800169e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b4:	4b49      	ldr	r3, [pc, #292]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016d2:	4842      	ldr	r0, [pc, #264]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016d4:	f001 fdd0 	bl	8003278 <HAL_DMA_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80016de:	f7ff fdd7 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a3d      	ldr	r2, [pc, #244]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
 80016e8:	4a3c      	ldr	r2, [pc, #240]	; (80017dc <HAL_UART_MspInit+0x1c8>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 80016f0:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <HAL_UART_MspInit+0x1d4>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 80016f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 800170a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800171c:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800172e:	482d      	ldr	r0, [pc, #180]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 8001730:	f001 fda2 	bl	8003278 <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800173a:	f7ff fda9 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <HAL_UART_MspInit+0x1d0>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2025      	movs	r0, #37	; 0x25
 8001750:	f001 fd5b 	bl	800320a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001754:	2025      	movs	r0, #37	; 0x25
 8001756:	f001 fd74 	bl	8003242 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800175a:	e0e1      	b.n	8001920 <HAL_UART_MspInit+0x30c>
  else if(uartHandle->Instance==USART2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_UART_MspInit+0x1d8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d144      	bne.n	80017f0 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_UART_MspInit+0x1c0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800179e:	230c      	movs	r3, #12
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ae:	2307      	movs	r3, #7
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <HAL_UART_MspInit+0x1c4>)
 80017ba:	f002 f95f 	bl	8003a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2026      	movs	r0, #38	; 0x26
 80017c4:	f001 fd21 	bl	800320a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017c8:	2026      	movs	r0, #38	; 0x26
 80017ca:	f001 fd3a 	bl	8003242 <HAL_NVIC_EnableIRQ>
}
 80017ce:	e0a7      	b.n	8001920 <HAL_UART_MspInit+0x30c>
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	200001fc 	.word	0x200001fc
 80017e0:	40026440 	.word	0x40026440
 80017e4:	2000025c 	.word	0x2000025c
 80017e8:	400264b8 	.word	0x400264b8
 80017ec:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART6)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a4c      	ldr	r2, [pc, #304]	; (8001928 <HAL_UART_MspInit+0x314>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	f040 8092 	bne.w	8001920 <HAL_UART_MspInit+0x30c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_UART_MspInit+0x318>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_UART_MspInit+0x318>)
 8001806:	f043 0320 	orr.w	r3, r3, #32
 800180a:	6453      	str	r3, [r2, #68]	; 0x44
 800180c:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_UART_MspInit+0x318>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_UART_MspInit+0x318>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a42      	ldr	r2, [pc, #264]	; (800192c <HAL_UART_MspInit+0x318>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b40      	ldr	r3, [pc, #256]	; (800192c <HAL_UART_MspInit+0x318>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001834:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001846:	2308      	movs	r3, #8
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	4837      	ldr	r0, [pc, #220]	; (8001930 <HAL_UART_MspInit+0x31c>)
 8001852:	f002 f913 	bl	8003a7c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_UART_MspInit+0x320>)
 8001858:	4a37      	ldr	r2, [pc, #220]	; (8001938 <HAL_UART_MspInit+0x324>)
 800185a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <HAL_UART_MspInit+0x320>)
 800185e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001862:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_UART_MspInit+0x320>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_UART_MspInit+0x320>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_UART_MspInit+0x320>)
 8001872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001876:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001878:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_UART_MspInit+0x320>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_UART_MspInit+0x320>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_UART_MspInit+0x320>)
 8001886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_UART_MspInit+0x320>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_UART_MspInit+0x320>)
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001898:	4826      	ldr	r0, [pc, #152]	; (8001934 <HAL_UART_MspInit+0x320>)
 800189a:	f001 fced 	bl	8003278 <HAL_DMA_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_UART_MspInit+0x294>
      Error_Handler();
 80018a4:	f7ff fcf4 	bl	8001290 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_UART_MspInit+0x320>)
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
 80018ae:	4a21      	ldr	r2, [pc, #132]	; (8001934 <HAL_UART_MspInit+0x320>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_UART_MspInit+0x328>)
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_UART_MspInit+0x32c>)
 80018b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_UART_MspInit+0x328>)
 80018bc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_UART_MspInit+0x328>)
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_UART_MspInit+0x328>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_UART_MspInit+0x328>)
 80018d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_UART_MspInit+0x328>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_UART_MspInit+0x328>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_UART_MspInit+0x328>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_UART_MspInit+0x328>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_UART_MspInit+0x328>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80018f4:	4811      	ldr	r0, [pc, #68]	; (800193c <HAL_UART_MspInit+0x328>)
 80018f6:	f001 fcbf 	bl	8003278 <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_UART_MspInit+0x2f0>
      Error_Handler();
 8001900:	f7ff fcc6 	bl	8001290 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_UART_MspInit+0x328>)
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <HAL_UART_MspInit+0x328>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2047      	movs	r0, #71	; 0x47
 8001916:	f001 fc78 	bl	800320a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800191a:	2047      	movs	r0, #71	; 0x47
 800191c:	f001 fc91 	bl	8003242 <HAL_NVIC_EnableIRQ>
}
 8001920:	bf00      	nop
 8001922:	3738      	adds	r7, #56	; 0x38
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40011400 	.word	0x40011400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000
 8001934:	200002bc 	.word	0x200002bc
 8001938:	40026428 	.word	0x40026428
 800193c:	2000031c 	.word	0x2000031c
 8001940:	400264a0 	.word	0x400264a0

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196e:	f7ff fd4f 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f004 fcb3 	bl	80062dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fbdb 	bl	8001130 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001988:	08007320 	.word	0x08007320
  ldr r2, =_sbss
 800198c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001990:	200009cc 	.word	0x200009cc

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800199c:	b08c      	sub	sp, #48	; 0x30
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
	inx = 0;
 80019a4:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <decodeGGA+0x17c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80019ae:	e004      	b.n	80019ba <decodeGGA+0x22>
 80019b0:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <decodeGGA+0x17c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a57      	ldr	r2, [pc, #348]	; (8001b14 <decodeGGA+0x17c>)
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <decodeGGA+0x17c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b2c      	cmp	r3, #44	; 0x2c
 80019c8:	d1f2      	bne.n	80019b0 <decodeGGA+0x18>
	inx++;
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <decodeGGA+0x17c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <decodeGGA+0x17c>)
 80019d2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 80019d4:	e004      	b.n	80019e0 <decodeGGA+0x48>
 80019d6:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <decodeGGA+0x17c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	4a4d      	ldr	r2, [pc, #308]	; (8001b14 <decodeGGA+0x17c>)
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <decodeGGA+0x17c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b2c      	cmp	r3, #44	; 0x2c
 80019ee:	d1f2      	bne.n	80019d6 <decodeGGA+0x3e>
	inx++;
 80019f0:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <decodeGGA+0x17c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	4a47      	ldr	r2, [pc, #284]	; (8001b14 <decodeGGA+0x17c>)
 80019f8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 80019fa:	e004      	b.n	8001a06 <decodeGGA+0x6e>
 80019fc:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <decodeGGA+0x17c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a44      	ldr	r2, [pc, #272]	; (8001b14 <decodeGGA+0x17c>)
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <decodeGGA+0x17c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b2c      	cmp	r3, #44	; 0x2c
 8001a14:	d1f2      	bne.n	80019fc <decodeGGA+0x64>
	inx++;
 8001a16:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <decodeGGA+0x17c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a3d      	ldr	r2, [pc, #244]	; (8001b14 <decodeGGA+0x17c>)
 8001a1e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001a20:	e004      	b.n	8001a2c <decodeGGA+0x94>
 8001a22:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <decodeGGA+0x17c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a3a      	ldr	r2, [pc, #232]	; (8001b14 <decodeGGA+0x17c>)
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <decodeGGA+0x17c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b2c      	cmp	r3, #44	; 0x2c
 8001a3a:	d1f2      	bne.n	8001a22 <decodeGGA+0x8a>
	inx++;
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <decodeGGA+0x17c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a34      	ldr	r2, [pc, #208]	; (8001b14 <decodeGGA+0x17c>)
 8001a44:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001a46:	e004      	b.n	8001a52 <decodeGGA+0xba>
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <decodeGGA+0x17c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <decodeGGA+0x17c>)
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <decodeGGA+0x17c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b2c      	cmp	r3, #44	; 0x2c
 8001a60:	d1f2      	bne.n	8001a48 <decodeGGA+0xb0>
	inx++;
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <decodeGGA+0x17c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <decodeGGA+0x17c>)
 8001a6a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001a6c:	e004      	b.n	8001a78 <decodeGGA+0xe0>
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <decodeGGA+0x17c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <decodeGGA+0x17c>)
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <decodeGGA+0x17c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b2c      	cmp	r3, #44	; 0x2c
 8001a86:	d1f2      	bne.n	8001a6e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <decodeGGA+0x17c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <decodeGGA+0x17c>)
 8001a90:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <decodeGGA+0x17c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b31      	cmp	r3, #49	; 0x31
 8001aa0:	d00f      	beq.n	8001ac2 <decodeGGA+0x12a>
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <decodeGGA+0x17c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b32      	cmp	r3, #50	; 0x32
 8001ab0:	d007      	beq.n	8001ac2 <decodeGGA+0x12a>
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <decodeGGA+0x17c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b36      	cmp	r3, #54	; 0x36
 8001ac0:	d106      	bne.n	8001ad0 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <decodeGGA+0x17c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001ace:	e009      	b.n	8001ae4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e2fd      	b.n	80020d6 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <decodeGGA+0x17c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <decodeGGA+0x17c>)
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <decodeGGA+0x17c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b2c      	cmp	r3, #44	; 0x2c
 8001af2:	d1f2      	bne.n	8001ada <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <decodeGGA+0x17c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <decodeGGA+0x17c>)
 8001afc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	220c      	movs	r2, #12
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fbda 	bl	80062c0 <memset>
	i=0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001b10:	e016      	b.n	8001b40 <decodeGGA+0x1a8>
 8001b12:	bf00      	nop
 8001b14:	2000037c 	.word	0x2000037c
	{
		buffer[i] = GGAbuffer[inx];
 8001b18:	4bab      	ldr	r3, [pc, #684]	; (8001dc8 <decodeGGA+0x430>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	7819      	ldrb	r1, [r3, #0]
 8001b24:	f107 020c 	add.w	r2, r7, #12
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	4413      	add	r3, r2
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
		i++;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	3301      	adds	r3, #1
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001b36:	4ba4      	ldr	r3, [pc, #656]	; (8001dc8 <decodeGGA+0x430>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4aa2      	ldr	r2, [pc, #648]	; (8001dc8 <decodeGGA+0x430>)
 8001b3e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001b40:	4ba1      	ldr	r3, [pc, #644]	; (8001dc8 <decodeGGA+0x430>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b4e:	d1e3      	bne.n	8001b18 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fb23 	bl	80061a0 <atoi>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a9b      	ldr	r2, [pc, #620]	; (8001dcc <decodeGGA+0x434>)
 8001b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b62:	1312      	asrs	r2, r2, #12
 8001b64:	17db      	asrs	r3, r3, #31
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	4b99      	ldr	r3, [pc, #612]	; (8001dd0 <decodeGGA+0x438>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4999      	ldr	r1, [pc, #612]	; (8001dd4 <decodeGGA+0x43c>)
 8001b6e:	fb81 0103 	smull	r0, r1, r1, r3
 8001b72:	1149      	asrs	r1, r1, #5
 8001b74:	17db      	asrs	r3, r3, #31
 8001b76:	1acb      	subs	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a97      	ldr	r2, [pc, #604]	; (8001dd8 <decodeGGA+0x440>)
 8001b7c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fb0c 	bl	80061a0 <atoi>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a92      	ldr	r2, [pc, #584]	; (8001dd4 <decodeGGA+0x43c>)
 8001b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b90:	1152      	asrs	r2, r2, #5
 8001b92:	17db      	asrs	r3, r3, #31
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	4a8f      	ldr	r2, [pc, #572]	; (8001dd4 <decodeGGA+0x43c>)
 8001b98:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9c:	1151      	asrs	r1, r2, #5
 8001b9e:	17da      	asrs	r2, r3, #31
 8001ba0:	1a8a      	subs	r2, r1, r2
 8001ba2:	2164      	movs	r1, #100	; 0x64
 8001ba4:	fb01 f202 	mul.w	r2, r1, r2
 8001ba8:	1a9a      	subs	r2, r3, r2
 8001baa:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <decodeGGA+0x438>)
 8001bac:	6819      	ldr	r1, [r3, #0]
 8001bae:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <decodeGGA+0x43c>)
 8001bb0:	fb83 0301 	smull	r0, r3, r3, r1
 8001bb4:	1158      	asrs	r0, r3, #5
 8001bb6:	17cb      	asrs	r3, r1, #31
 8001bb8:	1ac3      	subs	r3, r0, r3
 8001bba:	2064      	movs	r0, #100	; 0x64
 8001bbc:	fb00 f303 	mul.w	r3, r0, r3
 8001bc0:	1acb      	subs	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a85      	ldr	r2, [pc, #532]	; (8001ddc <decodeGGA+0x444>)
 8001bc6:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001bc8:	4b84      	ldr	r3, [pc, #528]	; (8001ddc <decodeGGA+0x444>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b3b      	cmp	r3, #59	; 0x3b
 8001bce:	dd09      	ble.n	8001be4 <decodeGGA+0x24c>
	{
		min = min-60;
 8001bd0:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <decodeGGA+0x444>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3b3c      	subs	r3, #60	; 0x3c
 8001bd6:	4a81      	ldr	r2, [pc, #516]	; (8001ddc <decodeGGA+0x444>)
 8001bd8:	6013      	str	r3, [r2, #0]
		hr++;
 8001bda:	4b7f      	ldr	r3, [pc, #508]	; (8001dd8 <decodeGGA+0x440>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a7d      	ldr	r2, [pc, #500]	; (8001dd8 <decodeGGA+0x440>)
 8001be2:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001be4:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <decodeGGA+0x440>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da09      	bge.n	8001c00 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001bec:	4b7a      	ldr	r3, [pc, #488]	; (8001dd8 <decodeGGA+0x440>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	4a79      	ldr	r2, [pc, #484]	; (8001dd8 <decodeGGA+0x440>)
 8001bf4:	6013      	str	r3, [r2, #0]
		daychange--;
 8001bf6:	4b7a      	ldr	r3, [pc, #488]	; (8001de0 <decodeGGA+0x448>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a78      	ldr	r2, [pc, #480]	; (8001de0 <decodeGGA+0x448>)
 8001bfe:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <decodeGGA+0x440>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b17      	cmp	r3, #23
 8001c06:	dd09      	ble.n	8001c1c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <decodeGGA+0x440>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3b18      	subs	r3, #24
 8001c0e:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <decodeGGA+0x440>)
 8001c10:	6013      	str	r3, [r2, #0]
		daychange++;
 8001c12:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <decodeGGA+0x448>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <decodeGGA+0x448>)
 8001c1a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001c1c:	4b6e      	ldr	r3, [pc, #440]	; (8001dd8 <decodeGGA+0x440>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001c24:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <decodeGGA+0x444>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 fab5 	bl	80061a0 <atoi>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <decodeGGA+0x43c>)
 8001c3a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c3e:	1159      	asrs	r1, r3, #5
 8001c40:	17d3      	asrs	r3, r2, #31
 8001c42:	1acb      	subs	r3, r1, r3
 8001c44:	2164      	movs	r1, #100	; 0x64
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001c50:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <decodeGGA+0x430>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a5c      	ldr	r2, [pc, #368]	; (8001dc8 <decodeGGA+0x430>)
 8001c58:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	220c      	movs	r2, #12
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fb2c 	bl	80062c0 <memset>
	i=0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001c6c:	e013      	b.n	8001c96 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001c6e:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <decodeGGA+0x430>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	7819      	ldrb	r1, [r3, #0]
 8001c7a:	f107 020c 	add.w	r2, r7, #12
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	4413      	add	r3, r2
 8001c82:	460a      	mov	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
		i++;
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	3301      	adds	r3, #1
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001c8c:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <decodeGGA+0x430>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <decodeGGA+0x430>)
 8001c94:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <decodeGGA+0x430>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b2c      	cmp	r3, #44	; 0x2c
 8001ca4:	d1e3      	bne.n	8001c6e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fa94 	bl	80001d8 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d801      	bhi.n	8001cba <decodeGGA+0x322>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e20d      	b.n	80020d6 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fa6e 	bl	80061a0 <atoi>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001ccc:	e002      	b.n	8001cd4 <decodeGGA+0x33c>
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd4:	f107 020c 	add.w	r2, r7, #12
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b2e      	cmp	r3, #46	; 0x2e
 8001ce0:	d1f5      	bne.n	8001cce <decodeGGA+0x336>
	j++;
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fa73 	bl	80001d8 <strlen>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	4413      	add	r3, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fa4c 	bl	80061a0 <atoi>
 8001d08:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001d0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbbc 	bl	800048c <__aeabi_i2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <decodeGGA+0x44c>)
 8001d1a:	f7fe fd4b 	bl	80007b4 <__aeabi_ddiv>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4690      	mov	r8, r2
 8001d24:	4699      	mov	r9, r3
 8001d26:	69f8      	ldr	r0, [r7, #28]
 8001d28:	f7fe fbb0 	bl	800048c <__aeabi_i2d>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	460d      	mov	r5, r1
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	3302      	adds	r3, #2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fba9 	bl	800048c <__aeabi_i2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ec43 2b11 	vmov	d1, r2, r3
 8001d42:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001dc0 <decodeGGA+0x428>
 8001d46:	f004 faed 	bl	8006324 <pow>
 8001d4a:	ec53 2b10 	vmov	r2, r3, d0
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fd2f 	bl	80007b4 <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	4649      	mov	r1, r9
 8001d5e:	f7fe fa49 	bl	80001f4 <__adddf3>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fea9 	bl	8000ac0 <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]
	inx++;  
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <decodeGGA+0x430>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <decodeGGA+0x430>)
 8001d80:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <decodeGGA+0x430>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <decodeGGA+0x430>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <decodeGGA+0x430>)
 8001d9a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <decodeGGA+0x430>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <decodeGGA+0x430>)
 8001da4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	220c      	movs	r2, #12
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fa86 	bl	80062c0 <memset>
	i=0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001db8:	e02a      	b.n	8001e10 <decodeGGA+0x478>
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40240000 	.word	0x40240000
 8001dc8:	2000037c 	.word	0x2000037c
 8001dcc:	68db8bad 	.word	0x68db8bad
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	51eb851f 	.word	0x51eb851f
 8001dd8:	20000380 	.word	0x20000380
 8001ddc:	20000384 	.word	0x20000384
 8001de0:	20000388 	.word	0x20000388
 8001de4:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001de8:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <decodeGGA+0x680>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	7819      	ldrb	r1, [r3, #0]
 8001df4:	f107 020c 	add.w	r2, r7, #12
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	4413      	add	r3, r2
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
		i++;
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	3301      	adds	r3, #1
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001e06:	4b84      	ldr	r3, [pc, #528]	; (8002018 <decodeGGA+0x680>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a82      	ldr	r2, [pc, #520]	; (8002018 <decodeGGA+0x680>)
 8001e0e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001e10:	4b81      	ldr	r3, [pc, #516]	; (8002018 <decodeGGA+0x680>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e1e:	d1e3      	bne.n	8001de8 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 f9bb 	bl	80061a0 <atoi>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001e32:	e002      	b.n	8001e3a <decodeGGA+0x4a2>
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	3301      	adds	r3, #1
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3a:	f107 020c 	add.w	r2, r7, #12
 8001e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b2e      	cmp	r3, #46	; 0x2e
 8001e46:	d1f5      	bne.n	8001e34 <decodeGGA+0x49c>
	j++;
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe f9c0 	bl	80001d8 <strlen>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e62:	f107 020c 	add.w	r2, r7, #12
 8001e66:	4413      	add	r3, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 f999 	bl	80061a0 <atoi>
 8001e6e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001e70:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb09 	bl	800048c <__aeabi_i2d>
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <decodeGGA+0x684>)
 8001e80:	f7fe fc98 	bl	80007b4 <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4690      	mov	r8, r2
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	69f8      	ldr	r0, [r7, #28]
 8001e8e:	f7fe fafd 	bl	800048c <__aeabi_i2d>
 8001e92:	4604      	mov	r4, r0
 8001e94:	460d      	mov	r5, r1
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe faf6 	bl	800048c <__aeabi_i2d>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	ec43 2b11 	vmov	d1, r2, r3
 8001ea8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8002010 <decodeGGA+0x678>
 8001eac:	f004 fa3a 	bl	8006324 <pow>
 8001eb0:	ec53 2b10 	vmov	r2, r3, d0
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	f7fe fc7c 	bl	80007b4 <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4640      	mov	r0, r8
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	f7fe f996 	bl	80001f4 <__adddf3>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fdf6 	bl	8000ac0 <__aeabi_d2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	609a      	str	r2, [r3, #8]
	inx++;
 8001ede:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <decodeGGA+0x680>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <decodeGGA+0x680>)
 8001ee6:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001ee8:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <decodeGGA+0x680>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <decodeGGA+0x680>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a46      	ldr	r2, [pc, #280]	; (8002018 <decodeGGA+0x680>)
 8001f00:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001f02:	4b45      	ldr	r3, [pc, #276]	; (8002018 <decodeGGA+0x680>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a43      	ldr	r2, [pc, #268]	; (8002018 <decodeGGA+0x680>)
 8001f0a:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001f0c:	4b42      	ldr	r3, [pc, #264]	; (8002018 <decodeGGA+0x680>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	4a41      	ldr	r2, [pc, #260]	; (8002018 <decodeGGA+0x680>)
 8001f14:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001f16:	4b40      	ldr	r3, [pc, #256]	; (8002018 <decodeGGA+0x680>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	4a3e      	ldr	r2, [pc, #248]	; (8002018 <decodeGGA+0x680>)
 8001f1e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	220c      	movs	r2, #12
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 f9c9 	bl	80062c0 <memset>
	i=0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001f32:	e013      	b.n	8001f5c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8001f34:	4b38      	ldr	r3, [pc, #224]	; (8002018 <decodeGGA+0x680>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	7819      	ldrb	r1, [r3, #0]
 8001f40:	f107 020c 	add.w	r2, r7, #12
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	4413      	add	r3, r2
 8001f48:	460a      	mov	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
		i++;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	3301      	adds	r3, #1
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f52:	4b31      	ldr	r3, [pc, #196]	; (8002018 <decodeGGA+0x680>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <decodeGGA+0x680>)
 8001f5a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <decodeGGA+0x680>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b2c      	cmp	r3, #44	; 0x2c
 8001f6a:	d1e3      	bne.n	8001f34 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 f915 	bl	80061a0 <atoi>
 8001f76:	4602      	mov	r2, r0
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <decodeGGA+0x680>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a25      	ldr	r2, [pc, #148]	; (8002018 <decodeGGA+0x680>)
 8001f84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001f86:	e004      	b.n	8001f92 <decodeGGA+0x5fa>
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <decodeGGA+0x680>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4a22      	ldr	r2, [pc, #136]	; (8002018 <decodeGGA+0x680>)
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <decodeGGA+0x680>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001fa0:	d1f2      	bne.n	8001f88 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <decodeGGA+0x680>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <decodeGGA+0x680>)
 8001faa:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 f983 	bl	80062c0 <memset>
	i=0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001fbe:	e013      	b.n	8001fe8 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <decodeGGA+0x680>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	7819      	ldrb	r1, [r3, #0]
 8001fcc:	f107 020c 	add.w	r2, r7, #12
 8001fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd2:	4413      	add	r3, r2
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
		i++;
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	3301      	adds	r3, #1
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <decodeGGA+0x680>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <decodeGGA+0x680>)
 8001fe6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <decodeGGA+0x680>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ff6:	d1e3      	bne.n	8001fc0 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f8cf 	bl	80061a0 <atoi>
 8002002:	4603      	mov	r3, r0
 8002004:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800200a:	e00c      	b.n	8002026 <decodeGGA+0x68e>
 800200c:	f3af 8000 	nop.w
 8002010:	00000000 	.word	0x00000000
 8002014:	40240000 	.word	0x40240000
 8002018:	2000037c 	.word	0x2000037c
 800201c:	40590000 	.word	0x40590000
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	3301      	adds	r3, #1
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
 8002026:	f107 020c 	add.w	r2, r7, #12
 800202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b2e      	cmp	r3, #46	; 0x2e
 8002032:	d1f5      	bne.n	8002020 <decodeGGA+0x688>
	j++;
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	3301      	adds	r3, #1
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f8ca 	bl	80001d8 <strlen>
 8002044:	4602      	mov	r2, r0
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	f107 020c 	add.w	r2, r7, #12
 8002052:	4413      	add	r3, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f004 f8a3 	bl	80061a0 <atoi>
 800205a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800205c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa13 	bl	800048c <__aeabi_i2d>
 8002066:	4604      	mov	r4, r0
 8002068:	460d      	mov	r5, r1
 800206a:	69f8      	ldr	r0, [r7, #28]
 800206c:	f7fe fa0e 	bl	800048c <__aeabi_i2d>
 8002070:	4680      	mov	r8, r0
 8002072:	4689      	mov	r9, r1
 8002074:	6a38      	ldr	r0, [r7, #32]
 8002076:	f7fe fa09 	bl	800048c <__aeabi_i2d>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	ec43 2b11 	vmov	d1, r2, r3
 8002082:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80020e0 <decodeGGA+0x748>
 8002086:	f004 f94d 	bl	8006324 <pow>
 800208a:	ec53 2b10 	vmov	r2, r3, d0
 800208e:	4640      	mov	r0, r8
 8002090:	4649      	mov	r1, r9
 8002092:	f7fe fb8f 	bl	80007b4 <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f7fe f8a9 	bl	80001f4 <__adddf3>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fd09 	bl	8000ac0 <__aeabi_d2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	621a      	str	r2, [r3, #32]

	inx++;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <decodeGGA+0x750>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <decodeGGA+0x750>)
 80020c0:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <decodeGGA+0x750>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80020d4:	2300      	movs	r3, #0

}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3730      	adds	r7, #48	; 0x30
 80020da:	46bd      	mov	sp, r7
 80020dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020e0:	00000000 	.word	0x00000000
 80020e4:	40240000 	.word	0x40240000
 80020e8:	2000037c 	.word	0x2000037c

080020ec <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <Ringbuf_init+0x3c>)
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <Ringbuf_init+0x40>)
 80020f4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <Ringbuf_init+0x44>)
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <Ringbuf_init+0x48>)
 80020fa:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <Ringbuf_init+0x4c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <Ringbuf_init+0x4c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <Ringbuf_init+0x4c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <Ringbuf_init+0x4c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0220 	orr.w	r2, r2, #32
 800211a:	60da      	str	r2, [r3, #12]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200007a0 	.word	0x200007a0
 800212c:	20000390 	.word	0x20000390
 8002130:	200007a4 	.word	0x200007a4
 8002134:	20000598 	.word	0x20000598
 8002138:	20000174 	.word	0x20000174

0800213c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002154:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	429a      	cmp	r2, r3
 8002160:	d009      	beq.n	8002176 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	79f9      	ldrb	r1, [r7, #7]
 800216c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <Uart_read+0x54>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <Uart_read+0x54>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800219a:	429a      	cmp	r2, r3
 800219c:	d102      	bne.n	80021a4 <Uart_read+0x20>
  {
    return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a2:	e013      	b.n	80021cc <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <Uart_read+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <Uart_read+0x54>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <Uart_read+0x54>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <Uart_read+0x54>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80021ca:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	200007a0 	.word	0x200007a0

080021dc <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <IsDataAvailable+0x30>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <IsDataAvailable+0x30>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	200007a0 	.word	0x200007a0

08002210 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <Uart_peek+0x38>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <Uart_peek+0x38>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002224:	429a      	cmp	r2, r3
 8002226:	d102      	bne.n	800222e <Uart_peek+0x1e>
  {
    return -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222c:	e006      	b.n	800223c <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <Uart_peek+0x38>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <Uart_peek+0x38>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800223a:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	200007a0 	.word	0x200007a0

0800224c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fd ffbc 	bl	80001d8 <strlen>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002268:	e01e      	b.n	80022a8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800226a:	4b36      	ldr	r3, [pc, #216]	; (8002344 <Copy_upto+0xf8>)
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <Copy_upto+0xf8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	4403      	add	r3, r0
 800227c:	5c8a      	ldrb	r2, [r1, r2]
 800227e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002280:	4b30      	ldr	r3, [pc, #192]	; (8002344 <Copy_upto+0xf8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <Copy_upto+0xf8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002292:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	3301      	adds	r3, #1
 800229a:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 800229c:	bf00      	nop
 800229e:	f7ff ff9d 	bl	80021dc <IsDataAvailable>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0fa      	beq.n	800229e <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80022a8:	f7ff ffb2 	bl	8002210 <Uart_peek>
 80022ac:	4601      	mov	r1, r0
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4299      	cmp	r1, r3
 80022b8:	d1d7      	bne.n	800226a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80022ba:	e027      	b.n	800230c <Copy_upto+0xc0>
	{
		so_far++;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80022c2:	f7ff ff5f 	bl	8002184 <Uart_read>
 80022c6:	4601      	mov	r1, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	613a      	str	r2, [r7, #16]
 80022ce:	461a      	mov	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2ca      	uxtb	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d101      	bne.n	80022e4 <Copy_upto+0x98>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e02a      	b.n	800233a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <Copy_upto+0xfc>)
 80022e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80022ea:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80022ec:	bf00      	nop
 80022ee:	f7ff ff75 	bl	80021dc <IsDataAvailable>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <Copy_upto+0xb4>
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <Copy_upto+0xfc>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f6      	bne.n	80022ee <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <Copy_upto+0xfc>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <Copy_upto+0xc0>
 8002308:	2300      	movs	r3, #0
 800230a:	e016      	b.n	800233a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 800230c:	f7ff ff80 	bl	8002210 <Uart_peek>
 8002310:	4601      	mov	r1, r0
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4299      	cmp	r1, r3
 800231c:	d0ce      	beq.n	80022bc <Copy_upto+0x70>
	}

	if (so_far != len)
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	429a      	cmp	r2, r3
 8002324:	d002      	beq.n	800232c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
		goto again;
 800232a:	e79d      	b.n	8002268 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d101      	bne.n	8002338 <Copy_upto+0xec>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <Copy_upto+0xee>
	else return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200007a0 	.word	0x200007a0
 8002348:	2000038c 	.word	0x2000038c

0800234c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7fd ff3d 	bl	80001d8 <strlen>
 800235e:	4603      	mov	r3, r0
 8002360:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <Wait_for+0x108>)
 8002364:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002368:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800236a:	bf00      	nop
 800236c:	f7ff ff36 	bl	80021dc <IsDataAvailable>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <Wait_for+0x32>
 8002376:	4b37      	ldr	r3, [pc, #220]	; (8002454 <Wait_for+0x108>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f6      	bne.n	800236c <Wait_for+0x20>
	if (timeout == 0) return 0;
 800237e:	4b35      	ldr	r3, [pc, #212]	; (8002454 <Wait_for+0x108>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d119      	bne.n	80023ba <Wait_for+0x6e>
 8002386:	2300      	movs	r3, #0
 8002388:	e060      	b.n	800244c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <Wait_for+0x10c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <Wait_for+0x10c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800239a:	429a      	cmp	r2, r3
 800239c:	d00b      	beq.n	80023b6 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <Wait_for+0x10c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <Wait_for+0x10c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023b4:	e001      	b.n	80023ba <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e048      	b.n	800244c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80023ba:	f7ff ff29 	bl	8002210 <Uart_peek>
 80023be:	4601      	mov	r1, r0
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d1de      	bne.n	800238a <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80023cc:	e027      	b.n	800241e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <Wait_for+0x10c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <Wait_for+0x10c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d101      	bne.n	80023f6 <Wait_for+0xaa>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e02a      	b.n	800244c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <Wait_for+0x108>)
 80023f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023fc:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80023fe:	bf00      	nop
 8002400:	f7ff feec 	bl	80021dc <IsDataAvailable>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <Wait_for+0xc6>
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <Wait_for+0x108>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f6      	bne.n	8002400 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <Wait_for+0x108>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <Wait_for+0xd2>
 800241a:	2300      	movs	r3, #0
 800241c:	e016      	b.n	800244c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800241e:	f7ff fef7 	bl	8002210 <Uart_peek>
 8002422:	4601      	mov	r1, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4299      	cmp	r1, r3
 800242e:	d0ce      	beq.n	80023ce <Wait_for+0x82>
	}

	if (so_far != len)
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	429a      	cmp	r2, r3
 8002436:	d002      	beq.n	800243e <Wait_for+0xf2>
	{
		so_far = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
		goto again;
 800243c:	e791      	b.n	8002362 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d101      	bne.n	800244a <Wait_for+0xfe>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <Wait_for+0x100>
	else return 0;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000038c 	.word	0x2000038c
 8002458:	200007a0 	.word	0x200007a0

0800245c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d013      	beq.n	80024a6 <Uart_isr+0x4a>
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <Uart_isr+0xb4>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fe4c 	bl	800213c <store_char>
        return;
 80024a4:	e031      	b.n	800250a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d02c      	beq.n	800250a <Uart_isr+0xae>
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d027      	beq.n	800250a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <Uart_isr+0xb8>)
 80024bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <Uart_isr+0xb8>)
 80024c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d108      	bne.n	80024dc <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80024da:	e015      	b.n	8002508 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <Uart_isr+0xb8>)
 80024de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <Uart_isr+0xb8>)
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <Uart_isr+0xb8>)
 80024ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f4:	4a07      	ldr	r2, [pc, #28]	; (8002514 <Uart_isr+0xb8>)
 80024f6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	7bba      	ldrb	r2, [r7, #14]
 8002506:	605a      	str	r2, [r3, #4]
    	return;
 8002508:	bf00      	nop
    }
}
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200007a0 	.word	0x200007a0
 8002514:	20000598 	.word	0x20000598

08002518 <gps_GGA_routine>:
uint8_t ggaflag = -1;
uint8_t rmcflag = 1;

GPSSTRUCT gpsData;

void gps_GGA_routine(){
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	if (Wait_for("GGA") == 1){
 800251c:	480a      	ldr	r0, [pc, #40]	; (8002548 <gps_GGA_routine+0x30>)
 800251e:	f7ff ff15 	bl	800234c <Wait_for>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d10d      	bne.n	8002544 <gps_GGA_routine+0x2c>
		Copy_upto("*", GGA);
 8002528:	4908      	ldr	r1, [pc, #32]	; (800254c <gps_GGA_routine+0x34>)
 800252a:	4809      	ldr	r0, [pc, #36]	; (8002550 <gps_GGA_routine+0x38>)
 800252c:	f7ff fe8e 	bl	800224c <Copy_upto>
		decodeGGA(GGA, &gpsData.ggastruct);
 8002530:	4908      	ldr	r1, [pc, #32]	; (8002554 <gps_GGA_routine+0x3c>)
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <gps_GGA_routine+0x34>)
 8002534:	f7ff fa30 	bl	8001998 <decodeGGA>
		ggaflag *= -1;
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <gps_GGA_routine+0x40>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	425b      	negs	r3, r3
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <gps_GGA_routine+0x40>)
 8002542:	701a      	strb	r2, [r3, #0]
//	if (Wait_for("RMC") == 1){
//		Copy_upto("*", RMC);
//		decodeRMC(RMC, &gpsData.rmcstruct);
//		rmcflag *= -1;
//	}
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	080071b0 	.word	0x080071b0
 800254c:	200007a8 	.word	0x200007a8
 8002550:	080071b4 	.word	0x080071b4
 8002554:	2000080c 	.word	0x2000080c
 8002558:	20000008 	.word	0x20000008

0800255c <LCD_Touch_OnDown>:

/*
 * Indicates the start of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnDown() {
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	if (m_touch_state == LCD_TOUCH_IDLE) {
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <LCD_Touch_OnDown+0x1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <LCD_Touch_OnDown+0x12>
		m_touch_state = LCD_TOUCH_DOWN;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <LCD_Touch_OnDown+0x1c>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
	}
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	20000850 	.word	0x20000850

0800257c <LCD_Touch_OnUp>:

/*
 * Indicates the finish of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnUp() {
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	m_touch_state = LCD_TOUCH_IDLE;
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <LCD_Touch_OnUp+0x24>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]

	if (m_last_point_ref != NULL) {
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <LCD_Touch_OnUp+0x28>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <LCD_Touch_OnUp+0x1a>
		// Mark the last read touch point as TOUCH_UP.
		// Note that it changes the point state that the user specified
		// as an argument to LCD_Touch_Read function.
		m_last_point_ref->state = LCD_TOUCH_UP;
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <LCD_Touch_OnUp+0x28>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2203      	movs	r2, #3
 8002594:	721a      	strb	r2, [r3, #8]
	}
//	LCD_Touch_Draw_OnUp();
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20000850 	.word	0x20000850
 80025a4:	20000854 	.word	0x20000854

080025a8 <lora_init>:
uint8_t lora_rxbuff[LORA_SERIAL_LEN];
uint8_t lora_param[LORA_SERIAL_LEN];
uint8_t lora_dummy_rxbuff;
uint8_t aux;

void lora_init(UART_HandleTypeDef *huart){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 80025b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025b4:	4810      	ldr	r0, [pc, #64]	; (80025f8 <lora_init+0x50>)
 80025b6:	f001 fbe5 	bl	8003d84 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <lora_init+0x54>)
 80025c0:	701a      	strb	r2, [r3, #0]
	lora_huart = huart;
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <lora_init+0x58>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6013      	str	r3, [r2, #0]
	lora_read_model_data();
 80025c8:	f000 f876 	bl	80026b8 <lora_read_model_data>
	lora_set_ADDH(0);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f000 f8ad 	bl	800272c <lora_set_ADDH>
	lora_set_ADDL(0);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f000 f8ba 	bl	800274c <lora_set_ADDL>
	lora_set_speed(0b00011000);
 80025d8:	2018      	movs	r0, #24
 80025da:	f000 f8c7 	bl	800276c <lora_set_speed>
	lora_set_channel(0b00000110);
 80025de:	2006      	movs	r0, #6
 80025e0:	f000 f8d4 	bl	800278c <lora_set_channel>
	lora_set_option(0b01000100);
 80025e4:	2044      	movs	r0, #68	; 0x44
 80025e6:	f000 f8e1 	bl	80027ac <lora_set_option>
	lora_save_param(PERMANENT);
 80025ea:	20c0      	movs	r0, #192	; 0xc0
 80025ec:	f000 f8ee 	bl	80027cc <lora_save_param>
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40020400 	.word	0x40020400
 80025fc:	2000087b 	.word	0x2000087b
 8002600:	20000858 	.word	0x20000858

08002604 <lora_set_mode>:

void lora_set_mode(LORA_Mode mode){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(LORA_PIN_RECOVER);
 800260e:	2032      	movs	r0, #50	; 0x32
 8002610:	f000 fa9a 	bl	8002b48 <HAL_Delay>
	switch(mode){
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d83e      	bhi.n	8002698 <lora_set_mode+0x94>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <lora_set_mode+0x1c>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002631 	.word	0x08002631
 8002624:	0800264b 	.word	0x0800264b
 8002628:	08002665 	.word	0x08002665
 800262c:	0800267f 	.word	0x0800267f
	case LORA_NORMAL_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002636:	481e      	ldr	r0, [pc, #120]	; (80026b0 <lora_set_mode+0xac>)
 8002638:	f001 fbbc 	bl	8003db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002642:	481c      	ldr	r0, [pc, #112]	; (80026b4 <lora_set_mode+0xb0>)
 8002644:	f001 fbb6 	bl	8003db4 <HAL_GPIO_WritePin>
		break;
 8002648:	e026      	b.n	8002698 <lora_set_mode+0x94>
	case LORA_WAKEUP_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002650:	4817      	ldr	r0, [pc, #92]	; (80026b0 <lora_set_mode+0xac>)
 8002652:	f001 fbaf 	bl	8003db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265c:	4815      	ldr	r0, [pc, #84]	; (80026b4 <lora_set_mode+0xb0>)
 800265e:	f001 fba9 	bl	8003db4 <HAL_GPIO_WritePin>
		break;
 8002662:	e019      	b.n	8002698 <lora_set_mode+0x94>
	case LORA_POWERSAVING_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266a:	4811      	ldr	r0, [pc, #68]	; (80026b0 <lora_set_mode+0xac>)
 800266c:	f001 fba2 	bl	8003db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 1);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002676:	480f      	ldr	r0, [pc, #60]	; (80026b4 <lora_set_mode+0xb0>)
 8002678:	f001 fb9c 	bl	8003db4 <HAL_GPIO_WritePin>
		break;
 800267c:	e00c      	b.n	8002698 <lora_set_mode+0x94>
	case LORA_PROGRAM_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 1);
 800267e:	2201      	movs	r2, #1
 8002680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002684:	480a      	ldr	r0, [pc, #40]	; (80026b0 <lora_set_mode+0xac>)
 8002686:	f001 fb95 	bl	8003db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 1);
 800268a:	2201      	movs	r2, #1
 800268c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <lora_set_mode+0xb0>)
 8002692:	f001 fb8f 	bl	8003db4 <HAL_GPIO_WritePin>
		break;
 8002696:	bf00      	nop
	}
	HAL_Delay(LORA_PIN_RECOVER);
 8002698:	2032      	movs	r0, #50	; 0x32
 800269a:	f000 fa55 	bl	8002b48 <HAL_Delay>
	lora_clear_buffer();
 800269e:	f000 f8d9 	bl	8002854 <lora_clear_buffer>
	lora_complete_task(200);
 80026a2:	20c8      	movs	r0, #200	; 0xc8
 80026a4:	f000 f8f8 	bl	8002898 <lora_complete_task>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400

080026b8 <lora_read_model_data>:

void lora_read_model_data(){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
	lora_txbuff[0] = 0xc1;
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <lora_read_model_data+0x64>)
 80026c0:	22c1      	movs	r2, #193	; 0xc1
 80026c2:	701a      	strb	r2, [r3, #0]
	lora_txbuff[1] = 0xc1;
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <lora_read_model_data+0x64>)
 80026c6:	22c1      	movs	r2, #193	; 0xc1
 80026c8:	705a      	strb	r2, [r3, #1]
	lora_txbuff[2] = 0xc1;
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <lora_read_model_data+0x64>)
 80026cc:	22c1      	movs	r2, #193	; 0xc1
 80026ce:	709a      	strb	r2, [r3, #2]

	for(int i = 0 ; i < 5 ; i++){
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	e007      	b.n	80026e6 <lora_read_model_data+0x2e>
		lora_param[i] = 0;
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <lora_read_model_data+0x68>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 5 ; i++){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3301      	adds	r3, #1
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	ddf4      	ble.n	80026d6 <lora_read_model_data+0x1e>
	}

	lora_set_mode(LORA_PROGRAM_MODE);
 80026ec:	2003      	movs	r0, #3
 80026ee:	f7ff ff89 	bl	8002604 <lora_set_mode>

	HAL_UART_Transmit_DMA(lora_huart, lora_txbuff, 3);
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <lora_read_model_data+0x6c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2203      	movs	r2, #3
 80026f8:	4908      	ldr	r1, [pc, #32]	; (800271c <lora_read_model_data+0x64>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 fb38 	bl	8004d70 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(lora_huart, lora_rxbuff, LORA_SERIAL_LEN);
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <lora_read_model_data+0x6c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2206      	movs	r2, #6
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <lora_read_model_data+0x70>)
 8002708:	4618      	mov	r0, r3
 800270a:	f002 fbaf 	bl	8004e6c <HAL_UART_Receive_DMA>

	lora_set_mode(LORA_NORMAL_MODE);
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff ff78 	bl	8002604 <lora_set_mode>
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000864 	.word	0x20000864
 8002720:	20000874 	.word	0x20000874
 8002724:	20000858 	.word	0x20000858
 8002728:	2000086c 	.word	0x2000086c

0800272c <lora_set_ADDH>:

void lora_receive_callback(UART_HandleTypeDef *huart){
	if (huart->Instance != lora_huart->Instance)return;
}

void lora_set_ADDH(uint8_t val){
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	lora.addh = val;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <lora_set_ADDH+0x1c>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	7013      	strb	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	2000085c 	.word	0x2000085c

0800274c <lora_set_ADDL>:

void lora_set_ADDL(uint8_t val){
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
	lora.addl = val;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <lora_set_ADDL+0x1c>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	7053      	strb	r3, [r2, #1]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	2000085c 	.word	0x2000085c

0800276c <lora_set_speed>:

void lora_set_speed(uint8_t val){
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	lora.speed = val;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <lora_set_speed+0x1c>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	7093      	strb	r3, [r2, #2]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	2000085c 	.word	0x2000085c

0800278c <lora_set_channel>:

void lora_set_channel(uint8_t val){
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
	lora.channel = val;
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <lora_set_channel+0x1c>)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	70d3      	strb	r3, [r2, #3]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	2000085c 	.word	0x2000085c

080027ac <lora_set_option>:

void lora_set_option(uint8_t val){
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	lora.option = val;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <lora_set_option+0x1c>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	7113      	strb	r3, [r2, #4]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	2000085c 	.word	0x2000085c

080027cc <lora_save_param>:

void lora_save_param(uint8_t val){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
	lora_txbuff[0] = val;
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <lora_save_param+0x4c>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	7013      	strb	r3, [r2, #0]
	lora_txbuff[1] = lora.addh;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <lora_save_param+0x50>)
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <lora_save_param+0x4c>)
 80027e2:	705a      	strb	r2, [r3, #1]
	lora_txbuff[2] = lora.addl;
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <lora_save_param+0x50>)
 80027e6:	785a      	ldrb	r2, [r3, #1]
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <lora_save_param+0x4c>)
 80027ea:	709a      	strb	r2, [r3, #2]
	lora_txbuff[3] = lora.speed;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <lora_save_param+0x50>)
 80027ee:	789a      	ldrb	r2, [r3, #2]
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <lora_save_param+0x4c>)
 80027f2:	70da      	strb	r2, [r3, #3]
	lora_txbuff[4] = lora.channel;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <lora_save_param+0x50>)
 80027f6:	78da      	ldrb	r2, [r3, #3]
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <lora_save_param+0x4c>)
 80027fa:	711a      	strb	r2, [r3, #4]
	lora_txbuff[5] = lora.option;
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <lora_save_param+0x50>)
 80027fe:	791a      	ldrb	r2, [r3, #4]
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <lora_save_param+0x4c>)
 8002802:	715a      	strb	r2, [r3, #5]

	lora_serial_transmit(lora_txbuff, LORA_SERIAL_LEN);
 8002804:	2106      	movs	r1, #6
 8002806:	4804      	ldr	r0, [pc, #16]	; (8002818 <lora_save_param+0x4c>)
 8002808:	f000 f80a 	bl	8002820 <lora_serial_transmit>

	lora_read_model_data();
 800280c:	f7ff ff54 	bl	80026b8 <lora_read_model_data>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000864 	.word	0x20000864
 800281c:	2000085c 	.word	0x2000085c

08002820 <lora_serial_transmit>:

void lora_serial_transmit(uint8_t *data, uint8_t len){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
	lora_set_mode(LORA_PROGRAM_MODE);
 800282c:	2003      	movs	r0, #3
 800282e:	f7ff fee9 	bl	8002604 <lora_set_mode>
	HAL_UART_Transmit_DMA(lora_huart, data, len);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <lora_serial_transmit+0x30>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	b292      	uxth	r2, r2
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f002 fa97 	bl	8004d70 <HAL_UART_Transmit_DMA>
	lora_set_mode(LORA_NORMAL_MODE);
 8002842:	2000      	movs	r0, #0
 8002844:	f7ff fede 	bl	8002604 <lora_set_mode>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000858 	.word	0x20000858

08002854 <lora_clear_buffer>:

void lora_clear_buffer(){
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
	unsigned long time = HAL_GetTick();
 800285a:	f000 f969 	bl	8002b30 <HAL_GetTick>
 800285e:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() < time + 500){
 8002860:	e008      	b.n	8002874 <lora_clear_buffer+0x20>
		HAL_UART_Receive_DMA(lora_huart, lora_dummy_rxbuff, 1);
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <lora_clear_buffer+0x3c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <lora_clear_buffer+0x40>)
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	4611      	mov	r1, r2
 800286c:	2201      	movs	r2, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fafc 	bl	8004e6c <HAL_UART_Receive_DMA>
	while(HAL_GetTick() < time + 500){
 8002874:	f000 f95c 	bl	8002b30 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002880:	429a      	cmp	r2, r3
 8002882:	d3ee      	bcc.n	8002862 <lora_clear_buffer+0xe>
	}
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000858 	.word	0x20000858
 8002894:	2000087a 	.word	0x2000087a

08002898 <lora_complete_task>:

void lora_complete_task(unsigned long timeout){
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	unsigned long time = HAL_GetTick();
 80028a0:	f000 f946 	bl	8002b30 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 80028a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028aa:	4818      	ldr	r0, [pc, #96]	; (800290c <lora_complete_task+0x74>)
 80028ac:	f001 fa6a 	bl	8003d84 <HAL_GPIO_ReadPin>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <lora_complete_task+0x78>)
 80028b6:	701a      	strb	r2, [r3, #0]
	if (((unsigned long) (time + timeout)) == 0){
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10d      	bne.n	80028de <lora_complete_task+0x46>
		time = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
	}
	while (HAL_GPIO_ReadPin(AUX_Port, AUX_Pin) == 0){
 80028c6:	e00a      	b.n	80028de <lora_complete_task+0x46>
		HAL_Delay(LORA_PIN_RECOVER);
 80028c8:	2032      	movs	r0, #50	; 0x32
 80028ca:	f000 f93d 	bl	8002b48 <HAL_Delay>
		if (HAL_GetTick() > time + timeout)break;
 80028ce:	f000 f92f 	bl	8002b30 <HAL_GetTick>
 80028d2:	4601      	mov	r1, r0
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	4299      	cmp	r1, r3
 80028dc:	d808      	bhi.n	80028f0 <lora_complete_task+0x58>
	while (HAL_GPIO_ReadPin(AUX_Port, AUX_Pin) == 0){
 80028de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e2:	480a      	ldr	r0, [pc, #40]	; (800290c <lora_complete_task+0x74>)
 80028e4:	f001 fa4e 	bl	8003d84 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ec      	beq.n	80028c8 <lora_complete_task+0x30>
 80028ee:	e000      	b.n	80028f2 <lora_complete_task+0x5a>
		if (HAL_GetTick() > time + timeout)break;
 80028f0:	bf00      	nop
	}
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 80028f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <lora_complete_task+0x74>)
 80028f8:	f001 fa44 	bl	8003d84 <HAL_GPIO_ReadPin>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <lora_complete_task+0x78>)
 8002902:	701a      	strb	r2, [r3, #0]
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40020400 	.word	0x40020400
 8002910:	2000087b 	.word	0x2000087b

08002914 <lora_wireless_transmit_routine>:
	HAL_UART_Receive_DMA(lora_huart, rxdummy, 5);
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
//	lora_complete_task(1000);
}

void lora_wireless_transmit_routine(){
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
//	memcpy(lora_data_tx.dummy, dummy, 5);
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 8002918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800291c:	4816      	ldr	r0, [pc, #88]	; (8002978 <lora_wireless_transmit_routine+0x64>)
 800291e:	f001 fa31 	bl	8003d84 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <lora_wireless_transmit_routine+0x68>)
 8002928:	701a      	strb	r2, [r3, #0]
	static uint32_t delay = 0;
	if(HAL_GetTick() < delay + 1000)return;
 800292a:	f000 f901 	bl	8002b30 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <lora_wireless_transmit_routine+0x6c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002938:	429a      	cmp	r2, r3
 800293a:	d31b      	bcc.n	8002974 <lora_wireless_transmit_routine+0x60>
	delay = HAL_GetTick();
 800293c:	f000 f8f8 	bl	8002b30 <HAL_GetTick>
 8002940:	4603      	mov	r3, r0
 8002942:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <lora_wireless_transmit_routine+0x6c>)
 8002944:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(lora_huart, txdummy, 5);
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <lora_wireless_transmit_routine+0x70>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2205      	movs	r2, #5
 800294c:	490e      	ldr	r1, [pc, #56]	; (8002988 <lora_wireless_transmit_routine+0x74>)
 800294e:	4618      	mov	r0, r3
 8002950:	f002 fa0e 	bl	8004d70 <HAL_UART_Transmit_DMA>
	txdummy[3]++;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <lora_wireless_transmit_routine+0x74>)
 8002956:	78db      	ldrb	r3, [r3, #3]
 8002958:	3301      	adds	r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <lora_wireless_transmit_routine+0x74>)
 800295e:	70da      	strb	r2, [r3, #3]
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 8002960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002964:	4804      	ldr	r0, [pc, #16]	; (8002978 <lora_wireless_transmit_routine+0x64>)
 8002966:	f001 fa0d 	bl	8003d84 <HAL_GPIO_ReadPin>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	4b03      	ldr	r3, [pc, #12]	; (800297c <lora_wireless_transmit_routine+0x68>)
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e000      	b.n	8002976 <lora_wireless_transmit_routine+0x62>
	if(HAL_GetTick() < delay + 1000)return;
 8002974:	bf00      	nop
//	lora_complete_task(1000);
}
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40020400 	.word	0x40020400
 800297c:	2000087b 	.word	0x2000087b
 8002980:	2000087c 	.word	0x2000087c
 8002984:	20000858 	.word	0x20000858
 8002988:	2000000c 	.word	0x2000000c

0800298c <server_init>:
uint8_t receive_flag;
uint8_t restart_flag;
uint8_t transmit_flag;
uint8_t server_status;

void server_init(UART_HandleTypeDef *huart){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	server_huart = huart;
 8002994:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <server_init+0x2c>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(server_huart, rxbuff, MAX_RX_PACKET_LEN + 3);
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <server_init+0x2c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2205      	movs	r2, #5
 80029a0:	4906      	ldr	r1, [pc, #24]	; (80029bc <server_init+0x30>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fa62 	bl	8004e6c <HAL_UART_Receive_DMA>
	init_flag = 1;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <server_init+0x34>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000880 	.word	0x20000880
 80029bc:	20000884 	.word	0x20000884
 80029c0:	2000088a 	.word	0x2000088a

080029c4 <server_receive_restart>:

void server_receive_restart(void){
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(server_huart);
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <server_receive_restart+0x2c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fa7d 	bl	8004ecc <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(server_huart, rxbuff, MAX_RX_PACKET_LEN + 3);
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <server_receive_restart+0x2c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2205      	movs	r2, #5
 80029d8:	4906      	ldr	r1, [pc, #24]	; (80029f4 <server_receive_restart+0x30>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 fa46 	bl	8004e6c <HAL_UART_Receive_DMA>
	restart_flag++;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <server_receive_restart+0x34>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <server_receive_restart+0x34>)
 80029ea:	701a      	strb	r2, [r3, #0]
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000880 	.word	0x20000880
 80029f4:	20000884 	.word	0x20000884
 80029f8:	2000088b 	.word	0x2000088b

080029fc <server_receive_callback>:

void server_receive_callback(UART_HandleTypeDef *huart){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	if (huart->Instance != server_huart->Instance)return;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <server_receive_callback+0x58>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d11b      	bne.n	8002a4a <server_receive_callback+0x4e>
	if (rxbuff[0] == 'i' && rxbuff[1] == 't' && rxbuff[2] == 's'){
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <server_receive_callback+0x5c>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b69      	cmp	r3, #105	; 0x69
 8002a18:	d10b      	bne.n	8002a32 <server_receive_callback+0x36>
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <server_receive_callback+0x5c>)
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	2b74      	cmp	r3, #116	; 0x74
 8002a20:	d107      	bne.n	8002a32 <server_receive_callback+0x36>
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <server_receive_callback+0x5c>)
 8002a24:	789b      	ldrb	r3, [r3, #2]
 8002a26:	2b73      	cmp	r3, #115	; 0x73
 8002a28:	d103      	bne.n	8002a32 <server_receive_callback+0x36>
		server_status = 1;
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <server_receive_callback+0x60>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e004      	b.n	8002a3c <server_receive_callback+0x40>
	}
	else {
		server_status = 0;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <server_receive_callback+0x60>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
		server_receive_restart();
 8002a38:	f7ff ffc4 	bl	80029c4 <server_receive_restart>
//		HAL_UART_DMAStop(server_huart);
//		HAL_UART_Receive_DMA(server_huart, txbuff, MAX_RX_PACKET_LEN + 3);
	}
	callback_flag++;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <server_receive_callback+0x64>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <server_receive_callback+0x64>)
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	e000      	b.n	8002a4c <server_receive_callback+0x50>
	if (huart->Instance != server_huart->Instance)return;
 8002a4a:	bf00      	nop
}
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000880 	.word	0x20000880
 8002a58:	20000884 	.word	0x20000884
 8002a5c:	2000088c 	.word	0x2000088c
 8002a60:	20000889 	.word	0x20000889

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <HAL_Init+0x40>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_Init+0x40>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_Init+0x40>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 fbb1 	bl	80031f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7fe fc00 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fbc9 	bl	800325e <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae4:	f000 fb91 	bl	800320a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000018 	.word	0x20000018
 8002b04:	20000014 	.word	0x20000014

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000018 	.word	0x20000018
 8002b2c:	20000890 	.word	0x20000890

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000890 	.word	0x20000890

08002b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff ffee 	bl	8002b30 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000018 	.word	0x20000018

08002b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e033      	b.n	8002c0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe f9a6 	bl	8000f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d118      	bne.n	8002c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bd6:	f023 0302 	bic.w	r3, r3, #2
 8002bda:	f043 0202 	orr.w	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f93a 	bl	8002e5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8002bfe:	e001      	b.n	8002c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e105      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x228>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	d925      	bls.n	8002c90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68d9      	ldr	r1, [r3, #12]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	3b1e      	subs	r3, #30
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43da      	mvns	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	400a      	ands	r2, r1
 8002c68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4403      	add	r3, r0
 8002c82:	3b1e      	subs	r3, #30
 8002c84:	409a      	lsls	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	e022      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6919      	ldr	r1, [r3, #16]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4403      	add	r3, r0
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d824      	bhi.n	8002d28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b05      	subs	r3, #5
 8002cf0:	221f      	movs	r2, #31
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	3b05      	subs	r3, #5
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
 8002d26:	e04c      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d824      	bhi.n	8002d7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b23      	subs	r3, #35	; 0x23
 8002d42:	221f      	movs	r2, #31
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	400a      	ands	r2, r1
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b23      	subs	r3, #35	; 0x23
 8002d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
 8002d78:	e023      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b41      	subs	r3, #65	; 0x41
 8002d8c:	221f      	movs	r2, #31
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	400a      	ands	r2, r1
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	3b41      	subs	r3, #65	; 0x41
 8002db6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_ADC_ConfigChannel+0x234>)
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <HAL_ADC_ConfigChannel+0x238>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d109      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1cc>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b12      	cmp	r3, #18
 8002dd6:	d105      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_ADC_ConfigChannel+0x238>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d123      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x21e>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d003      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x1e6>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b11      	cmp	r3, #17
 8002dfc:	d11b      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d111      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_ADC_ConfigChannel+0x23c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_ADC_ConfigChannel+0x240>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	0c9a      	lsrs	r2, r3, #18
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e28:	e002      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f9      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40012300 	.word	0x40012300
 8002e50:	40012000 	.word	0x40012000
 8002e54:	20000000 	.word	0x20000000
 8002e58:	431bde83 	.word	0x431bde83

08002e5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e64:	4b79      	ldr	r3, [pc, #484]	; (800304c <ADC_Init+0x1f0>)
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	021a      	lsls	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	4a58      	ldr	r2, [pc, #352]	; (8003050 <ADC_Init+0x1f4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d022      	beq.n	8002f3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6899      	ldr	r1, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e00f      	b.n	8002f5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0202 	bic.w	r2, r2, #2
 8002f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7e1b      	ldrb	r3, [r3, #24]
 8002f74:	005a      	lsls	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	035a      	lsls	r2, r3, #13
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	e007      	b.n	8002fd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	051a      	lsls	r2, r3, #20
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003012:	025a      	lsls	r2, r3, #9
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	029a      	lsls	r2, r3, #10
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40012300 	.word	0x40012300
 8003050:	0f000001 	.word	0x0f000001

08003054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800307c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003086:	4a04      	ldr	r2, [pc, #16]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	60d3      	str	r3, [r2, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <__NVIC_GetPriorityGrouping+0x18>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0307 	and.w	r3, r3, #7
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db0b      	blt.n	80030e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4907      	ldr	r1, [pc, #28]	; (80030f0 <__NVIC_EnableIRQ+0x38>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43d9      	mvns	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	4313      	orrs	r3, r2
         );
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c0:	d301      	bcc.n	80031c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <SysTick_Config+0x40>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031d4:	f7ff ff8e 	bl	80030f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SysTick_Config+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <SysTick_Config+0x40>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff29 	bl	8003054 <__NVIC_SetPriorityGrouping>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800321c:	f7ff ff3e 	bl	800309c <__NVIC_GetPriorityGrouping>
 8003220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff8e 	bl	8003148 <NVIC_EncodePriority>
 800322c:	4602      	mov	r2, r0
 800322e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff5d 	bl	80030f4 <__NVIC_SetPriority>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff31 	bl	80030b8 <__NVIC_EnableIRQ>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffa2 	bl	80031b0 <SysTick_Config>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff fc54 	bl	8002b30 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e099      	b.n	80033c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	e00f      	b.n	80032d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b6:	f7ff fc3b 	bl	8002b30 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d908      	bls.n	80032d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e078      	b.n	80033c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e8      	bne.n	80032b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_DMA_Init+0x158>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003302:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2b04      	cmp	r3, #4
 800332e:	d107      	bne.n	8003340 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	4313      	orrs	r3, r2
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0307 	bic.w	r3, r3, #7
 8003356:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b04      	cmp	r3, #4
 8003368:	d117      	bne.n	800339a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00e      	beq.n	800339a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fb01 	bl	8003984 <DMA_CheckFifoParam>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2240      	movs	r2, #64	; 0x40
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003396:	2301      	movs	r3, #1
 8003398:	e016      	b.n	80033c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fab8 	bl	8003918 <DMA_CalcBaseAndBitshift>
 80033a8:	4603      	mov	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	223f      	movs	r2, #63	; 0x3f
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	f010803f 	.word	0xf010803f

080033d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_Start_IT+0x26>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e040      	b.n	800347c <HAL_DMA_Start_IT+0xa8>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d12f      	bne.n	800346e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2202      	movs	r2, #2
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa4a 	bl	80038bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0216 	orr.w	r2, r2, #22
 8003442:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e005      	b.n	800347a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003476:	2302      	movs	r3, #2
 8003478:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800347a:	7dfb      	ldrb	r3, [r7, #23]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003492:	f7ff fb4d 	bl	8002b30 <HAL_GetTick>
 8003496:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d008      	beq.n	80034b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e052      	b.n	800355c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0216 	bic.w	r2, r2, #22
 80034c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_DMA_Abort+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0208 	bic.w	r2, r2, #8
 80034f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003506:	e013      	b.n	8003530 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003508:	f7ff fb12 	bl	8002b30 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b05      	cmp	r3, #5
 8003514:	d90c      	bls.n	8003530 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e015      	b.n	800355c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e4      	bne.n	8003508 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	223f      	movs	r2, #63	; 0x3f
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e00c      	b.n	800359c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2205      	movs	r2, #5
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035b4:	4b8e      	ldr	r3, [pc, #568]	; (80037f0 <HAL_DMA_IRQHandler+0x248>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a8e      	ldr	r2, [pc, #568]	; (80037f4 <HAL_DMA_IRQHandler+0x24c>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0a9b      	lsrs	r3, r3, #10
 80035c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	2208      	movs	r2, #8
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01a      	beq.n	8003614 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0204 	bic.w	r2, r2, #4
 80035fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	2208      	movs	r2, #8
 8003602:	409a      	lsls	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	2201      	movs	r2, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2201      	movs	r2, #1
 8003638:	409a      	lsls	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2204      	movs	r2, #4
 8003650:	409a      	lsls	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d012      	beq.n	8003680 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	2204      	movs	r2, #4
 800366e:	409a      	lsls	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2210      	movs	r2, #16
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d043      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03c      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2210      	movs	r2, #16
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d024      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
 80036d6:	e01f      	b.n	8003718 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
 80036e8:	e016      	b.n	8003718 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0208 	bic.w	r2, r2, #8
 8003706:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	2220      	movs	r2, #32
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 808f 	beq.w	8003848 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8087 	beq.w	8003848 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	2220      	movs	r2, #32
 8003740:	409a      	lsls	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b05      	cmp	r3, #5
 8003750:	d136      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0216 	bic.w	r2, r2, #22
 8003760:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003770:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <HAL_DMA_IRQHandler+0x1da>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0208 	bic.w	r2, r2, #8
 8003790:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	223f      	movs	r2, #63	; 0x3f
 8003798:	409a      	lsls	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d07e      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
        }
        return;
 80037be:	e079      	b.n	80038b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d031      	beq.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
 80037ec:	e02c      	b.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
 80037ee:	bf00      	nop
 80037f0:	20000000 	.word	0x20000000
 80037f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e01e      	b.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0210 	bic.w	r2, r2, #16
 8003826:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	2b00      	cmp	r3, #0
 800384e:	d032      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2205      	movs	r2, #5
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3301      	adds	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	429a      	cmp	r2, r3
 800387e:	d307      	bcc.n	8003890 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f2      	bne.n	8003874 <HAL_DMA_IRQHandler+0x2cc>
 800388e:	e000      	b.n	8003892 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003890:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
 80038b2:	e000      	b.n	80038b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038b4:	bf00      	nop
    }
  }
}
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d108      	bne.n	80038fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038fa:	e007      	b.n	800390c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3b10      	subs	r3, #16
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <DMA_CalcBaseAndBitshift+0x64>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003932:	4a13      	ldr	r2, [pc, #76]	; (8003980 <DMA_CalcBaseAndBitshift+0x68>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d909      	bls.n	800395a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	659a      	str	r2, [r3, #88]	; 0x58
 8003958:	e007      	b.n	800396a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	aaaaaaab 	.word	0xaaaaaaab
 8003980:	080071d0 	.word	0x080071d0

08003984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11f      	bne.n	80039de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d856      	bhi.n	8003a52 <DMA_CheckFifoParam+0xce>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <DMA_CheckFifoParam+0x28>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039cf 	.word	0x080039cf
 80039b4:	080039bd 	.word	0x080039bd
 80039b8:	08003a53 	.word	0x08003a53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d046      	beq.n	8003a56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039cc:	e043      	b.n	8003a56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d6:	d140      	bne.n	8003a5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039dc:	e03d      	b.n	8003a5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e6:	d121      	bne.n	8003a2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d837      	bhi.n	8003a5e <DMA_CheckFifoParam+0xda>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <DMA_CheckFifoParam+0x70>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a0b 	.word	0x08003a0b
 80039fc:	08003a05 	.word	0x08003a05
 8003a00:	08003a1d 	.word	0x08003a1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e030      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d025      	beq.n	8003a62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e022      	b.n	8003a62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a24:	d11f      	bne.n	8003a66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a2a:	e01c      	b.n	8003a66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d903      	bls.n	8003a3a <DMA_CheckFifoParam+0xb6>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d003      	beq.n	8003a40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a38:	e018      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3e:	e015      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e00b      	b.n	8003a6a <DMA_CheckFifoParam+0xe6>
      break;
 8003a52:	bf00      	nop
 8003a54:	e00a      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a56:	bf00      	nop
 8003a58:	e008      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e006      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a6a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	e159      	b.n	8003d4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	f040 8148 	bne.w	8003d46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d005      	beq.n	8003ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d130      	bne.n	8003b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2203      	movs	r2, #3
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b04:	2201      	movs	r2, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 0201 	and.w	r2, r3, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d017      	beq.n	8003b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d123      	bne.n	8003bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	08da      	lsrs	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3208      	adds	r2, #8
 8003b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	220f      	movs	r2, #15
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	08da      	lsrs	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3208      	adds	r2, #8
 8003bba:	69b9      	ldr	r1, [r7, #24]
 8003bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0203 	and.w	r2, r3, #3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a2 	beq.w	8003d46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b57      	ldr	r3, [pc, #348]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	4a56      	ldr	r2, [pc, #344]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c10:	6453      	str	r3, [r2, #68]	; 0x44
 8003c12:	4b54      	ldr	r3, [pc, #336]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c1e:	4a52      	ldr	r2, [pc, #328]	; (8003d68 <HAL_GPIO_Init+0x2ec>)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	3302      	adds	r3, #2
 8003c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	220f      	movs	r2, #15
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a49      	ldr	r2, [pc, #292]	; (8003d6c <HAL_GPIO_Init+0x2f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d019      	beq.n	8003c7e <HAL_GPIO_Init+0x202>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a48      	ldr	r2, [pc, #288]	; (8003d70 <HAL_GPIO_Init+0x2f4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0x1fe>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a47      	ldr	r2, [pc, #284]	; (8003d74 <HAL_GPIO_Init+0x2f8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00d      	beq.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <HAL_GPIO_Init+0x2fc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <HAL_GPIO_Init+0x1f6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a45      	ldr	r2, [pc, #276]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_GPIO_Init+0x1f2>
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	e008      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c6e:	2307      	movs	r3, #7
 8003c70:	e006      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c72:	2303      	movs	r3, #3
 8003c74:	e004      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e002      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f002 0203 	and.w	r2, r2, #3
 8003c86:	0092      	lsls	r2, r2, #2
 8003c88:	4093      	lsls	r3, r2
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c90:	4935      	ldr	r1, [pc, #212]	; (8003d68 <HAL_GPIO_Init+0x2ec>)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	3302      	adds	r3, #2
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cec:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b0f      	cmp	r3, #15
 8003d50:	f67f aea2 	bls.w	8003a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	3724      	adds	r7, #36	; 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e001      	b.n	8003da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc4:	787b      	ldrb	r3, [r7, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dd0:	e003      	b.n	8003dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	041a      	lsls	r2, r3, #16
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	619a      	str	r2, [r3, #24]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dfe:	4a05      	ldr	r2, [pc, #20]	; (8003e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f806 	bl	8003e18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40013c00 	.word	0x40013c00

08003e18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e267      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d075      	beq.n	8003f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e4e:	4b88      	ldr	r3, [pc, #544]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b85      	ldr	r3, [pc, #532]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d112      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e66:	4b82      	ldr	r3, [pc, #520]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	4b7e      	ldr	r3, [pc, #504]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d05b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x108>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d157      	bne.n	8003f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e242      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x74>
 8003e96:	4b76      	ldr	r3, [pc, #472]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a75      	ldr	r2, [pc, #468]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x98>
 8003eae:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6f      	ldr	r2, [pc, #444]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b6d      	ldr	r3, [pc, #436]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6c      	ldr	r2, [pc, #432]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	4b69      	ldr	r3, [pc, #420]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fe22 	bl	8002b30 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fe1e 	bl	8002b30 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e207      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xc0>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fe fe0e 	bl	8002b30 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fe fe0a 	bl	8002b30 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1f3      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0xe8>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f46:	4b4a      	ldr	r3, [pc, #296]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1c7      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4937      	ldr	r1, [pc, #220]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	e03a      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	4b34      	ldr	r3, [pc, #208]	; (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fdc3 	bl	8002b30 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fe fdbf 	bl	8002b30 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1a8      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4925      	ldr	r1, [pc, #148]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fda2 	bl	8002b30 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fe fd9e 	bl	8002b30 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e187      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d036      	beq.n	8004088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x248>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe fd82 	bl	8002b30 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004030:	f7fe fd7e 	bl	8002b30 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e167      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x200>
 800404e:	e01b      	b.n	8004088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_OscConfig+0x248>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fe fd6b 	bl	8002b30 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	e00e      	b.n	800407c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405e:	f7fe fd67 	bl	8002b30 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d907      	bls.n	800407c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e150      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 8004070:	40023800 	.word	0x40023800
 8004074:	42470000 	.word	0x42470000
 8004078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8097 	beq.w	80041c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b81      	ldr	r3, [pc, #516]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	4b7d      	ldr	r3, [pc, #500]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a7c      	ldr	r2, [pc, #496]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
 80040b6:	4b7a      	ldr	r3, [pc, #488]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b77      	ldr	r3, [pc, #476]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b74      	ldr	r3, [pc, #464]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a73      	ldr	r2, [pc, #460]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7fe fd27 	bl	8002b30 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fe fd23 	bl	8002b30 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e10c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x2ea>
 800410c:	4b64      	ldr	r3, [pc, #400]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a63      	ldr	r2, [pc, #396]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x30c>
 8004122:	4b5f      	ldr	r3, [pc, #380]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
 800412e:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6713      	str	r3, [r2, #112]	; 0x70
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800413c:	4b58      	ldr	r3, [pc, #352]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a57      	ldr	r2, [pc, #348]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	4b55      	ldr	r3, [pc, #340]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a54      	ldr	r2, [pc, #336]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 0304 	bic.w	r3, r3, #4
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fe fce8 	bl	8002b30 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fe fce4 	bl	8002b30 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0cb      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ee      	beq.n	8004164 <HAL_RCC_OscConfig+0x334>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004188:	f7fe fcd2 	bl	8002b30 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fe fcce 	bl	8002b30 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0b5      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a6:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ee      	bne.n	8004190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4a38      	ldr	r2, [pc, #224]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a1 	beq.w	8004310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ce:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d05c      	beq.n	8004294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d141      	bne.n	8004266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fe fca2 	bl	8002b30 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fe fc9e 	bl	8002b30 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e087      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	491b      	ldr	r1, [pc, #108]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fe fc77 	bl	8002b30 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004246:	f7fe fc73 	bl	8002b30 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e05c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x416>
 8004264:	e054      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fe fc60 	bl	8002b30 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004274:	f7fe fc5c 	bl	8002b30 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e045      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x444>
 8004292:	e03d      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e038      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40007000 	.word	0x40007000
 80042a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <HAL_RCC_OscConfig+0x4ec>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d028      	beq.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d121      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11a      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d111      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	3b01      	subs	r3, #1
 80042f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0cc      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d90c      	bls.n	800435c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b63      	ldr	r3, [pc, #396]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0b8      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d020      	beq.n	80043aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004374:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a58      	ldr	r2, [pc, #352]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800437e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800438c:	4b53      	ldr	r3, [pc, #332]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a52      	ldr	r2, [pc, #328]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b50      	ldr	r3, [pc, #320]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	494d      	ldr	r1, [pc, #308]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d044      	beq.n	8004440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d119      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d003      	beq.n	80043de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b3f      	ldr	r3, [pc, #252]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e06f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b3b      	ldr	r3, [pc, #236]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e067      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b37      	ldr	r3, [pc, #220]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4934      	ldr	r1, [pc, #208]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7fe fb8e 	bl	8002b30 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7fe fb8a 	bl	8002b30 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	; 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d20c      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e032      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	4b19      	ldr	r3, [pc, #100]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4916      	ldr	r1, [pc, #88]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	490e      	ldr	r1, [pc, #56]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044a6:	f000 f821 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 80044aa:	4602      	mov	r2, r0
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	490a      	ldr	r1, [pc, #40]	; (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	5ccb      	ldrb	r3, [r1, r3]
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCC_ClockConfig+0x1c8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe faee 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023c00 	.word	0x40023c00
 80044dc:	40023800 	.word	0x40023800
 80044e0:	080071b8 	.word	0x080071b8
 80044e4:	20000000 	.word	0x20000000
 80044e8:	20000014 	.word	0x20000014

080044ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b090      	sub	sp, #64	; 0x40
 80044f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
 80044f8:	2300      	movs	r3, #0
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fc:	2300      	movs	r3, #0
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b08      	cmp	r3, #8
 800450e:	d00d      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x40>
 8004510:	2b08      	cmp	r3, #8
 8004512:	f200 80a1 	bhi.w	8004658 <HAL_RCC_GetSysClockFreq+0x16c>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 800451a:	2b04      	cmp	r3, #4
 800451c:	d003      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x3a>
 800451e:	e09b      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCC_GetSysClockFreq+0x184>)
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004524:	e09b      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004526:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_GetSysClockFreq+0x188>)
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800452a:	e098      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800452c:	4b4f      	ldr	r3, [pc, #316]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004536:	4b4d      	ldr	r3, [pc, #308]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004542:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	2200      	movs	r2, #0
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	627a      	str	r2, [r7, #36]	; 0x24
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004554:	2100      	movs	r1, #0
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_GetSysClockFreq+0x188>)
 8004558:	fb03 f201 	mul.w	r2, r3, r1
 800455c:	2300      	movs	r3, #0
 800455e:	fb00 f303 	mul.w	r3, r0, r3
 8004562:	4413      	add	r3, r2
 8004564:	4a43      	ldr	r2, [pc, #268]	; (8004674 <HAL_RCC_GetSysClockFreq+0x188>)
 8004566:	fba0 1202 	umull	r1, r2, r0, r2
 800456a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800456c:	460a      	mov	r2, r1
 800456e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004572:	4413      	add	r3, r2
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004578:	2200      	movs	r2, #0
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004586:	f7fc faeb 	bl	8000b60 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4613      	mov	r3, r2
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004592:	e053      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004594:	4b35      	ldr	r3, [pc, #212]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	2200      	movs	r2, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	617a      	str	r2, [r7, #20]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045a6:	f04f 0b00 	mov.w	fp, #0
 80045aa:	4652      	mov	r2, sl
 80045ac:	465b      	mov	r3, fp
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	0159      	lsls	r1, r3, #5
 80045b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045bc:	0150      	lsls	r0, r2, #5
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	ebb2 080a 	subs.w	r8, r2, sl
 80045c6:	eb63 090b 	sbc.w	r9, r3, fp
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045de:	ebb2 0408 	subs.w	r4, r2, r8
 80045e2:	eb63 0509 	sbc.w	r5, r3, r9
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	00eb      	lsls	r3, r5, #3
 80045f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f4:	00e2      	lsls	r2, r4, #3
 80045f6:	4614      	mov	r4, r2
 80045f8:	461d      	mov	r5, r3
 80045fa:	eb14 030a 	adds.w	r3, r4, sl
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	eb45 030b 	adc.w	r3, r5, fp
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004612:	4629      	mov	r1, r5
 8004614:	028b      	lsls	r3, r1, #10
 8004616:	4621      	mov	r1, r4
 8004618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800461c:	4621      	mov	r1, r4
 800461e:	028a      	lsls	r2, r1, #10
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	2200      	movs	r2, #0
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	60fa      	str	r2, [r7, #12]
 800462c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004630:	f7fc fa96 	bl	8000b60 <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4613      	mov	r3, r2
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	3301      	adds	r3, #1
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800464c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004656:	e002      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_GetSysClockFreq+0x184>)
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800465c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004660:	4618      	mov	r0, r3
 8004662:	3740      	adds	r7, #64	; 0x40
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	00f42400 	.word	0x00f42400
 8004674:	017d7840 	.word	0x017d7840

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004694:	f7ff fff0 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0a9b      	lsrs	r3, r3, #10
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4903      	ldr	r1, [pc, #12]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	080071c8 	.word	0x080071c8

080046b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046bc:	f7ff ffdc 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	0b5b      	lsrs	r3, r3, #13
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	4903      	ldr	r1, [pc, #12]	; (80046dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	080071c8 	.word	0x080071c8

080046e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e041      	b.n	8004776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fee4 	bl	80014d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 f950 	bl	80049c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d001      	beq.n	8004798 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e03c      	b.n	8004812 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <HAL_TIM_Base_Start+0xa0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_TIM_Base_Start+0x5c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d013      	beq.n	80047dc <HAL_TIM_Base_Start+0x5c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <HAL_TIM_Base_Start+0xa4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_TIM_Base_Start+0x5c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a19      	ldr	r2, [pc, #100]	; (8004828 <HAL_TIM_Base_Start+0xa8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_TIM_Base_Start+0x5c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a17      	ldr	r2, [pc, #92]	; (800482c <HAL_TIM_Base_Start+0xac>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIM_Base_Start+0x5c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_Base_Start+0xb0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d111      	bne.n	8004800 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b06      	cmp	r3, #6
 80047ec:	d010      	beq.n	8004810 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	e007      	b.n	8004810 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40014000 	.word	0x40014000

08004834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e0b4      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x186>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004888:	d03e      	beq.n	8004908 <HAL_TIM_ConfigClockSource+0xd4>
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	f200 8087 	bhi.w	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	f000 8086 	beq.w	80049a6 <HAL_TIM_ConfigClockSource+0x172>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	d87f      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b70      	cmp	r3, #112	; 0x70
 80048a2:	d01a      	beq.n	80048da <HAL_TIM_ConfigClockSource+0xa6>
 80048a4:	2b70      	cmp	r3, #112	; 0x70
 80048a6:	d87b      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b60      	cmp	r3, #96	; 0x60
 80048aa:	d050      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x11a>
 80048ac:	2b60      	cmp	r3, #96	; 0x60
 80048ae:	d877      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b50      	cmp	r3, #80	; 0x50
 80048b2:	d03c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xfa>
 80048b4:	2b50      	cmp	r3, #80	; 0x50
 80048b6:	d873      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d058      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x13a>
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d86f      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b30      	cmp	r3, #48	; 0x30
 80048c2:	d064      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048c4:	2b30      	cmp	r3, #48	; 0x30
 80048c6:	d86b      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d060      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d867      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d05c      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d05a      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048d8:	e062      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6899      	ldr	r1, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f000 f965 	bl	8004bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	609a      	str	r2, [r3, #8]
      break;
 8004906:	e04f      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6899      	ldr	r1, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f000 f94e 	bl	8004bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800492a:	609a      	str	r2, [r3, #8]
      break;
 800492c:	e03c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	461a      	mov	r2, r3
 800493c:	f000 f8c2 	bl	8004ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2150      	movs	r1, #80	; 0x50
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f91b 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 800494c:	e02c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	461a      	mov	r2, r3
 800495c:	f000 f8e1 	bl	8004b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2160      	movs	r1, #96	; 0x60
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f90b 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 800496c:	e01c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	461a      	mov	r2, r3
 800497c:	f000 f8a2 	bl	8004ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2140      	movs	r1, #64	; 0x40
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f8fb 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 800498c:	e00c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f000 f8f2 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 800499e:	e003      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      break;
 80049a4:	e000      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <TIM_Base_SetConfig+0xe4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00f      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d00b      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a31      	ldr	r2, [pc, #196]	; (8004aac <TIM_Base_SetConfig+0xe8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <TIM_Base_SetConfig+0xec>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <TIM_Base_SetConfig+0xf0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d108      	bne.n	8004a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <TIM_Base_SetConfig+0xe4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01b      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1c:	d017      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a22      	ldr	r2, [pc, #136]	; (8004aac <TIM_Base_SetConfig+0xe8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <TIM_Base_SetConfig+0xec>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00f      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <TIM_Base_SetConfig+0xf0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <TIM_Base_SetConfig+0xf4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <TIM_Base_SetConfig+0xf8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <TIM_Base_SetConfig+0xfc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <TIM_Base_SetConfig+0xe4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d103      	bne.n	8004a94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	615a      	str	r2, [r3, #20]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800

08004ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f023 0201 	bic.w	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f023 030a 	bic.w	r3, r3, #10
 8004b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0210 	bic.w	r2, r3, #16
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	031b      	lsls	r3, r3, #12
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f043 0307 	orr.w	r3, r3, #7
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	021a      	lsls	r2, r3, #8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	609a      	str	r2, [r3, #8]
}
 8004bec:	bf00      	nop
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e050      	b.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1c      	ldr	r2, [pc, #112]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5c:	d013      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a18      	ldr	r2, [pc, #96]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10c      	bne.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40014000 	.word	0x40014000

08004cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e03f      	b.n	8004d66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fc8a 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2224      	movs	r2, #36	; 0x24
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 ffcd 	bl	8005cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	; 0x30
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d165      	bne.n	8004e56 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_UART_Transmit_DMA+0x26>
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e05e      	b.n	8004e58 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_UART_Transmit_DMA+0x38>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e057      	b.n	8004e58 <HAL_UART_Transmit_DMA+0xe8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2221      	movs	r2, #33	; 0x21
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <HAL_UART_Transmit_DMA+0xf0>)
 8004dd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <HAL_UART_Transmit_DMA+0xf4>)
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de4:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <HAL_UART_Transmit_DMA+0xf8>)
 8004de6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	2200      	movs	r2, #0
 8004dee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004df0:	f107 0308 	add.w	r3, r7, #8
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3304      	adds	r3, #4
 8004e04:	461a      	mov	r2, r3
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	f7fe fae4 	bl	80033d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e14:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e40:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6a39      	ldr	r1, [r7, #32]
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3730      	adds	r7, #48	; 0x30
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	08005551 	.word	0x08005551
 8004e64:	080055eb 	.word	0x080055eb
 8004e68:	08005763 	.word	0x08005763

08004e6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d11d      	bne.n	8004ec2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Receive_DMA+0x26>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e016      	b.n	8004ec4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Receive_DMA+0x38>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e00f      	b.n	8004ec4 <HAL_UART_Receive_DMA+0x58>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fc9d 	bl	80057f8 <UART_Start_Receive_DMA>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	e000      	b.n	8004ec4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b090      	sub	sp, #64	; 0x40
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b80      	cmp	r3, #128	; 0x80
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b21      	cmp	r3, #33	; 0x21
 8004ef8:	d128      	bne.n	8004f4c <HAL_UART_DMAStop+0x80>
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d025      	beq.n	8004f4c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f20:	633a      	str	r2, [r7, #48]	; 0x30
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe fa9f 	bl	8003484 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fcf4 	bl	8005934 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b22      	cmp	r3, #34	; 0x22
 8004f6c:	d128      	bne.n	8004fc0 <HAL_UART_DMAStop+0xf4>
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d025      	beq.n	8004fc0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f94:	61fa      	str	r2, [r7, #28]
 8004f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fa65 	bl	8003484 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fce2 	bl	8005984 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3740      	adds	r7, #64	; 0x40
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b0ba      	sub	sp, #232	; 0xe8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800500a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10f      	bne.n	8005032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_UART_IRQHandler+0x66>
 800501e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fd89 	bl	8005b42 <UART_Receive_IT>
      return;
 8005030:	e256      	b.n	80054e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80de 	beq.w	80051f8 <HAL_UART_IRQHandler+0x22c>
 800503c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80d1 	beq.w	80051f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_UART_IRQHandler+0xae>
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_UART_IRQHandler+0xd2>
 8005086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f043 0202 	orr.w	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_UART_IRQHandler+0xf6>
 80050aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f043 0204 	orr.w	r2, r3, #4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d011      	beq.n	80050f2 <HAL_UART_IRQHandler+0x126>
 80050ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0208 	orr.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 81ed 	beq.w	80054d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_UART_IRQHandler+0x14e>
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fd14 	bl	8005b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <HAL_UART_IRQHandler+0x17a>
 800513e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d04f      	beq.n	80051e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fc1c 	bl	8005984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b40      	cmp	r3, #64	; 0x40
 8005158:	d141      	bne.n	80051de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3314      	adds	r3, #20
 8005182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800518a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800519e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1d9      	bne.n	800515a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d013      	beq.n	80051d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	4a7d      	ldr	r2, [pc, #500]	; (80053a8 <HAL_UART_IRQHandler+0x3dc>)
 80051b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe f9d2 	bl	8003564 <HAL_DMA_Abort_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	e00e      	b.n	80051f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f9a4 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	e00a      	b.n	80051f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9a0 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e006      	b.n	80051f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f99c 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051f2:	e170      	b.n	80054d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	bf00      	nop
    return;
 80051f6:	e16e      	b.n	80054d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f040 814a 	bne.w	8005496 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8143 	beq.w	8005496 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 813c 	beq.w	8005496 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	f040 80b4 	bne.w	80053ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8140 	beq.w	80054da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800525e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005262:	429a      	cmp	r2, r3
 8005264:	f080 8139 	bcs.w	80054da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800526e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	f000 8088 	beq.w	800538e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1d9      	bne.n	800527e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3314      	adds	r3, #20
 80052d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e1      	bne.n	80052ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3314      	adds	r3, #20
 8005326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800532a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800532c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e3      	bne.n	8005306 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800535c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535e:	f023 0310 	bic.w	r3, r3, #16
 8005362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	330c      	adds	r3, #12
 800536c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005370:	65ba      	str	r2, [r7, #88]	; 0x58
 8005372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800537e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e3      	bne.n	800534c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe f87b 	bl	8003484 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005396:	b29b      	uxth	r3, r3
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	b29b      	uxth	r3, r3
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8ca 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053a4:	e099      	b.n	80054da <HAL_UART_IRQHandler+0x50e>
 80053a6:	bf00      	nop
 80053a8:	08005a4b 	.word	0x08005a4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 808b 	beq.w	80054de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8086 	beq.w	80054de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053f6:	647a      	str	r2, [r7, #68]	; 0x44
 80053f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	623b      	str	r3, [r7, #32]
   return(result);
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3314      	adds	r3, #20
 800542a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800542e:	633a      	str	r2, [r7, #48]	; 0x30
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0310 	bic.w	r3, r3, #16
 8005466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005474:	61fa      	str	r2, [r7, #28]
 8005476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69b9      	ldr	r1, [r7, #24]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	617b      	str	r3, [r7, #20]
   return(result);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e3      	bne.n	8005450 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f852 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005494:	e023      	b.n	80054de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_UART_IRQHandler+0x4ea>
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fadf 	bl	8005a72 <UART_Transmit_IT>
    return;
 80054b4:	e014      	b.n	80054e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00e      	beq.n	80054e0 <HAL_UART_IRQHandler+0x514>
 80054c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fb1f 	bl	8005b12 <UART_EndTransmit_IT>
    return;
 80054d4:	e004      	b.n	80054e0 <HAL_UART_IRQHandler+0x514>
    return;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <HAL_UART_IRQHandler+0x514>
      return;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <HAL_UART_IRQHandler+0x514>
      return;
 80054de:	bf00      	nop
  }
}
 80054e0:	37e8      	adds	r7, #232	; 0xe8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop

080054e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	; 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d137      	bne.n	80055dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800556c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556e:	2200      	movs	r2, #0
 8005570:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	623b      	str	r3, [r7, #32]
   return(result);
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005588:	63bb      	str	r3, [r7, #56]	; 0x38
 800558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005592:	633a      	str	r2, [r7, #48]	; 0x30
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
 80055be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	617b      	str	r3, [r7, #20]
   return(result);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055da:	e002      	b.n	80055e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80055dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80055de:	f7ff ff83 	bl	80054e8 <HAL_UART_TxCpltCallback>
}
 80055e2:	bf00      	nop
 80055e4:	3740      	adds	r7, #64	; 0x40
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff ff7f 	bl	80054fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b09c      	sub	sp, #112	; 0x70
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d172      	bne.n	8005708 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005624:	2200      	movs	r2, #0
 8005626:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005648:	65ba      	str	r2, [r7, #88]	; 0x58
 800564a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800564e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	667b      	str	r3, [r7, #100]	; 0x64
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800567c:	647a      	str	r2, [r7, #68]	; 0x44
 800567e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800568a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	623b      	str	r3, [r7, #32]
   return(result);
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a6:	663b      	str	r3, [r7, #96]	; 0x60
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b0:	633a      	str	r2, [r7, #48]	; 0x30
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d119      	bne.n	8005708 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0310 	bic.w	r3, r3, #16
 80056ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056f4:	61fa      	str	r2, [r7, #28]
 80056f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69b9      	ldr	r1, [r7, #24]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	617b      	str	r3, [r7, #20]
   return(result);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	d106      	bne.n	800571e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005712:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005714:	4619      	mov	r1, r3
 8005716:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005718:	f7ff ff0e 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800571c:	e002      	b.n	8005724 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800571e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005720:	f7ff fef6 	bl	8005510 <HAL_UART_RxCpltCallback>
}
 8005724:	bf00      	nop
 8005726:	3770      	adds	r7, #112	; 0x70
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	2b01      	cmp	r3, #1
 8005740:	d108      	bne.n	8005754 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff fef3 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005752:	e002      	b.n	800575a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7fb fd87 	bl	8001268 <HAL_UART_RxHalfCpltCallback>
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b21      	cmp	r3, #33	; 0x21
 8005794:	d108      	bne.n	80057a8 <UART_DMAError+0x46>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80057a2:	68b8      	ldr	r0, [r7, #8]
 80057a4:	f000 f8c6 	bl	8005934 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b22      	cmp	r3, #34	; 0x22
 80057c8:	d108      	bne.n	80057dc <UART_DMAError+0x7a>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057d6:	68b8      	ldr	r0, [r7, #8]
 80057d8:	f000 f8d4 	bl	8005984 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	f043 0210 	orr.w	r2, r3, #16
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057e8:	68b8      	ldr	r0, [r7, #8]
 80057ea:	f7ff fe9b 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b098      	sub	sp, #96	; 0x60
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2222      	movs	r2, #34	; 0x22
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	4a40      	ldr	r2, [pc, #256]	; (8005928 <UART_Start_Receive_DMA+0x130>)
 8005826:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	4a3f      	ldr	r2, [pc, #252]	; (800592c <UART_Start_Receive_DMA+0x134>)
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	4a3e      	ldr	r2, [pc, #248]	; (8005930 <UART_Start_Receive_DMA+0x138>)
 8005836:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	2200      	movs	r2, #0
 800583e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005840:	f107 0308 	add.w	r3, r7, #8
 8005844:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	f7fd fdbc 	bl	80033d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d019      	beq.n	80058b6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	65bb      	str	r3, [r7, #88]	; 0x58
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80058a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80058a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80058b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	657b      	str	r3, [r7, #84]	; 0x54
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	617b      	str	r3, [r7, #20]
   return(result);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005900:	653b      	str	r3, [r7, #80]	; 0x50
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800590a:	627a      	str	r2, [r7, #36]	; 0x24
 800590c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6a39      	ldr	r1, [r7, #32]
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	61fb      	str	r3, [r7, #28]
   return(result);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3760      	adds	r7, #96	; 0x60
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08005607 	.word	0x08005607
 800592c:	0800572d 	.word	0x0800572d
 8005930:	08005763 	.word	0x08005763

08005934 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b089      	sub	sp, #36	; 0x24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	60bb      	str	r3, [r7, #8]
   return(result);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	61ba      	str	r2, [r7, #24]
 800595e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6979      	ldr	r1, [r7, #20]
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	613b      	str	r3, [r7, #16]
   return(result);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e5      	bne.n	800593c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005978:	bf00      	nop
 800597a:	3724      	adds	r7, #36	; 0x24
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b095      	sub	sp, #84	; 0x54
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ac:	643a      	str	r2, [r7, #64]	; 0x40
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d119      	bne.n	8005a30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0310 	bic.w	r3, r3, #16
 8005a12:	647b      	str	r3, [r7, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a1c:	61ba      	str	r2, [r7, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a3e:	bf00      	nop
 8005a40:	3754      	adds	r7, #84	; 0x54
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff fd5d 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b21      	cmp	r3, #33	; 0x21
 8005a84:	d13e      	bne.n	8005b04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d114      	bne.n	8005aba <UART_Transmit_IT+0x48>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d110      	bne.n	8005aba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]
 8005ab8:	e008      	b.n	8005acc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6211      	str	r1, [r2, #32]
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10f      	bne.n	8005b00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e000      	b.n	8005b06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
  }
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fcd8 	bl	80054e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08c      	sub	sp, #48	; 0x30
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b22      	cmp	r3, #34	; 0x22
 8005b54:	f040 80ab 	bne.w	8005cae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d117      	bne.n	8005b92 <UART_Receive_IT+0x50>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	1c9a      	adds	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b90:	e026      	b.n	8005be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba4:	d007      	beq.n	8005bb6 <UART_Receive_IT+0x74>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <UART_Receive_IT+0x82>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e008      	b.n	8005bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4619      	mov	r1, r3
 8005bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d15a      	bne.n	8005caa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0220 	bic.w	r2, r2, #32
 8005c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d135      	bne.n	8005ca0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f023 0310 	bic.w	r3, r3, #16
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	623a      	str	r2, [r7, #32]
 8005c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	6a3a      	ldr	r2, [r7, #32]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d10a      	bne.n	8005c92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fc4d 	bl	8005538 <HAL_UARTEx_RxEventCallback>
 8005c9e:	e002      	b.n	8005ca6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fc35 	bl	8005510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e002      	b.n	8005cb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3730      	adds	r7, #48	; 0x30
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cbc:	b0c0      	sub	sp, #256	; 0x100
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	ea40 0301 	orr.w	r3, r0, r1
 8005ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d10:	f021 010c 	bic.w	r1, r1, #12
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	6999      	ldr	r1, [r3, #24]
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	ea40 0301 	orr.w	r3, r0, r1
 8005d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b8f      	ldr	r3, [pc, #572]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d005      	beq.n	8005d58 <UART_SetConfig+0xa0>
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b8d      	ldr	r3, [pc, #564]	; (8005f88 <UART_SetConfig+0x2d0>)
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d104      	bne.n	8005d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7fe fcae 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d60:	e003      	b.n	8005d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7fe fc95 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8005d66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d74:	f040 810c 	bne.w	8005f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d92:	415b      	adcs	r3, r3
 8005d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	eb12 0801 	adds.w	r8, r2, r1
 8005da0:	4629      	mov	r1, r5
 8005da2:	eb43 0901 	adc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dc8:	462b      	mov	r3, r5
 8005dca:	eb49 0303 	adc.w	r3, r9, r3
 8005dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005de6:	460b      	mov	r3, r1
 8005de8:	18db      	adds	r3, r3, r3
 8005dea:	653b      	str	r3, [r7, #80]	; 0x50
 8005dec:	4613      	mov	r3, r2
 8005dee:	eb42 0303 	adc.w	r3, r2, r3
 8005df2:	657b      	str	r3, [r7, #84]	; 0x54
 8005df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005dfc:	f7fa feb0 	bl	8000b60 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005e06:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	011c      	lsls	r4, r3, #4
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e30:	4641      	mov	r1, r8
 8005e32:	eb12 0a01 	adds.w	sl, r2, r1
 8005e36:	4649      	mov	r1, r9
 8005e38:	eb43 0b01 	adc.w	fp, r3, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e50:	4692      	mov	sl, r2
 8005e52:	469b      	mov	fp, r3
 8005e54:	4643      	mov	r3, r8
 8005e56:	eb1a 0303 	adds.w	r3, sl, r3
 8005e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	eb4b 0303 	adc.w	r3, fp, r3
 8005e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	18db      	adds	r3, r3, r3
 8005e80:	643b      	str	r3, [r7, #64]	; 0x40
 8005e82:	4613      	mov	r3, r2
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e92:	f7fa fe65 	bl	8000b60 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	2264      	movs	r2, #100	; 0x64
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	1acb      	subs	r3, r1, r3
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eb2:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ec0:	441c      	add	r4, r3
 8005ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	1891      	adds	r1, r2, r2
 8005eda:	63b9      	str	r1, [r7, #56]	; 0x38
 8005edc:	415b      	adcs	r3, r3
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	1851      	adds	r1, r2, r1
 8005ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8005eea:	4649      	mov	r1, r9
 8005eec:	414b      	adcs	r3, r1
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005efc:	4659      	mov	r1, fp
 8005efe:	00cb      	lsls	r3, r1, #3
 8005f00:	4651      	mov	r1, sl
 8005f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f06:	4651      	mov	r1, sl
 8005f08:	00ca      	lsls	r2, r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4642      	mov	r2, r8
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f18:	464b      	mov	r3, r9
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	eb42 0303 	adc.w	r3, r2, r3
 8005f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f38:	460b      	mov	r3, r1
 8005f3a:	18db      	adds	r3, r3, r3
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3e:	4613      	mov	r3, r2
 8005f40:	eb42 0303 	adc.w	r3, r2, r3
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f4e:	f7fa fe07 	bl	8000b60 <__aeabi_uldivmod>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005f58:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	2164      	movs	r1, #100	; 0x64
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	3332      	adds	r3, #50	; 0x32
 8005f6a:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	f003 0207 	and.w	r2, r3, #7
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4422      	add	r2, r4
 8005f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f80:	e106      	b.n	8006190 <UART_SetConfig+0x4d8>
 8005f82:	bf00      	nop
 8005f84:	40011000 	.word	0x40011000
 8005f88:	40011400 	.word	0x40011400
 8005f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	1891      	adds	r1, r2, r2
 8005fa8:	6239      	str	r1, [r7, #32]
 8005faa:	415b      	adcs	r3, r3
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
 8005fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	1854      	adds	r4, r2, r1
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	eb43 0501 	adc.w	r5, r3, r1
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	00eb      	lsls	r3, r5, #3
 8005fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fca:	00e2      	lsls	r2, r4, #3
 8005fcc:	4614      	mov	r4, r2
 8005fce:	461d      	mov	r5, r3
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	18e3      	adds	r3, r4, r3
 8005fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fd8:	464b      	mov	r3, r9
 8005fda:	eb45 0303 	adc.w	r3, r5, r3
 8005fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ffe:	4629      	mov	r1, r5
 8006000:	008b      	lsls	r3, r1, #2
 8006002:	4621      	mov	r1, r4
 8006004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006008:	4621      	mov	r1, r4
 800600a:	008a      	lsls	r2, r1, #2
 800600c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006010:	f7fa fda6 	bl	8000b60 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4b60      	ldr	r3, [pc, #384]	; (800619c <UART_SetConfig+0x4e4>)
 800601a:	fba3 2302 	umull	r2, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	011c      	lsls	r4, r3, #4
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800602c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	61b9      	str	r1, [r7, #24]
 800603c:	415b      	adcs	r3, r3
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006044:	4641      	mov	r1, r8
 8006046:	1851      	adds	r1, r2, r1
 8006048:	6139      	str	r1, [r7, #16]
 800604a:	4649      	mov	r1, r9
 800604c:	414b      	adcs	r3, r1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800605c:	4659      	mov	r1, fp
 800605e:	00cb      	lsls	r3, r1, #3
 8006060:	4651      	mov	r1, sl
 8006062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006066:	4651      	mov	r1, sl
 8006068:	00ca      	lsls	r2, r1, #3
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	4603      	mov	r3, r0
 8006070:	4642      	mov	r2, r8
 8006072:	189b      	adds	r3, r3, r2
 8006074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006078:	464b      	mov	r3, r9
 800607a:	460a      	mov	r2, r1
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	67bb      	str	r3, [r7, #120]	; 0x78
 800608e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800609c:	4649      	mov	r1, r9
 800609e:	008b      	lsls	r3, r1, #2
 80060a0:	4641      	mov	r1, r8
 80060a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060a6:	4641      	mov	r1, r8
 80060a8:	008a      	lsls	r2, r1, #2
 80060aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060ae:	f7fa fd57 	bl	8000b60 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	4b38      	ldr	r3, [pc, #224]	; (800619c <UART_SetConfig+0x4e4>)
 80060ba:	fba3 2301 	umull	r2, r3, r3, r1
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	2264      	movs	r2, #100	; 0x64
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	1acb      	subs	r3, r1, r3
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	3332      	adds	r3, #50	; 0x32
 80060cc:	4a33      	ldr	r2, [pc, #204]	; (800619c <UART_SetConfig+0x4e4>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d8:	441c      	add	r4, r3
 80060da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060de:	2200      	movs	r2, #0
 80060e0:	673b      	str	r3, [r7, #112]	; 0x70
 80060e2:	677a      	str	r2, [r7, #116]	; 0x74
 80060e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	415b      	adcs	r3, r3
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f8:	4641      	mov	r1, r8
 80060fa:	1851      	adds	r1, r2, r1
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	4649      	mov	r1, r9
 8006100:	414b      	adcs	r3, r1
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006110:	4659      	mov	r1, fp
 8006112:	00cb      	lsls	r3, r1, #3
 8006114:	4651      	mov	r1, sl
 8006116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611a:	4651      	mov	r1, sl
 800611c:	00ca      	lsls	r2, r1, #3
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	4603      	mov	r3, r0
 8006124:	4642      	mov	r2, r8
 8006126:	189b      	adds	r3, r3, r2
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
 800612a:	464b      	mov	r3, r9
 800612c:	460a      	mov	r2, r1
 800612e:	eb42 0303 	adc.w	r3, r2, r3
 8006132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	663b      	str	r3, [r7, #96]	; 0x60
 800613e:	667a      	str	r2, [r7, #100]	; 0x64
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800614c:	4649      	mov	r1, r9
 800614e:	008b      	lsls	r3, r1, #2
 8006150:	4641      	mov	r1, r8
 8006152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006156:	4641      	mov	r1, r8
 8006158:	008a      	lsls	r2, r1, #2
 800615a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800615e:	f7fa fcff 	bl	8000b60 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <UART_SetConfig+0x4e4>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	; 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	3332      	adds	r3, #50	; 0x32
 800617a:	4a08      	ldr	r2, [pc, #32]	; (800619c <UART_SetConfig+0x4e4>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 020f 	and.w	r2, r3, #15
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4422      	add	r2, r4
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006196:	46bd      	mov	sp, r7
 8006198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619c:	51eb851f 	.word	0x51eb851f

080061a0 <atoi>:
 80061a0:	220a      	movs	r2, #10
 80061a2:	2100      	movs	r1, #0
 80061a4:	f000 b882 	b.w	80062ac <strtol>

080061a8 <_strtol_l.constprop.0>:
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ae:	d001      	beq.n	80061b4 <_strtol_l.constprop.0+0xc>
 80061b0:	2b24      	cmp	r3, #36	; 0x24
 80061b2:	d906      	bls.n	80061c2 <_strtol_l.constprop.0+0x1a>
 80061b4:	f000 f88c 	bl	80062d0 <__errno>
 80061b8:	2316      	movs	r3, #22
 80061ba:	6003      	str	r3, [r0, #0]
 80061bc:	2000      	movs	r0, #0
 80061be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80062a8 <_strtol_l.constprop.0+0x100>
 80061c6:	460d      	mov	r5, r1
 80061c8:	462e      	mov	r6, r5
 80061ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061ce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80061d2:	f017 0708 	ands.w	r7, r7, #8
 80061d6:	d1f7      	bne.n	80061c8 <_strtol_l.constprop.0+0x20>
 80061d8:	2c2d      	cmp	r4, #45	; 0x2d
 80061da:	d132      	bne.n	8006242 <_strtol_l.constprop.0+0x9a>
 80061dc:	782c      	ldrb	r4, [r5, #0]
 80061de:	2701      	movs	r7, #1
 80061e0:	1cb5      	adds	r5, r6, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d05b      	beq.n	800629e <_strtol_l.constprop.0+0xf6>
 80061e6:	2b10      	cmp	r3, #16
 80061e8:	d109      	bne.n	80061fe <_strtol_l.constprop.0+0x56>
 80061ea:	2c30      	cmp	r4, #48	; 0x30
 80061ec:	d107      	bne.n	80061fe <_strtol_l.constprop.0+0x56>
 80061ee:	782c      	ldrb	r4, [r5, #0]
 80061f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061f4:	2c58      	cmp	r4, #88	; 0x58
 80061f6:	d14d      	bne.n	8006294 <_strtol_l.constprop.0+0xec>
 80061f8:	786c      	ldrb	r4, [r5, #1]
 80061fa:	2310      	movs	r3, #16
 80061fc:	3502      	adds	r5, #2
 80061fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006202:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006206:	f04f 0e00 	mov.w	lr, #0
 800620a:	fbb8 f9f3 	udiv	r9, r8, r3
 800620e:	4676      	mov	r6, lr
 8006210:	fb03 8a19 	mls	sl, r3, r9, r8
 8006214:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006218:	f1bc 0f09 	cmp.w	ip, #9
 800621c:	d816      	bhi.n	800624c <_strtol_l.constprop.0+0xa4>
 800621e:	4664      	mov	r4, ip
 8006220:	42a3      	cmp	r3, r4
 8006222:	dd24      	ble.n	800626e <_strtol_l.constprop.0+0xc6>
 8006224:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006228:	d008      	beq.n	800623c <_strtol_l.constprop.0+0x94>
 800622a:	45b1      	cmp	r9, r6
 800622c:	d31c      	bcc.n	8006268 <_strtol_l.constprop.0+0xc0>
 800622e:	d101      	bne.n	8006234 <_strtol_l.constprop.0+0x8c>
 8006230:	45a2      	cmp	sl, r4
 8006232:	db19      	blt.n	8006268 <_strtol_l.constprop.0+0xc0>
 8006234:	fb06 4603 	mla	r6, r6, r3, r4
 8006238:	f04f 0e01 	mov.w	lr, #1
 800623c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006240:	e7e8      	b.n	8006214 <_strtol_l.constprop.0+0x6c>
 8006242:	2c2b      	cmp	r4, #43	; 0x2b
 8006244:	bf04      	itt	eq
 8006246:	782c      	ldrbeq	r4, [r5, #0]
 8006248:	1cb5      	addeq	r5, r6, #2
 800624a:	e7ca      	b.n	80061e2 <_strtol_l.constprop.0+0x3a>
 800624c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006250:	f1bc 0f19 	cmp.w	ip, #25
 8006254:	d801      	bhi.n	800625a <_strtol_l.constprop.0+0xb2>
 8006256:	3c37      	subs	r4, #55	; 0x37
 8006258:	e7e2      	b.n	8006220 <_strtol_l.constprop.0+0x78>
 800625a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800625e:	f1bc 0f19 	cmp.w	ip, #25
 8006262:	d804      	bhi.n	800626e <_strtol_l.constprop.0+0xc6>
 8006264:	3c57      	subs	r4, #87	; 0x57
 8006266:	e7db      	b.n	8006220 <_strtol_l.constprop.0+0x78>
 8006268:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800626c:	e7e6      	b.n	800623c <_strtol_l.constprop.0+0x94>
 800626e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006272:	d105      	bne.n	8006280 <_strtol_l.constprop.0+0xd8>
 8006274:	2322      	movs	r3, #34	; 0x22
 8006276:	6003      	str	r3, [r0, #0]
 8006278:	4646      	mov	r6, r8
 800627a:	b942      	cbnz	r2, 800628e <_strtol_l.constprop.0+0xe6>
 800627c:	4630      	mov	r0, r6
 800627e:	e79e      	b.n	80061be <_strtol_l.constprop.0+0x16>
 8006280:	b107      	cbz	r7, 8006284 <_strtol_l.constprop.0+0xdc>
 8006282:	4276      	negs	r6, r6
 8006284:	2a00      	cmp	r2, #0
 8006286:	d0f9      	beq.n	800627c <_strtol_l.constprop.0+0xd4>
 8006288:	f1be 0f00 	cmp.w	lr, #0
 800628c:	d000      	beq.n	8006290 <_strtol_l.constprop.0+0xe8>
 800628e:	1e69      	subs	r1, r5, #1
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	e7f3      	b.n	800627c <_strtol_l.constprop.0+0xd4>
 8006294:	2430      	movs	r4, #48	; 0x30
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1b1      	bne.n	80061fe <_strtol_l.constprop.0+0x56>
 800629a:	2308      	movs	r3, #8
 800629c:	e7af      	b.n	80061fe <_strtol_l.constprop.0+0x56>
 800629e:	2c30      	cmp	r4, #48	; 0x30
 80062a0:	d0a5      	beq.n	80061ee <_strtol_l.constprop.0+0x46>
 80062a2:	230a      	movs	r3, #10
 80062a4:	e7ab      	b.n	80061fe <_strtol_l.constprop.0+0x56>
 80062a6:	bf00      	nop
 80062a8:	080071d9 	.word	0x080071d9

080062ac <strtol>:
 80062ac:	4613      	mov	r3, r2
 80062ae:	460a      	mov	r2, r1
 80062b0:	4601      	mov	r1, r0
 80062b2:	4802      	ldr	r0, [pc, #8]	; (80062bc <strtol+0x10>)
 80062b4:	6800      	ldr	r0, [r0, #0]
 80062b6:	f7ff bf77 	b.w	80061a8 <_strtol_l.constprop.0>
 80062ba:	bf00      	nop
 80062bc:	20000068 	.word	0x20000068

080062c0 <memset>:
 80062c0:	4402      	add	r2, r0
 80062c2:	4603      	mov	r3, r0
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d100      	bne.n	80062ca <memset+0xa>
 80062c8:	4770      	bx	lr
 80062ca:	f803 1b01 	strb.w	r1, [r3], #1
 80062ce:	e7f9      	b.n	80062c4 <memset+0x4>

080062d0 <__errno>:
 80062d0:	4b01      	ldr	r3, [pc, #4]	; (80062d8 <__errno+0x8>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000068 	.word	0x20000068

080062dc <__libc_init_array>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4d0d      	ldr	r5, [pc, #52]	; (8006314 <__libc_init_array+0x38>)
 80062e0:	4c0d      	ldr	r4, [pc, #52]	; (8006318 <__libc_init_array+0x3c>)
 80062e2:	1b64      	subs	r4, r4, r5
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	2600      	movs	r6, #0
 80062e8:	42a6      	cmp	r6, r4
 80062ea:	d109      	bne.n	8006300 <__libc_init_array+0x24>
 80062ec:	4d0b      	ldr	r5, [pc, #44]	; (800631c <__libc_init_array+0x40>)
 80062ee:	4c0c      	ldr	r4, [pc, #48]	; (8006320 <__libc_init_array+0x44>)
 80062f0:	f000 ff52 	bl	8007198 <_init>
 80062f4:	1b64      	subs	r4, r4, r5
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	2600      	movs	r6, #0
 80062fa:	42a6      	cmp	r6, r4
 80062fc:	d105      	bne.n	800630a <__libc_init_array+0x2e>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	f855 3b04 	ldr.w	r3, [r5], #4
 8006304:	4798      	blx	r3
 8006306:	3601      	adds	r6, #1
 8006308:	e7ee      	b.n	80062e8 <__libc_init_array+0xc>
 800630a:	f855 3b04 	ldr.w	r3, [r5], #4
 800630e:	4798      	blx	r3
 8006310:	3601      	adds	r6, #1
 8006312:	e7f2      	b.n	80062fa <__libc_init_array+0x1e>
 8006314:	08007318 	.word	0x08007318
 8006318:	08007318 	.word	0x08007318
 800631c:	08007318 	.word	0x08007318
 8006320:	0800731c 	.word	0x0800731c

08006324 <pow>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	ed2d 8b02 	vpush	{d8}
 800632a:	eeb0 8a40 	vmov.f32	s16, s0
 800632e:	eef0 8a60 	vmov.f32	s17, s1
 8006332:	ec55 4b11 	vmov	r4, r5, d1
 8006336:	f000 f873 	bl	8006420 <__ieee754_pow>
 800633a:	4622      	mov	r2, r4
 800633c:	462b      	mov	r3, r5
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	ec57 6b10 	vmov	r6, r7, d0
 8006346:	f7fa fba5 	bl	8000a94 <__aeabi_dcmpun>
 800634a:	2800      	cmp	r0, #0
 800634c:	d13b      	bne.n	80063c6 <pow+0xa2>
 800634e:	ec51 0b18 	vmov	r0, r1, d8
 8006352:	2200      	movs	r2, #0
 8006354:	2300      	movs	r3, #0
 8006356:	f7fa fb6b 	bl	8000a30 <__aeabi_dcmpeq>
 800635a:	b1b8      	cbz	r0, 800638c <pow+0x68>
 800635c:	2200      	movs	r2, #0
 800635e:	2300      	movs	r3, #0
 8006360:	4620      	mov	r0, r4
 8006362:	4629      	mov	r1, r5
 8006364:	f7fa fb64 	bl	8000a30 <__aeabi_dcmpeq>
 8006368:	2800      	cmp	r0, #0
 800636a:	d146      	bne.n	80063fa <pow+0xd6>
 800636c:	ec45 4b10 	vmov	d0, r4, r5
 8006370:	f000 f848 	bl	8006404 <finite>
 8006374:	b338      	cbz	r0, 80063c6 <pow+0xa2>
 8006376:	2200      	movs	r2, #0
 8006378:	2300      	movs	r3, #0
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	f7fa fb61 	bl	8000a44 <__aeabi_dcmplt>
 8006382:	b300      	cbz	r0, 80063c6 <pow+0xa2>
 8006384:	f7ff ffa4 	bl	80062d0 <__errno>
 8006388:	2322      	movs	r3, #34	; 0x22
 800638a:	e01b      	b.n	80063c4 <pow+0xa0>
 800638c:	ec47 6b10 	vmov	d0, r6, r7
 8006390:	f000 f838 	bl	8006404 <finite>
 8006394:	b9e0      	cbnz	r0, 80063d0 <pow+0xac>
 8006396:	eeb0 0a48 	vmov.f32	s0, s16
 800639a:	eef0 0a68 	vmov.f32	s1, s17
 800639e:	f000 f831 	bl	8006404 <finite>
 80063a2:	b1a8      	cbz	r0, 80063d0 <pow+0xac>
 80063a4:	ec45 4b10 	vmov	d0, r4, r5
 80063a8:	f000 f82c 	bl	8006404 <finite>
 80063ac:	b180      	cbz	r0, 80063d0 <pow+0xac>
 80063ae:	4632      	mov	r2, r6
 80063b0:	463b      	mov	r3, r7
 80063b2:	4630      	mov	r0, r6
 80063b4:	4639      	mov	r1, r7
 80063b6:	f7fa fb6d 	bl	8000a94 <__aeabi_dcmpun>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0e2      	beq.n	8006384 <pow+0x60>
 80063be:	f7ff ff87 	bl	80062d0 <__errno>
 80063c2:	2321      	movs	r3, #33	; 0x21
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	ecbd 8b02 	vpop	{d8}
 80063ca:	ec47 6b10 	vmov	d0, r6, r7
 80063ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	4630      	mov	r0, r6
 80063d6:	4639      	mov	r1, r7
 80063d8:	f7fa fb2a 	bl	8000a30 <__aeabi_dcmpeq>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0f2      	beq.n	80063c6 <pow+0xa2>
 80063e0:	eeb0 0a48 	vmov.f32	s0, s16
 80063e4:	eef0 0a68 	vmov.f32	s1, s17
 80063e8:	f000 f80c 	bl	8006404 <finite>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d0ea      	beq.n	80063c6 <pow+0xa2>
 80063f0:	ec45 4b10 	vmov	d0, r4, r5
 80063f4:	f000 f806 	bl	8006404 <finite>
 80063f8:	e7c3      	b.n	8006382 <pow+0x5e>
 80063fa:	4f01      	ldr	r7, [pc, #4]	; (8006400 <pow+0xdc>)
 80063fc:	2600      	movs	r6, #0
 80063fe:	e7e2      	b.n	80063c6 <pow+0xa2>
 8006400:	3ff00000 	.word	0x3ff00000

08006404 <finite>:
 8006404:	b082      	sub	sp, #8
 8006406:	ed8d 0b00 	vstr	d0, [sp]
 800640a:	9801      	ldr	r0, [sp, #4]
 800640c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006410:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006414:	0fc0      	lsrs	r0, r0, #31
 8006416:	b002      	add	sp, #8
 8006418:	4770      	bx	lr
 800641a:	0000      	movs	r0, r0
 800641c:	0000      	movs	r0, r0
	...

08006420 <__ieee754_pow>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	ed2d 8b06 	vpush	{d8-d10}
 8006428:	b089      	sub	sp, #36	; 0x24
 800642a:	ed8d 1b00 	vstr	d1, [sp]
 800642e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006432:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006436:	ea58 0102 	orrs.w	r1, r8, r2
 800643a:	ec57 6b10 	vmov	r6, r7, d0
 800643e:	d115      	bne.n	800646c <__ieee754_pow+0x4c>
 8006440:	19b3      	adds	r3, r6, r6
 8006442:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006446:	4152      	adcs	r2, r2
 8006448:	4299      	cmp	r1, r3
 800644a:	4b89      	ldr	r3, [pc, #548]	; (8006670 <__ieee754_pow+0x250>)
 800644c:	4193      	sbcs	r3, r2
 800644e:	f080 84d1 	bcs.w	8006df4 <__ieee754_pow+0x9d4>
 8006452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006456:	4630      	mov	r0, r6
 8006458:	4639      	mov	r1, r7
 800645a:	f7f9 fecb 	bl	80001f4 <__adddf3>
 800645e:	ec41 0b10 	vmov	d0, r0, r1
 8006462:	b009      	add	sp, #36	; 0x24
 8006464:	ecbd 8b06 	vpop	{d8-d10}
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646c:	4b81      	ldr	r3, [pc, #516]	; (8006674 <__ieee754_pow+0x254>)
 800646e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006472:	429c      	cmp	r4, r3
 8006474:	ee10 aa10 	vmov	sl, s0
 8006478:	463d      	mov	r5, r7
 800647a:	dc06      	bgt.n	800648a <__ieee754_pow+0x6a>
 800647c:	d101      	bne.n	8006482 <__ieee754_pow+0x62>
 800647e:	2e00      	cmp	r6, #0
 8006480:	d1e7      	bne.n	8006452 <__ieee754_pow+0x32>
 8006482:	4598      	cmp	r8, r3
 8006484:	dc01      	bgt.n	800648a <__ieee754_pow+0x6a>
 8006486:	d10f      	bne.n	80064a8 <__ieee754_pow+0x88>
 8006488:	b172      	cbz	r2, 80064a8 <__ieee754_pow+0x88>
 800648a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800648e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006492:	ea55 050a 	orrs.w	r5, r5, sl
 8006496:	d1dc      	bne.n	8006452 <__ieee754_pow+0x32>
 8006498:	e9dd 3200 	ldrd	r3, r2, [sp]
 800649c:	18db      	adds	r3, r3, r3
 800649e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80064a2:	4152      	adcs	r2, r2
 80064a4:	429d      	cmp	r5, r3
 80064a6:	e7d0      	b.n	800644a <__ieee754_pow+0x2a>
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	da3b      	bge.n	8006524 <__ieee754_pow+0x104>
 80064ac:	4b72      	ldr	r3, [pc, #456]	; (8006678 <__ieee754_pow+0x258>)
 80064ae:	4598      	cmp	r8, r3
 80064b0:	dc51      	bgt.n	8006556 <__ieee754_pow+0x136>
 80064b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80064b6:	4598      	cmp	r8, r3
 80064b8:	f340 84ab 	ble.w	8006e12 <__ieee754_pow+0x9f2>
 80064bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80064c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80064c4:	2b14      	cmp	r3, #20
 80064c6:	dd0f      	ble.n	80064e8 <__ieee754_pow+0xc8>
 80064c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80064cc:	fa22 f103 	lsr.w	r1, r2, r3
 80064d0:	fa01 f303 	lsl.w	r3, r1, r3
 80064d4:	4293      	cmp	r3, r2
 80064d6:	f040 849c 	bne.w	8006e12 <__ieee754_pow+0x9f2>
 80064da:	f001 0101 	and.w	r1, r1, #1
 80064de:	f1c1 0302 	rsb	r3, r1, #2
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	b182      	cbz	r2, 8006508 <__ieee754_pow+0xe8>
 80064e6:	e05f      	b.n	80065a8 <__ieee754_pow+0x188>
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	d15b      	bne.n	80065a4 <__ieee754_pow+0x184>
 80064ec:	f1c3 0314 	rsb	r3, r3, #20
 80064f0:	fa48 f103 	asr.w	r1, r8, r3
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	4543      	cmp	r3, r8
 80064fa:	f040 8487 	bne.w	8006e0c <__ieee754_pow+0x9ec>
 80064fe:	f001 0101 	and.w	r1, r1, #1
 8006502:	f1c1 0302 	rsb	r3, r1, #2
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	4b5c      	ldr	r3, [pc, #368]	; (800667c <__ieee754_pow+0x25c>)
 800650a:	4598      	cmp	r8, r3
 800650c:	d132      	bne.n	8006574 <__ieee754_pow+0x154>
 800650e:	f1b9 0f00 	cmp.w	r9, #0
 8006512:	f280 8477 	bge.w	8006e04 <__ieee754_pow+0x9e4>
 8006516:	4959      	ldr	r1, [pc, #356]	; (800667c <__ieee754_pow+0x25c>)
 8006518:	4632      	mov	r2, r6
 800651a:	463b      	mov	r3, r7
 800651c:	2000      	movs	r0, #0
 800651e:	f7fa f949 	bl	80007b4 <__aeabi_ddiv>
 8006522:	e79c      	b.n	800645e <__ieee754_pow+0x3e>
 8006524:	2300      	movs	r3, #0
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	2a00      	cmp	r2, #0
 800652a:	d13d      	bne.n	80065a8 <__ieee754_pow+0x188>
 800652c:	4b51      	ldr	r3, [pc, #324]	; (8006674 <__ieee754_pow+0x254>)
 800652e:	4598      	cmp	r8, r3
 8006530:	d1ea      	bne.n	8006508 <__ieee754_pow+0xe8>
 8006532:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006536:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800653a:	ea53 030a 	orrs.w	r3, r3, sl
 800653e:	f000 8459 	beq.w	8006df4 <__ieee754_pow+0x9d4>
 8006542:	4b4f      	ldr	r3, [pc, #316]	; (8006680 <__ieee754_pow+0x260>)
 8006544:	429c      	cmp	r4, r3
 8006546:	dd08      	ble.n	800655a <__ieee754_pow+0x13a>
 8006548:	f1b9 0f00 	cmp.w	r9, #0
 800654c:	f2c0 8456 	blt.w	8006dfc <__ieee754_pow+0x9dc>
 8006550:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006554:	e783      	b.n	800645e <__ieee754_pow+0x3e>
 8006556:	2302      	movs	r3, #2
 8006558:	e7e5      	b.n	8006526 <__ieee754_pow+0x106>
 800655a:	f1b9 0f00 	cmp.w	r9, #0
 800655e:	f04f 0000 	mov.w	r0, #0
 8006562:	f04f 0100 	mov.w	r1, #0
 8006566:	f6bf af7a 	bge.w	800645e <__ieee754_pow+0x3e>
 800656a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800656e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006572:	e774      	b.n	800645e <__ieee754_pow+0x3e>
 8006574:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006578:	d106      	bne.n	8006588 <__ieee754_pow+0x168>
 800657a:	4632      	mov	r2, r6
 800657c:	463b      	mov	r3, r7
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	f7f9 ffed 	bl	8000560 <__aeabi_dmul>
 8006586:	e76a      	b.n	800645e <__ieee754_pow+0x3e>
 8006588:	4b3e      	ldr	r3, [pc, #248]	; (8006684 <__ieee754_pow+0x264>)
 800658a:	4599      	cmp	r9, r3
 800658c:	d10c      	bne.n	80065a8 <__ieee754_pow+0x188>
 800658e:	2d00      	cmp	r5, #0
 8006590:	db0a      	blt.n	80065a8 <__ieee754_pow+0x188>
 8006592:	ec47 6b10 	vmov	d0, r6, r7
 8006596:	b009      	add	sp, #36	; 0x24
 8006598:	ecbd 8b06 	vpop	{d8-d10}
 800659c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	f000 bd20 	b.w	8006fe4 <__ieee754_sqrt>
 80065a4:	2300      	movs	r3, #0
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	ec47 6b10 	vmov	d0, r6, r7
 80065ac:	f000 fc62 	bl	8006e74 <fabs>
 80065b0:	ec51 0b10 	vmov	r0, r1, d0
 80065b4:	f1ba 0f00 	cmp.w	sl, #0
 80065b8:	d129      	bne.n	800660e <__ieee754_pow+0x1ee>
 80065ba:	b124      	cbz	r4, 80065c6 <__ieee754_pow+0x1a6>
 80065bc:	4b2f      	ldr	r3, [pc, #188]	; (800667c <__ieee754_pow+0x25c>)
 80065be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d123      	bne.n	800660e <__ieee754_pow+0x1ee>
 80065c6:	f1b9 0f00 	cmp.w	r9, #0
 80065ca:	da05      	bge.n	80065d8 <__ieee754_pow+0x1b8>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	2000      	movs	r0, #0
 80065d2:	492a      	ldr	r1, [pc, #168]	; (800667c <__ieee754_pow+0x25c>)
 80065d4:	f7fa f8ee 	bl	80007b4 <__aeabi_ddiv>
 80065d8:	2d00      	cmp	r5, #0
 80065da:	f6bf af40 	bge.w	800645e <__ieee754_pow+0x3e>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065e8:	431c      	orrs	r4, r3
 80065ea:	d108      	bne.n	80065fe <__ieee754_pow+0x1de>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4610      	mov	r0, r2
 80065f2:	4619      	mov	r1, r3
 80065f4:	f7f9 fdfc 	bl	80001f0 <__aeabi_dsub>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	e78f      	b.n	800651e <__ieee754_pow+0xfe>
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	2b01      	cmp	r3, #1
 8006602:	f47f af2c 	bne.w	800645e <__ieee754_pow+0x3e>
 8006606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800660a:	4619      	mov	r1, r3
 800660c:	e727      	b.n	800645e <__ieee754_pow+0x3e>
 800660e:	0feb      	lsrs	r3, r5, #31
 8006610:	3b01      	subs	r3, #1
 8006612:	9306      	str	r3, [sp, #24]
 8006614:	9a06      	ldr	r2, [sp, #24]
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	d102      	bne.n	8006622 <__ieee754_pow+0x202>
 800661c:	4632      	mov	r2, r6
 800661e:	463b      	mov	r3, r7
 8006620:	e7e6      	b.n	80065f0 <__ieee754_pow+0x1d0>
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <__ieee754_pow+0x268>)
 8006624:	4598      	cmp	r8, r3
 8006626:	f340 80fb 	ble.w	8006820 <__ieee754_pow+0x400>
 800662a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800662e:	4598      	cmp	r8, r3
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <__ieee754_pow+0x260>)
 8006632:	dd0c      	ble.n	800664e <__ieee754_pow+0x22e>
 8006634:	429c      	cmp	r4, r3
 8006636:	dc0f      	bgt.n	8006658 <__ieee754_pow+0x238>
 8006638:	f1b9 0f00 	cmp.w	r9, #0
 800663c:	da0f      	bge.n	800665e <__ieee754_pow+0x23e>
 800663e:	2000      	movs	r0, #0
 8006640:	b009      	add	sp, #36	; 0x24
 8006642:	ecbd 8b06 	vpop	{d8-d10}
 8006646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	f000 bcc2 	b.w	8006fd2 <__math_oflow>
 800664e:	429c      	cmp	r4, r3
 8006650:	dbf2      	blt.n	8006638 <__ieee754_pow+0x218>
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <__ieee754_pow+0x25c>)
 8006654:	429c      	cmp	r4, r3
 8006656:	dd19      	ble.n	800668c <__ieee754_pow+0x26c>
 8006658:	f1b9 0f00 	cmp.w	r9, #0
 800665c:	dcef      	bgt.n	800663e <__ieee754_pow+0x21e>
 800665e:	2000      	movs	r0, #0
 8006660:	b009      	add	sp, #36	; 0x24
 8006662:	ecbd 8b06 	vpop	{d8-d10}
 8006666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	f000 bca9 	b.w	8006fc0 <__math_uflow>
 800666e:	bf00      	nop
 8006670:	fff00000 	.word	0xfff00000
 8006674:	7ff00000 	.word	0x7ff00000
 8006678:	433fffff 	.word	0x433fffff
 800667c:	3ff00000 	.word	0x3ff00000
 8006680:	3fefffff 	.word	0x3fefffff
 8006684:	3fe00000 	.word	0x3fe00000
 8006688:	41e00000 	.word	0x41e00000
 800668c:	4b60      	ldr	r3, [pc, #384]	; (8006810 <__ieee754_pow+0x3f0>)
 800668e:	2200      	movs	r2, #0
 8006690:	f7f9 fdae 	bl	80001f0 <__aeabi_dsub>
 8006694:	a354      	add	r3, pc, #336	; (adr r3, 80067e8 <__ieee754_pow+0x3c8>)
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	4604      	mov	r4, r0
 800669c:	460d      	mov	r5, r1
 800669e:	f7f9 ff5f 	bl	8000560 <__aeabi_dmul>
 80066a2:	a353      	add	r3, pc, #332	; (adr r3, 80067f0 <__ieee754_pow+0x3d0>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	4606      	mov	r6, r0
 80066aa:	460f      	mov	r7, r1
 80066ac:	4620      	mov	r0, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	f7f9 ff56 	bl	8000560 <__aeabi_dmul>
 80066b4:	4b57      	ldr	r3, [pc, #348]	; (8006814 <__ieee754_pow+0x3f4>)
 80066b6:	4682      	mov	sl, r0
 80066b8:	468b      	mov	fp, r1
 80066ba:	2200      	movs	r2, #0
 80066bc:	4620      	mov	r0, r4
 80066be:	4629      	mov	r1, r5
 80066c0:	f7f9 ff4e 	bl	8000560 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	a14b      	add	r1, pc, #300	; (adr r1, 80067f8 <__ieee754_pow+0x3d8>)
 80066ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ce:	f7f9 fd8f 	bl	80001f0 <__aeabi_dsub>
 80066d2:	4622      	mov	r2, r4
 80066d4:	462b      	mov	r3, r5
 80066d6:	f7f9 ff43 	bl	8000560 <__aeabi_dmul>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	2000      	movs	r0, #0
 80066e0:	494d      	ldr	r1, [pc, #308]	; (8006818 <__ieee754_pow+0x3f8>)
 80066e2:	f7f9 fd85 	bl	80001f0 <__aeabi_dsub>
 80066e6:	4622      	mov	r2, r4
 80066e8:	4680      	mov	r8, r0
 80066ea:	4689      	mov	r9, r1
 80066ec:	462b      	mov	r3, r5
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7f9 ff35 	bl	8000560 <__aeabi_dmul>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7f9 ff2f 	bl	8000560 <__aeabi_dmul>
 8006702:	a33f      	add	r3, pc, #252	; (adr r3, 8006800 <__ieee754_pow+0x3e0>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 ff2a 	bl	8000560 <__aeabi_dmul>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4650      	mov	r0, sl
 8006712:	4659      	mov	r1, fp
 8006714:	f7f9 fd6c 	bl	80001f0 <__aeabi_dsub>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4680      	mov	r8, r0
 800671e:	4689      	mov	r9, r1
 8006720:	4630      	mov	r0, r6
 8006722:	4639      	mov	r1, r7
 8006724:	f7f9 fd66 	bl	80001f4 <__adddf3>
 8006728:	2000      	movs	r0, #0
 800672a:	4632      	mov	r2, r6
 800672c:	463b      	mov	r3, r7
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
 8006732:	f7f9 fd5d 	bl	80001f0 <__aeabi_dsub>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 fd57 	bl	80001f0 <__aeabi_dsub>
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	9a06      	ldr	r2, [sp, #24]
 8006746:	3b01      	subs	r3, #1
 8006748:	4313      	orrs	r3, r2
 800674a:	4682      	mov	sl, r0
 800674c:	468b      	mov	fp, r1
 800674e:	f040 81e7 	bne.w	8006b20 <__ieee754_pow+0x700>
 8006752:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006808 <__ieee754_pow+0x3e8>
 8006756:	eeb0 8a47 	vmov.f32	s16, s14
 800675a:	eef0 8a67 	vmov.f32	s17, s15
 800675e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006762:	2600      	movs	r6, #0
 8006764:	4632      	mov	r2, r6
 8006766:	463b      	mov	r3, r7
 8006768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800676c:	f7f9 fd40 	bl	80001f0 <__aeabi_dsub>
 8006770:	4622      	mov	r2, r4
 8006772:	462b      	mov	r3, r5
 8006774:	f7f9 fef4 	bl	8000560 <__aeabi_dmul>
 8006778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800677c:	4680      	mov	r8, r0
 800677e:	4689      	mov	r9, r1
 8006780:	4650      	mov	r0, sl
 8006782:	4659      	mov	r1, fp
 8006784:	f7f9 feec 	bl	8000560 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4640      	mov	r0, r8
 800678e:	4649      	mov	r1, r9
 8006790:	f7f9 fd30 	bl	80001f4 <__adddf3>
 8006794:	4632      	mov	r2, r6
 8006796:	463b      	mov	r3, r7
 8006798:	4680      	mov	r8, r0
 800679a:	4689      	mov	r9, r1
 800679c:	4620      	mov	r0, r4
 800679e:	4629      	mov	r1, r5
 80067a0:	f7f9 fede 	bl	8000560 <__aeabi_dmul>
 80067a4:	460b      	mov	r3, r1
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	4602      	mov	r2, r0
 80067ac:	4649      	mov	r1, r9
 80067ae:	4640      	mov	r0, r8
 80067b0:	f7f9 fd20 	bl	80001f4 <__adddf3>
 80067b4:	4b19      	ldr	r3, [pc, #100]	; (800681c <__ieee754_pow+0x3fc>)
 80067b6:	4299      	cmp	r1, r3
 80067b8:	ec45 4b19 	vmov	d9, r4, r5
 80067bc:	4606      	mov	r6, r0
 80067be:	460f      	mov	r7, r1
 80067c0:	468b      	mov	fp, r1
 80067c2:	f340 82f0 	ble.w	8006da6 <__ieee754_pow+0x986>
 80067c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80067ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80067ce:	4303      	orrs	r3, r0
 80067d0:	f000 81e4 	beq.w	8006b9c <__ieee754_pow+0x77c>
 80067d4:	ec51 0b18 	vmov	r0, r1, d8
 80067d8:	2200      	movs	r2, #0
 80067da:	2300      	movs	r3, #0
 80067dc:	f7fa f932 	bl	8000a44 <__aeabi_dcmplt>
 80067e0:	3800      	subs	r0, #0
 80067e2:	bf18      	it	ne
 80067e4:	2001      	movne	r0, #1
 80067e6:	e72b      	b.n	8006640 <__ieee754_pow+0x220>
 80067e8:	60000000 	.word	0x60000000
 80067ec:	3ff71547 	.word	0x3ff71547
 80067f0:	f85ddf44 	.word	0xf85ddf44
 80067f4:	3e54ae0b 	.word	0x3e54ae0b
 80067f8:	55555555 	.word	0x55555555
 80067fc:	3fd55555 	.word	0x3fd55555
 8006800:	652b82fe 	.word	0x652b82fe
 8006804:	3ff71547 	.word	0x3ff71547
 8006808:	00000000 	.word	0x00000000
 800680c:	bff00000 	.word	0xbff00000
 8006810:	3ff00000 	.word	0x3ff00000
 8006814:	3fd00000 	.word	0x3fd00000
 8006818:	3fe00000 	.word	0x3fe00000
 800681c:	408fffff 	.word	0x408fffff
 8006820:	4bd5      	ldr	r3, [pc, #852]	; (8006b78 <__ieee754_pow+0x758>)
 8006822:	402b      	ands	r3, r5
 8006824:	2200      	movs	r2, #0
 8006826:	b92b      	cbnz	r3, 8006834 <__ieee754_pow+0x414>
 8006828:	4bd4      	ldr	r3, [pc, #848]	; (8006b7c <__ieee754_pow+0x75c>)
 800682a:	f7f9 fe99 	bl	8000560 <__aeabi_dmul>
 800682e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006832:	460c      	mov	r4, r1
 8006834:	1523      	asrs	r3, r4, #20
 8006836:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800683a:	4413      	add	r3, r2
 800683c:	9305      	str	r3, [sp, #20]
 800683e:	4bd0      	ldr	r3, [pc, #832]	; (8006b80 <__ieee754_pow+0x760>)
 8006840:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006844:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006848:	429c      	cmp	r4, r3
 800684a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800684e:	dd08      	ble.n	8006862 <__ieee754_pow+0x442>
 8006850:	4bcc      	ldr	r3, [pc, #816]	; (8006b84 <__ieee754_pow+0x764>)
 8006852:	429c      	cmp	r4, r3
 8006854:	f340 8162 	ble.w	8006b1c <__ieee754_pow+0x6fc>
 8006858:	9b05      	ldr	r3, [sp, #20]
 800685a:	3301      	adds	r3, #1
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006862:	2400      	movs	r4, #0
 8006864:	00e3      	lsls	r3, r4, #3
 8006866:	9307      	str	r3, [sp, #28]
 8006868:	4bc7      	ldr	r3, [pc, #796]	; (8006b88 <__ieee754_pow+0x768>)
 800686a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800686e:	ed93 7b00 	vldr	d7, [r3]
 8006872:	4629      	mov	r1, r5
 8006874:	ec53 2b17 	vmov	r2, r3, d7
 8006878:	eeb0 9a47 	vmov.f32	s18, s14
 800687c:	eef0 9a67 	vmov.f32	s19, s15
 8006880:	4682      	mov	sl, r0
 8006882:	f7f9 fcb5 	bl	80001f0 <__aeabi_dsub>
 8006886:	4652      	mov	r2, sl
 8006888:	4606      	mov	r6, r0
 800688a:	460f      	mov	r7, r1
 800688c:	462b      	mov	r3, r5
 800688e:	ec51 0b19 	vmov	r0, r1, d9
 8006892:	f7f9 fcaf 	bl	80001f4 <__adddf3>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	2000      	movs	r0, #0
 800689c:	49bb      	ldr	r1, [pc, #748]	; (8006b8c <__ieee754_pow+0x76c>)
 800689e:	f7f9 ff89 	bl	80007b4 <__aeabi_ddiv>
 80068a2:	ec41 0b1a 	vmov	d10, r0, r1
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	f7f9 fe57 	bl	8000560 <__aeabi_dmul>
 80068b2:	2300      	movs	r3, #0
 80068b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b8:	9302      	str	r3, [sp, #8]
 80068ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80068be:	46ab      	mov	fp, r5
 80068c0:	106d      	asrs	r5, r5, #1
 80068c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80068c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80068ca:	ec41 0b18 	vmov	d8, r0, r1
 80068ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80068d2:	2200      	movs	r2, #0
 80068d4:	4640      	mov	r0, r8
 80068d6:	4649      	mov	r1, r9
 80068d8:	4614      	mov	r4, r2
 80068da:	461d      	mov	r5, r3
 80068dc:	f7f9 fe40 	bl	8000560 <__aeabi_dmul>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7f9 fc82 	bl	80001f0 <__aeabi_dsub>
 80068ec:	ec53 2b19 	vmov	r2, r3, d9
 80068f0:	4606      	mov	r6, r0
 80068f2:	460f      	mov	r7, r1
 80068f4:	4620      	mov	r0, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	f7f9 fc7a 	bl	80001f0 <__aeabi_dsub>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4650      	mov	r0, sl
 8006902:	4659      	mov	r1, fp
 8006904:	f7f9 fc74 	bl	80001f0 <__aeabi_dsub>
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	f7f9 fe28 	bl	8000560 <__aeabi_dmul>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4630      	mov	r0, r6
 8006916:	4639      	mov	r1, r7
 8006918:	f7f9 fc6a 	bl	80001f0 <__aeabi_dsub>
 800691c:	ec53 2b1a 	vmov	r2, r3, d10
 8006920:	f7f9 fe1e 	bl	8000560 <__aeabi_dmul>
 8006924:	ec53 2b18 	vmov	r2, r3, d8
 8006928:	ec41 0b19 	vmov	d9, r0, r1
 800692c:	ec51 0b18 	vmov	r0, r1, d8
 8006930:	f7f9 fe16 	bl	8000560 <__aeabi_dmul>
 8006934:	a37c      	add	r3, pc, #496	; (adr r3, 8006b28 <__ieee754_pow+0x708>)
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	4604      	mov	r4, r0
 800693c:	460d      	mov	r5, r1
 800693e:	f7f9 fe0f 	bl	8000560 <__aeabi_dmul>
 8006942:	a37b      	add	r3, pc, #492	; (adr r3, 8006b30 <__ieee754_pow+0x710>)
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f7f9 fc54 	bl	80001f4 <__adddf3>
 800694c:	4622      	mov	r2, r4
 800694e:	462b      	mov	r3, r5
 8006950:	f7f9 fe06 	bl	8000560 <__aeabi_dmul>
 8006954:	a378      	add	r3, pc, #480	; (adr r3, 8006b38 <__ieee754_pow+0x718>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fc4b 	bl	80001f4 <__adddf3>
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	f7f9 fdfd 	bl	8000560 <__aeabi_dmul>
 8006966:	a376      	add	r3, pc, #472	; (adr r3, 8006b40 <__ieee754_pow+0x720>)
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f7f9 fc42 	bl	80001f4 <__adddf3>
 8006970:	4622      	mov	r2, r4
 8006972:	462b      	mov	r3, r5
 8006974:	f7f9 fdf4 	bl	8000560 <__aeabi_dmul>
 8006978:	a373      	add	r3, pc, #460	; (adr r3, 8006b48 <__ieee754_pow+0x728>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fc39 	bl	80001f4 <__adddf3>
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	f7f9 fdeb 	bl	8000560 <__aeabi_dmul>
 800698a:	a371      	add	r3, pc, #452	; (adr r3, 8006b50 <__ieee754_pow+0x730>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fc30 	bl	80001f4 <__adddf3>
 8006994:	4622      	mov	r2, r4
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	462b      	mov	r3, r5
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fdde 	bl	8000560 <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7f9 fdd8 	bl	8000560 <__aeabi_dmul>
 80069b0:	4642      	mov	r2, r8
 80069b2:	4604      	mov	r4, r0
 80069b4:	460d      	mov	r5, r1
 80069b6:	464b      	mov	r3, r9
 80069b8:	ec51 0b18 	vmov	r0, r1, d8
 80069bc:	f7f9 fc1a 	bl	80001f4 <__adddf3>
 80069c0:	ec53 2b19 	vmov	r2, r3, d9
 80069c4:	f7f9 fdcc 	bl	8000560 <__aeabi_dmul>
 80069c8:	4622      	mov	r2, r4
 80069ca:	462b      	mov	r3, r5
 80069cc:	f7f9 fc12 	bl	80001f4 <__adddf3>
 80069d0:	4642      	mov	r2, r8
 80069d2:	4682      	mov	sl, r0
 80069d4:	468b      	mov	fp, r1
 80069d6:	464b      	mov	r3, r9
 80069d8:	4640      	mov	r0, r8
 80069da:	4649      	mov	r1, r9
 80069dc:	f7f9 fdc0 	bl	8000560 <__aeabi_dmul>
 80069e0:	4b6b      	ldr	r3, [pc, #428]	; (8006b90 <__ieee754_pow+0x770>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	4606      	mov	r6, r0
 80069e6:	460f      	mov	r7, r1
 80069e8:	f7f9 fc04 	bl	80001f4 <__adddf3>
 80069ec:	4652      	mov	r2, sl
 80069ee:	465b      	mov	r3, fp
 80069f0:	f7f9 fc00 	bl	80001f4 <__adddf3>
 80069f4:	2000      	movs	r0, #0
 80069f6:	4604      	mov	r4, r0
 80069f8:	460d      	mov	r5, r1
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	f7f9 fdad 	bl	8000560 <__aeabi_dmul>
 8006a06:	4b62      	ldr	r3, [pc, #392]	; (8006b90 <__ieee754_pow+0x770>)
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 fbed 	bl	80001f0 <__aeabi_dsub>
 8006a16:	4632      	mov	r2, r6
 8006a18:	463b      	mov	r3, r7
 8006a1a:	f7f9 fbe9 	bl	80001f0 <__aeabi_dsub>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4650      	mov	r0, sl
 8006a24:	4659      	mov	r1, fp
 8006a26:	f7f9 fbe3 	bl	80001f0 <__aeabi_dsub>
 8006a2a:	ec53 2b18 	vmov	r2, r3, d8
 8006a2e:	f7f9 fd97 	bl	8000560 <__aeabi_dmul>
 8006a32:	4622      	mov	r2, r4
 8006a34:	4606      	mov	r6, r0
 8006a36:	460f      	mov	r7, r1
 8006a38:	462b      	mov	r3, r5
 8006a3a:	ec51 0b19 	vmov	r0, r1, d9
 8006a3e:	f7f9 fd8f 	bl	8000560 <__aeabi_dmul>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4630      	mov	r0, r6
 8006a48:	4639      	mov	r1, r7
 8006a4a:	f7f9 fbd3 	bl	80001f4 <__adddf3>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460f      	mov	r7, r1
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4640      	mov	r0, r8
 8006a58:	4649      	mov	r1, r9
 8006a5a:	f7f9 fbcb 	bl	80001f4 <__adddf3>
 8006a5e:	a33e      	add	r3, pc, #248	; (adr r3, 8006b58 <__ieee754_pow+0x738>)
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	2000      	movs	r0, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
 8006a6a:	f7f9 fd79 	bl	8000560 <__aeabi_dmul>
 8006a6e:	4642      	mov	r2, r8
 8006a70:	ec41 0b18 	vmov	d8, r0, r1
 8006a74:	464b      	mov	r3, r9
 8006a76:	4620      	mov	r0, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	f7f9 fbb9 	bl	80001f0 <__aeabi_dsub>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7f9 fbb3 	bl	80001f0 <__aeabi_dsub>
 8006a8a:	a335      	add	r3, pc, #212	; (adr r3, 8006b60 <__ieee754_pow+0x740>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fd66 	bl	8000560 <__aeabi_dmul>
 8006a94:	a334      	add	r3, pc, #208	; (adr r3, 8006b68 <__ieee754_pow+0x748>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fd5d 	bl	8000560 <__aeabi_dmul>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4630      	mov	r0, r6
 8006aac:	4639      	mov	r1, r7
 8006aae:	f7f9 fba1 	bl	80001f4 <__adddf3>
 8006ab2:	9a07      	ldr	r2, [sp, #28]
 8006ab4:	4b37      	ldr	r3, [pc, #220]	; (8006b94 <__ieee754_pow+0x774>)
 8006ab6:	4413      	add	r3, r2
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fb9a 	bl	80001f4 <__adddf3>
 8006ac0:	4682      	mov	sl, r0
 8006ac2:	9805      	ldr	r0, [sp, #20]
 8006ac4:	468b      	mov	fp, r1
 8006ac6:	f7f9 fce1 	bl	800048c <__aeabi_i2d>
 8006aca:	9a07      	ldr	r2, [sp, #28]
 8006acc:	4b32      	ldr	r3, [pc, #200]	; (8006b98 <__ieee754_pow+0x778>)
 8006ace:	4413      	add	r3, r2
 8006ad0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	465b      	mov	r3, fp
 8006adc:	ec51 0b18 	vmov	r0, r1, d8
 8006ae0:	f7f9 fb88 	bl	80001f4 <__adddf3>
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	f7f9 fb84 	bl	80001f4 <__adddf3>
 8006aec:	4632      	mov	r2, r6
 8006aee:	463b      	mov	r3, r7
 8006af0:	f7f9 fb80 	bl	80001f4 <__adddf3>
 8006af4:	2000      	movs	r0, #0
 8006af6:	4632      	mov	r2, r6
 8006af8:	463b      	mov	r3, r7
 8006afa:	4604      	mov	r4, r0
 8006afc:	460d      	mov	r5, r1
 8006afe:	f7f9 fb77 	bl	80001f0 <__aeabi_dsub>
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	f7f9 fb73 	bl	80001f0 <__aeabi_dsub>
 8006b0a:	ec53 2b18 	vmov	r2, r3, d8
 8006b0e:	f7f9 fb6f 	bl	80001f0 <__aeabi_dsub>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4650      	mov	r0, sl
 8006b18:	4659      	mov	r1, fp
 8006b1a:	e610      	b.n	800673e <__ieee754_pow+0x31e>
 8006b1c:	2401      	movs	r4, #1
 8006b1e:	e6a1      	b.n	8006864 <__ieee754_pow+0x444>
 8006b20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006b70 <__ieee754_pow+0x750>
 8006b24:	e617      	b.n	8006756 <__ieee754_pow+0x336>
 8006b26:	bf00      	nop
 8006b28:	4a454eef 	.word	0x4a454eef
 8006b2c:	3fca7e28 	.word	0x3fca7e28
 8006b30:	93c9db65 	.word	0x93c9db65
 8006b34:	3fcd864a 	.word	0x3fcd864a
 8006b38:	a91d4101 	.word	0xa91d4101
 8006b3c:	3fd17460 	.word	0x3fd17460
 8006b40:	518f264d 	.word	0x518f264d
 8006b44:	3fd55555 	.word	0x3fd55555
 8006b48:	db6fabff 	.word	0xdb6fabff
 8006b4c:	3fdb6db6 	.word	0x3fdb6db6
 8006b50:	33333303 	.word	0x33333303
 8006b54:	3fe33333 	.word	0x3fe33333
 8006b58:	e0000000 	.word	0xe0000000
 8006b5c:	3feec709 	.word	0x3feec709
 8006b60:	dc3a03fd 	.word	0xdc3a03fd
 8006b64:	3feec709 	.word	0x3feec709
 8006b68:	145b01f5 	.word	0x145b01f5
 8006b6c:	be3e2fe0 	.word	0xbe3e2fe0
 8006b70:	00000000 	.word	0x00000000
 8006b74:	3ff00000 	.word	0x3ff00000
 8006b78:	7ff00000 	.word	0x7ff00000
 8006b7c:	43400000 	.word	0x43400000
 8006b80:	0003988e 	.word	0x0003988e
 8006b84:	000bb679 	.word	0x000bb679
 8006b88:	080072e0 	.word	0x080072e0
 8006b8c:	3ff00000 	.word	0x3ff00000
 8006b90:	40080000 	.word	0x40080000
 8006b94:	08007300 	.word	0x08007300
 8006b98:	080072f0 	.word	0x080072f0
 8006b9c:	a3b3      	add	r3, pc, #716	; (adr r3, 8006e6c <__ieee754_pow+0xa4c>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	f7f9 fb25 	bl	80001f4 <__adddf3>
 8006baa:	4622      	mov	r2, r4
 8006bac:	ec41 0b1a 	vmov	d10, r0, r1
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	f7f9 fb1b 	bl	80001f0 <__aeabi_dsub>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	ec51 0b1a 	vmov	r0, r1, d10
 8006bc2:	f7f9 ff5d 	bl	8000a80 <__aeabi_dcmpgt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f47f ae04 	bne.w	80067d4 <__ieee754_pow+0x3b4>
 8006bcc:	4aa2      	ldr	r2, [pc, #648]	; (8006e58 <__ieee754_pow+0xa38>)
 8006bce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	f340 8107 	ble.w	8006de6 <__ieee754_pow+0x9c6>
 8006bd8:	151b      	asrs	r3, r3, #20
 8006bda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006bde:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006be2:	fa4a fa03 	asr.w	sl, sl, r3
 8006be6:	44da      	add	sl, fp
 8006be8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006bec:	489b      	ldr	r0, [pc, #620]	; (8006e5c <__ieee754_pow+0xa3c>)
 8006bee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006bf2:	4108      	asrs	r0, r1
 8006bf4:	ea00 030a 	and.w	r3, r0, sl
 8006bf8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006bfc:	f1c1 0114 	rsb	r1, r1, #20
 8006c00:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006c04:	fa4a fa01 	asr.w	sl, sl, r1
 8006c08:	f1bb 0f00 	cmp.w	fp, #0
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	4620      	mov	r0, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	bfb8      	it	lt
 8006c16:	f1ca 0a00 	rsblt	sl, sl, #0
 8006c1a:	f7f9 fae9 	bl	80001f0 <__aeabi_dsub>
 8006c1e:	ec41 0b19 	vmov	d9, r0, r1
 8006c22:	4642      	mov	r2, r8
 8006c24:	464b      	mov	r3, r9
 8006c26:	ec51 0b19 	vmov	r0, r1, d9
 8006c2a:	f7f9 fae3 	bl	80001f4 <__adddf3>
 8006c2e:	a37a      	add	r3, pc, #488	; (adr r3, 8006e18 <__ieee754_pow+0x9f8>)
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	2000      	movs	r0, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	460d      	mov	r5, r1
 8006c3a:	f7f9 fc91 	bl	8000560 <__aeabi_dmul>
 8006c3e:	ec53 2b19 	vmov	r2, r3, d9
 8006c42:	4606      	mov	r6, r0
 8006c44:	460f      	mov	r7, r1
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fad1 	bl	80001f0 <__aeabi_dsub>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 facb 	bl	80001f0 <__aeabi_dsub>
 8006c5a:	a371      	add	r3, pc, #452	; (adr r3, 8006e20 <__ieee754_pow+0xa00>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	f7f9 fc7e 	bl	8000560 <__aeabi_dmul>
 8006c64:	a370      	add	r3, pc, #448	; (adr r3, 8006e28 <__ieee754_pow+0xa08>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	4680      	mov	r8, r0
 8006c6c:	4689      	mov	r9, r1
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 fc75 	bl	8000560 <__aeabi_dmul>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fab9 	bl	80001f4 <__adddf3>
 8006c82:	4604      	mov	r4, r0
 8006c84:	460d      	mov	r5, r1
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	f7f9 fab1 	bl	80001f4 <__adddf3>
 8006c92:	4632      	mov	r2, r6
 8006c94:	463b      	mov	r3, r7
 8006c96:	4680      	mov	r8, r0
 8006c98:	4689      	mov	r9, r1
 8006c9a:	f7f9 faa9 	bl	80001f0 <__aeabi_dsub>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 faa3 	bl	80001f0 <__aeabi_dsub>
 8006caa:	4642      	mov	r2, r8
 8006cac:	4606      	mov	r6, r0
 8006cae:	460f      	mov	r7, r1
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	f7f9 fc53 	bl	8000560 <__aeabi_dmul>
 8006cba:	a35d      	add	r3, pc, #372	; (adr r3, 8006e30 <__ieee754_pow+0xa10>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	f7f9 fc4c 	bl	8000560 <__aeabi_dmul>
 8006cc8:	a35b      	add	r3, pc, #364	; (adr r3, 8006e38 <__ieee754_pow+0xa18>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f7f9 fa8f 	bl	80001f0 <__aeabi_dsub>
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	f7f9 fc43 	bl	8000560 <__aeabi_dmul>
 8006cda:	a359      	add	r3, pc, #356	; (adr r3, 8006e40 <__ieee754_pow+0xa20>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f7f9 fa88 	bl	80001f4 <__adddf3>
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	462b      	mov	r3, r5
 8006ce8:	f7f9 fc3a 	bl	8000560 <__aeabi_dmul>
 8006cec:	a356      	add	r3, pc, #344	; (adr r3, 8006e48 <__ieee754_pow+0xa28>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f7f9 fa7d 	bl	80001f0 <__aeabi_dsub>
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	f7f9 fc31 	bl	8000560 <__aeabi_dmul>
 8006cfe:	a354      	add	r3, pc, #336	; (adr r3, 8006e50 <__ieee754_pow+0xa30>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f7f9 fa76 	bl	80001f4 <__adddf3>
 8006d08:	4622      	mov	r2, r4
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	f7f9 fc28 	bl	8000560 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4640      	mov	r0, r8
 8006d16:	4649      	mov	r1, r9
 8006d18:	f7f9 fa6a 	bl	80001f0 <__aeabi_dsub>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	460d      	mov	r5, r1
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4640      	mov	r0, r8
 8006d26:	4649      	mov	r1, r9
 8006d28:	f7f9 fc1a 	bl	8000560 <__aeabi_dmul>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	ec41 0b19 	vmov	d9, r0, r1
 8006d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d36:	4620      	mov	r0, r4
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fa59 	bl	80001f0 <__aeabi_dsub>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	ec51 0b19 	vmov	r0, r1, d9
 8006d46:	f7f9 fd35 	bl	80007b4 <__aeabi_ddiv>
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	463b      	mov	r3, r7
 8006d52:	4640      	mov	r0, r8
 8006d54:	4649      	mov	r1, r9
 8006d56:	f7f9 fc03 	bl	8000560 <__aeabi_dmul>
 8006d5a:	4632      	mov	r2, r6
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	f7f9 fa49 	bl	80001f4 <__adddf3>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4620      	mov	r0, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f7f9 fa41 	bl	80001f0 <__aeabi_dsub>
 8006d6e:	4642      	mov	r2, r8
 8006d70:	464b      	mov	r3, r9
 8006d72:	f7f9 fa3d 	bl	80001f0 <__aeabi_dsub>
 8006d76:	460b      	mov	r3, r1
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4939      	ldr	r1, [pc, #228]	; (8006e60 <__ieee754_pow+0xa40>)
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f7f9 fa37 	bl	80001f0 <__aeabi_dsub>
 8006d82:	ec41 0b10 	vmov	d0, r0, r1
 8006d86:	ee10 3a90 	vmov	r3, s1
 8006d8a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d92:	da2b      	bge.n	8006dec <__ieee754_pow+0x9cc>
 8006d94:	4650      	mov	r0, sl
 8006d96:	f000 f877 	bl	8006e88 <scalbn>
 8006d9a:	ec51 0b10 	vmov	r0, r1, d0
 8006d9e:	ec53 2b18 	vmov	r2, r3, d8
 8006da2:	f7ff bbee 	b.w	8006582 <__ieee754_pow+0x162>
 8006da6:	4b2f      	ldr	r3, [pc, #188]	; (8006e64 <__ieee754_pow+0xa44>)
 8006da8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006dac:	429e      	cmp	r6, r3
 8006dae:	f77f af0d 	ble.w	8006bcc <__ieee754_pow+0x7ac>
 8006db2:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <__ieee754_pow+0xa48>)
 8006db4:	440b      	add	r3, r1
 8006db6:	4303      	orrs	r3, r0
 8006db8:	d009      	beq.n	8006dce <__ieee754_pow+0x9ae>
 8006dba:	ec51 0b18 	vmov	r0, r1, d8
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f7f9 fe3f 	bl	8000a44 <__aeabi_dcmplt>
 8006dc6:	3800      	subs	r0, #0
 8006dc8:	bf18      	it	ne
 8006dca:	2001      	movne	r0, #1
 8006dcc:	e448      	b.n	8006660 <__ieee754_pow+0x240>
 8006dce:	4622      	mov	r2, r4
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	f7f9 fa0d 	bl	80001f0 <__aeabi_dsub>
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	464b      	mov	r3, r9
 8006dda:	f7f9 fe47 	bl	8000a6c <__aeabi_dcmpge>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f43f aef4 	beq.w	8006bcc <__ieee754_pow+0x7ac>
 8006de4:	e7e9      	b.n	8006dba <__ieee754_pow+0x99a>
 8006de6:	f04f 0a00 	mov.w	sl, #0
 8006dea:	e71a      	b.n	8006c22 <__ieee754_pow+0x802>
 8006dec:	ec51 0b10 	vmov	r0, r1, d0
 8006df0:	4619      	mov	r1, r3
 8006df2:	e7d4      	b.n	8006d9e <__ieee754_pow+0x97e>
 8006df4:	491a      	ldr	r1, [pc, #104]	; (8006e60 <__ieee754_pow+0xa40>)
 8006df6:	2000      	movs	r0, #0
 8006df8:	f7ff bb31 	b.w	800645e <__ieee754_pow+0x3e>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	f7ff bb2d 	b.w	800645e <__ieee754_pow+0x3e>
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7ff bb29 	b.w	800645e <__ieee754_pow+0x3e>
 8006e0c:	9204      	str	r2, [sp, #16]
 8006e0e:	f7ff bb7b 	b.w	8006508 <__ieee754_pow+0xe8>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f7ff bb65 	b.w	80064e2 <__ieee754_pow+0xc2>
 8006e18:	00000000 	.word	0x00000000
 8006e1c:	3fe62e43 	.word	0x3fe62e43
 8006e20:	fefa39ef 	.word	0xfefa39ef
 8006e24:	3fe62e42 	.word	0x3fe62e42
 8006e28:	0ca86c39 	.word	0x0ca86c39
 8006e2c:	be205c61 	.word	0xbe205c61
 8006e30:	72bea4d0 	.word	0x72bea4d0
 8006e34:	3e663769 	.word	0x3e663769
 8006e38:	c5d26bf1 	.word	0xc5d26bf1
 8006e3c:	3ebbbd41 	.word	0x3ebbbd41
 8006e40:	af25de2c 	.word	0xaf25de2c
 8006e44:	3f11566a 	.word	0x3f11566a
 8006e48:	16bebd93 	.word	0x16bebd93
 8006e4c:	3f66c16c 	.word	0x3f66c16c
 8006e50:	5555553e 	.word	0x5555553e
 8006e54:	3fc55555 	.word	0x3fc55555
 8006e58:	3fe00000 	.word	0x3fe00000
 8006e5c:	fff00000 	.word	0xfff00000
 8006e60:	3ff00000 	.word	0x3ff00000
 8006e64:	4090cbff 	.word	0x4090cbff
 8006e68:	3f6f3400 	.word	0x3f6f3400
 8006e6c:	652b82fe 	.word	0x652b82fe
 8006e70:	3c971547 	.word	0x3c971547

08006e74 <fabs>:
 8006e74:	ec51 0b10 	vmov	r0, r1, d0
 8006e78:	ee10 2a10 	vmov	r2, s0
 8006e7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e80:	ec43 2b10 	vmov	d0, r2, r3
 8006e84:	4770      	bx	lr
	...

08006e88 <scalbn>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	ec55 4b10 	vmov	r4, r5, d0
 8006e8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006e92:	4606      	mov	r6, r0
 8006e94:	462b      	mov	r3, r5
 8006e96:	b999      	cbnz	r1, 8006ec0 <scalbn+0x38>
 8006e98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e9c:	4323      	orrs	r3, r4
 8006e9e:	d03f      	beq.n	8006f20 <scalbn+0x98>
 8006ea0:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <scalbn+0xf0>)
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	ee10 0a10 	vmov	r0, s0
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f7f9 fb59 	bl	8000560 <__aeabi_dmul>
 8006eae:	4b33      	ldr	r3, [pc, #204]	; (8006f7c <scalbn+0xf4>)
 8006eb0:	429e      	cmp	r6, r3
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	da10      	bge.n	8006eda <scalbn+0x52>
 8006eb8:	a327      	add	r3, pc, #156	; (adr r3, 8006f58 <scalbn+0xd0>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	e01f      	b.n	8006f00 <scalbn+0x78>
 8006ec0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006ec4:	4291      	cmp	r1, r2
 8006ec6:	d10c      	bne.n	8006ee2 <scalbn+0x5a>
 8006ec8:	ee10 2a10 	vmov	r2, s0
 8006ecc:	4620      	mov	r0, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	f7f9 f990 	bl	80001f4 <__adddf3>
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	e022      	b.n	8006f20 <scalbn+0x98>
 8006eda:	460b      	mov	r3, r1
 8006edc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006ee0:	3936      	subs	r1, #54	; 0x36
 8006ee2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006ee6:	4296      	cmp	r6, r2
 8006ee8:	dd0d      	ble.n	8006f06 <scalbn+0x7e>
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	a11c      	add	r1, pc, #112	; (adr r1, 8006f60 <scalbn+0xd8>)
 8006eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ef2:	da02      	bge.n	8006efa <scalbn+0x72>
 8006ef4:	a11c      	add	r1, pc, #112	; (adr r1, 8006f68 <scalbn+0xe0>)
 8006ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006efa:	a319      	add	r3, pc, #100	; (adr r3, 8006f60 <scalbn+0xd8>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 fb2e 	bl	8000560 <__aeabi_dmul>
 8006f04:	e7e6      	b.n	8006ed4 <scalbn+0x4c>
 8006f06:	1872      	adds	r2, r6, r1
 8006f08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f0c:	428a      	cmp	r2, r1
 8006f0e:	dcec      	bgt.n	8006eea <scalbn+0x62>
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	dd08      	ble.n	8006f26 <scalbn+0x9e>
 8006f14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f20:	ec45 4b10 	vmov	d0, r4, r5
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006f2a:	da08      	bge.n	8006f3e <scalbn+0xb6>
 8006f2c:	2d00      	cmp	r5, #0
 8006f2e:	a10a      	add	r1, pc, #40	; (adr r1, 8006f58 <scalbn+0xd0>)
 8006f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f34:	dac0      	bge.n	8006eb8 <scalbn+0x30>
 8006f36:	a10e      	add	r1, pc, #56	; (adr r1, 8006f70 <scalbn+0xe8>)
 8006f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f3c:	e7bc      	b.n	8006eb8 <scalbn+0x30>
 8006f3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f42:	3236      	adds	r2, #54	; 0x36
 8006f44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <scalbn+0xf8>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	e7d5      	b.n	8006f00 <scalbn+0x78>
 8006f54:	f3af 8000 	nop.w
 8006f58:	c2f8f359 	.word	0xc2f8f359
 8006f5c:	01a56e1f 	.word	0x01a56e1f
 8006f60:	8800759c 	.word	0x8800759c
 8006f64:	7e37e43c 	.word	0x7e37e43c
 8006f68:	8800759c 	.word	0x8800759c
 8006f6c:	fe37e43c 	.word	0xfe37e43c
 8006f70:	c2f8f359 	.word	0xc2f8f359
 8006f74:	81a56e1f 	.word	0x81a56e1f
 8006f78:	43500000 	.word	0x43500000
 8006f7c:	ffff3cb0 	.word	0xffff3cb0
 8006f80:	3c900000 	.word	0x3c900000

08006f84 <with_errno>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4604      	mov	r4, r0
 8006f88:	460d      	mov	r5, r1
 8006f8a:	4616      	mov	r6, r2
 8006f8c:	f7ff f9a0 	bl	80062d0 <__errno>
 8006f90:	4629      	mov	r1, r5
 8006f92:	6006      	str	r6, [r0, #0]
 8006f94:	4620      	mov	r0, r4
 8006f96:	bd70      	pop	{r4, r5, r6, pc}

08006f98 <xflow>:
 8006f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461d      	mov	r5, r3
 8006f9e:	b108      	cbz	r0, 8006fa4 <xflow+0xc>
 8006fa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006fa4:	e9cd 2300 	strd	r2, r3, [sp]
 8006fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fac:	4620      	mov	r0, r4
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7f9 fad6 	bl	8000560 <__aeabi_dmul>
 8006fb4:	2222      	movs	r2, #34	; 0x22
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fbc:	f7ff bfe2 	b.w	8006f84 <with_errno>

08006fc0 <__math_uflow>:
 8006fc0:	b508      	push	{r3, lr}
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fc8:	f7ff ffe6 	bl	8006f98 <xflow>
 8006fcc:	ec41 0b10 	vmov	d0, r0, r1
 8006fd0:	bd08      	pop	{r3, pc}

08006fd2 <__math_oflow>:
 8006fd2:	b508      	push	{r3, lr}
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006fda:	f7ff ffdd 	bl	8006f98 <xflow>
 8006fde:	ec41 0b10 	vmov	d0, r0, r1
 8006fe2:	bd08      	pop	{r3, pc}

08006fe4 <__ieee754_sqrt>:
 8006fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	ec55 4b10 	vmov	r4, r5, d0
 8006fec:	4e67      	ldr	r6, [pc, #412]	; (800718c <__ieee754_sqrt+0x1a8>)
 8006fee:	43ae      	bics	r6, r5
 8006ff0:	ee10 0a10 	vmov	r0, s0
 8006ff4:	ee10 2a10 	vmov	r2, s0
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	d10d      	bne.n	800701a <__ieee754_sqrt+0x36>
 8006ffe:	f7f9 faaf 	bl	8000560 <__aeabi_dmul>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 f8f3 	bl	80001f4 <__adddf3>
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	ec45 4b10 	vmov	d0, r4, r5
 8007016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701a:	2d00      	cmp	r5, #0
 800701c:	dc0b      	bgt.n	8007036 <__ieee754_sqrt+0x52>
 800701e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007022:	4326      	orrs	r6, r4
 8007024:	d0f5      	beq.n	8007012 <__ieee754_sqrt+0x2e>
 8007026:	b135      	cbz	r5, 8007036 <__ieee754_sqrt+0x52>
 8007028:	f7f9 f8e2 	bl	80001f0 <__aeabi_dsub>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	f7f9 fbc0 	bl	80007b4 <__aeabi_ddiv>
 8007034:	e7eb      	b.n	800700e <__ieee754_sqrt+0x2a>
 8007036:	1509      	asrs	r1, r1, #20
 8007038:	f000 808d 	beq.w	8007156 <__ieee754_sqrt+0x172>
 800703c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007040:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007048:	07c9      	lsls	r1, r1, #31
 800704a:	bf5c      	itt	pl
 800704c:	005b      	lslpl	r3, r3, #1
 800704e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007052:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007056:	bf58      	it	pl
 8007058:	0052      	lslpl	r2, r2, #1
 800705a:	2500      	movs	r5, #0
 800705c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007060:	1076      	asrs	r6, r6, #1
 8007062:	0052      	lsls	r2, r2, #1
 8007064:	f04f 0e16 	mov.w	lr, #22
 8007068:	46ac      	mov	ip, r5
 800706a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800706e:	eb0c 0001 	add.w	r0, ip, r1
 8007072:	4298      	cmp	r0, r3
 8007074:	bfde      	ittt	le
 8007076:	1a1b      	suble	r3, r3, r0
 8007078:	eb00 0c01 	addle.w	ip, r0, r1
 800707c:	186d      	addle	r5, r5, r1
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	f1be 0e01 	subs.w	lr, lr, #1
 8007084:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007088:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800708c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007090:	d1ed      	bne.n	800706e <__ieee754_sqrt+0x8a>
 8007092:	4674      	mov	r4, lr
 8007094:	2720      	movs	r7, #32
 8007096:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800709a:	4563      	cmp	r3, ip
 800709c:	eb01 000e 	add.w	r0, r1, lr
 80070a0:	dc02      	bgt.n	80070a8 <__ieee754_sqrt+0xc4>
 80070a2:	d113      	bne.n	80070cc <__ieee754_sqrt+0xe8>
 80070a4:	4290      	cmp	r0, r2
 80070a6:	d811      	bhi.n	80070cc <__ieee754_sqrt+0xe8>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	eb00 0e01 	add.w	lr, r0, r1
 80070ae:	da57      	bge.n	8007160 <__ieee754_sqrt+0x17c>
 80070b0:	f1be 0f00 	cmp.w	lr, #0
 80070b4:	db54      	blt.n	8007160 <__ieee754_sqrt+0x17c>
 80070b6:	f10c 0801 	add.w	r8, ip, #1
 80070ba:	eba3 030c 	sub.w	r3, r3, ip
 80070be:	4290      	cmp	r0, r2
 80070c0:	bf88      	it	hi
 80070c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80070c6:	1a12      	subs	r2, r2, r0
 80070c8:	440c      	add	r4, r1
 80070ca:	46c4      	mov	ip, r8
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	3f01      	subs	r7, #1
 80070d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80070d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80070d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80070dc:	d1dd      	bne.n	800709a <__ieee754_sqrt+0xb6>
 80070de:	4313      	orrs	r3, r2
 80070e0:	d01b      	beq.n	800711a <__ieee754_sqrt+0x136>
 80070e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007190 <__ieee754_sqrt+0x1ac>
 80070e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007194 <__ieee754_sqrt+0x1b0>
 80070ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80070ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80070f2:	f7f9 f87d 	bl	80001f0 <__aeabi_dsub>
 80070f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4640      	mov	r0, r8
 8007100:	4649      	mov	r1, r9
 8007102:	f7f9 fca9 	bl	8000a58 <__aeabi_dcmple>
 8007106:	b140      	cbz	r0, 800711a <__ieee754_sqrt+0x136>
 8007108:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800710c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007110:	e9db 2300 	ldrd	r2, r3, [fp]
 8007114:	d126      	bne.n	8007164 <__ieee754_sqrt+0x180>
 8007116:	3501      	adds	r5, #1
 8007118:	463c      	mov	r4, r7
 800711a:	106a      	asrs	r2, r5, #1
 800711c:	0863      	lsrs	r3, r4, #1
 800711e:	07e9      	lsls	r1, r5, #31
 8007120:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007124:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007128:	bf48      	it	mi
 800712a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800712e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007132:	461c      	mov	r4, r3
 8007134:	e76d      	b.n	8007012 <__ieee754_sqrt+0x2e>
 8007136:	0ad3      	lsrs	r3, r2, #11
 8007138:	3815      	subs	r0, #21
 800713a:	0552      	lsls	r2, r2, #21
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0fa      	beq.n	8007136 <__ieee754_sqrt+0x152>
 8007140:	02dc      	lsls	r4, r3, #11
 8007142:	d50a      	bpl.n	800715a <__ieee754_sqrt+0x176>
 8007144:	f1c1 0420 	rsb	r4, r1, #32
 8007148:	fa22 f404 	lsr.w	r4, r2, r4
 800714c:	1e4d      	subs	r5, r1, #1
 800714e:	408a      	lsls	r2, r1
 8007150:	4323      	orrs	r3, r4
 8007152:	1b41      	subs	r1, r0, r5
 8007154:	e772      	b.n	800703c <__ieee754_sqrt+0x58>
 8007156:	4608      	mov	r0, r1
 8007158:	e7f0      	b.n	800713c <__ieee754_sqrt+0x158>
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	3101      	adds	r1, #1
 800715e:	e7ef      	b.n	8007140 <__ieee754_sqrt+0x15c>
 8007160:	46e0      	mov	r8, ip
 8007162:	e7aa      	b.n	80070ba <__ieee754_sqrt+0xd6>
 8007164:	f7f9 f846 	bl	80001f4 <__adddf3>
 8007168:	e9da 8900 	ldrd	r8, r9, [sl]
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fc66 	bl	8000a44 <__aeabi_dcmplt>
 8007178:	b120      	cbz	r0, 8007184 <__ieee754_sqrt+0x1a0>
 800717a:	1ca0      	adds	r0, r4, #2
 800717c:	bf08      	it	eq
 800717e:	3501      	addeq	r5, #1
 8007180:	3402      	adds	r4, #2
 8007182:	e7ca      	b.n	800711a <__ieee754_sqrt+0x136>
 8007184:	3401      	adds	r4, #1
 8007186:	f024 0401 	bic.w	r4, r4, #1
 800718a:	e7c6      	b.n	800711a <__ieee754_sqrt+0x136>
 800718c:	7ff00000 	.word	0x7ff00000
 8007190:	20000070 	.word	0x20000070
 8007194:	20000078 	.word	0x20000078

08007198 <_init>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr

080071a4 <_fini>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr
