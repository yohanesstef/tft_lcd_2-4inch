
tft_lcd_2-4inch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08009f40  08009f40  00019f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a310  0800a310  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800a310  0800a310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a318  0800a318  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800a320  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000968  20000210  0800a530  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b78  0800a530  00020b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e62  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003586  00000000  00000000  000330e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00036670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce9  00000000  00000000  00037738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a439  00000000  00000000  00038421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015724  00000000  00000000  0005285a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c495  00000000  00000000  00067f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005700  00000000  00000000  00104414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00109b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f28 	.word	0x08009f28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	08009f28 	.word	0x08009f28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <MX_ADC1_Init+0x9c>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <MX_ADC1_Init+0xa0>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fb6:	f001 ffbd 	bl	8002f34 <HAL_ADC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 f9b8 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fd6:	f001 fff1 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fe0:	f000 f9a8 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000022c 	.word	0x2000022c
 8000ff0:	40012000 	.word	0x40012000
 8000ff4:	0f000001 	.word	0x0f000001

08000ff8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_ADC_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d127      	bne.n	800106a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_ADC_MspInit+0x80>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_ADC_MspInit+0x80>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001052:	2330      	movs	r3, #48	; 0x30
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001056:	2303      	movs	r3, #3
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_ADC_MspInit+0x84>)
 8001066:	f002 fedb 	bl	8003e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012000 	.word	0x40012000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_DMA_Init+0x6c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <MX_DMA_Init+0x6c>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_DMA_Init+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2039      	movs	r0, #57	; 0x39
 80010a8:	f002 fa81 	bl	80035ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010ac:	2039      	movs	r0, #57	; 0x39
 80010ae:	f002 fa9a 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	203a      	movs	r0, #58	; 0x3a
 80010b8:	f002 fa79 	bl	80035ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010bc:	203a      	movs	r0, #58	; 0x3a
 80010be:	f002 fa92 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2045      	movs	r0, #69	; 0x45
 80010c8:	f002 fa71 	bl	80035ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010cc:	2045      	movs	r0, #69	; 0x45
 80010ce:	f002 fa8a 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2046      	movs	r0, #70	; 0x46
 80010d8:	f002 fa69 	bl	80035ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010dc:	2046      	movs	r0, #70	; 0x46
 80010de:	f002 fa82 	bl	80035e6 <HAL_NVIC_EnableIRQ>

}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <MX_GPIO_Init+0xe0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <MX_GPIO_Init+0xe0>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_GPIO_Init+0xe0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <MX_GPIO_Init+0xe0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <MX_GPIO_Init+0xe0>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <MX_GPIO_Init+0xe0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_GPIO_Init+0xe0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <MX_GPIO_Init+0xe0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_GPIO_Init+0xe0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f248 1180 	movw	r1, #33152	; 0x8180
 8001160:	481c      	ldr	r0, [pc, #112]	; (80011d4 <MX_GPIO_Init+0xe4>)
 8001162:	f002 fff9 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15
 8001166:	2200      	movs	r2, #0
 8001168:	f248 71fe 	movw	r1, #34814	; 0x87fe
 800116c:	481a      	ldr	r0, [pc, #104]	; (80011d8 <MX_GPIO_Init+0xe8>)
 800116e:	f002 fff3 	bl	8004158 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 8001172:	f248 1380 	movw	r3, #33152	; 0x8180
 8001176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <MX_GPIO_Init+0xe4>)
 800118c:	f002 fe48 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15
 8001190:	f248 73fe 	movw	r3, #34814	; 0x87fe
 8001194:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0xe8>)
 80011aa:	f002 fe39 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_GPIO_Init+0xe8>)
 80011c4:	f002 fe2c 	bl	8003e20 <HAL_GPIO_Init>

}
 80011c8:	bf00      	nop
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f001 fe12 	bl	8002e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f828 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f7ff ff82 	bl	80010f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f7ff ff48 	bl	8001080 <MX_DMA_Init>
  MX_TIM1_Init();
 80011f0:	f000 fa38 	bl	8001664 <MX_TIM1_Init>
  MX_ADC1_Init();
 80011f4:	f7ff feae 	bl	8000f54 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011f8:	f000 faa6 	bl	8001748 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80011fc:	f000 faf8 	bl	80017f0 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8001200:	f000 facc 	bl	800179c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <main+0x50>)
 8001206:	f003 fc8d 	bl	8004b24 <HAL_TIM_Base_Start>

//  server_init(&huart6);
  Ringbuf_init();
 800120a:	f001 f887 	bl	800231c <Ringbuf_init>
  lora_init(&huart1);
 800120e:	4808      	ldr	r0, [pc, #32]	; (8001230 <main+0x54>)
 8001210:	f001 fae2 	bl	80027d8 <lora_init>
    /* USER CODE BEGIN 3 */
//	  lcd_touchscreen_routine();
//	  server_transmit_routine();
//	  lora_receive_routine();
//	  lcd_touchscreen_routine();
	  gps_GGA_routine();
 8001214:	f001 fa98 	bl	8002748 <gps_GGA_routine>
	  lora_wireless_transmit_routine();
 8001218:	f001 fc84 	bl	8002b24 <lora_wireless_transmit_routine>
	  flag++;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <main+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <main+0x58>)
 8001226:	701a      	strb	r2, [r3, #0]
	  gps_GGA_routine();
 8001228:	e7f4      	b.n	8001214 <main+0x38>
 800122a:	bf00      	nop
 800122c:	2000027c 	.word	0x2000027c
 8001230:	200002c4 	.word	0x200002c4
 8001234:	20000274 	.word	0x20000274

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	; 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f005 ff65 	bl	8007116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <SystemClock_Config+0xcc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a27      	ldr	r2, [pc, #156]	; (8001304 <SystemClock_Config+0xcc>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <SystemClock_Config+0xcc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <SystemClock_Config+0xd0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a20      	ldr	r2, [pc, #128]	; (8001308 <SystemClock_Config+0xd0>)
 8001286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <SystemClock_Config+0xd0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012ac:	2319      	movs	r3, #25
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012b0:	23a8      	movs	r3, #168	; 0xa8
 80012b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0320 	add.w	r3, r7, #32
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 ff87 	bl	80041d4 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012cc:	f000 f832 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2102      	movs	r1, #2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 f9e9 	bl	80046c4 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012f8:	f000 f81c 	bl	8001334 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	; 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_UART_RxHalfCpltCallback>:
//    SSD1306_Clear();
//    previousTick = HAL_GetTick();
//  }
//}
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	callback++;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_UART_RxHalfCpltCallback+0x24>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_UART_RxHalfCpltCallback+0x24>)
 800131e:	701a      	strb	r2, [r3, #0]
	server_receive_callback(huart);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 fd3d 	bl	8002da0 <server_receive_callback>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000275 	.word	0x20000275

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_MspInit+0x4c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout>0)timeout--;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SysTick_Handler+0x20>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <SysTick_Handler+0x18>
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Handler+0x20>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <SysTick_Handler+0x20>)
 80013ee:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f001 fd5c 	bl	8002eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000520 	.word	0x20000520

080013fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <USART1_IRQHandler+0x10>)
 8001402:	f003 ffb5 	bl	8005370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002c4 	.word	0x200002c4

08001410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USART2_IRQHandler+0x10>)
 8001416:	f001 f939 	bl	800268c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000308 	.word	0x20000308

08001424 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA2_Stream1_IRQHandler+0x10>)
 800142a:	f002 fa8f 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000450 	.word	0x20000450

08001438 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA2_Stream2_IRQHandler+0x10>)
 800143e:	f002 fa85 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000390 	.word	0x20000390

0800144c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA2_Stream6_IRQHandler+0x10>)
 8001452:	f002 fa7b 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200004b0 	.word	0x200004b0

08001460 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA2_Stream7_IRQHandler+0x10>)
 8001466:	f002 fa71 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200003f0 	.word	0x200003f0

08001474 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USART6_IRQHandler+0x10>)
 800147a:	f003 ff79 	bl	8005370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000034c 	.word	0x2000034c

08001488 <EXTI4_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_IRQHandler(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 800148c:	2110      	movs	r1, #16
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <EXTI4_IRQHandler+0x28>)
 8001490:	f002 fe4a 	bl	8004128 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <EXTI4_IRQHandler+0x18>
		LCD_Touch_OnDown();
 800149a:	f001 f977 	bl	800278c <LCD_Touch_OnDown>
 800149e:	e001      	b.n	80014a4 <EXTI4_IRQHandler+0x1c>
	} else {
		LCD_Touch_OnUp();
 80014a0:	f001 f984 	bl	80027ac <LCD_Touch_OnUp>
	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80014a4:	2010      	movs	r0, #16
 80014a6:	f002 fe71 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40020000 	.word	0x40020000

080014b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return 1;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_kill>:

int _kill(int pid, int sig)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ce:	f005 fe75 	bl	80071bc <__errno>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2216      	movs	r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
  return -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_exit>:

void _exit (int status)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffe7 	bl	80014c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014f6:	e7fe      	b.n	80014f6 <_exit+0x12>

080014f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
  }

  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e009      	b.n	8001558 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf1      	blt.n	8001544 <_write+0x12>
  }
  return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_close>:

int _close(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001592:	605a      	str	r2, [r3, #4]
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_isatty>:

int _isatty(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f005 fdda 	bl	80071bc <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20018000 	.word	0x20018000
 8001634:	00000400 	.word	0x00000400
 8001638:	20000278 	.word	0x20000278
 800163c:	20000b78 	.word	0x20000b78

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_TIM1_Init+0x98>)
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <MX_TIM1_Init+0x9c>)
 8001684:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <MX_TIM1_Init+0x98>)
 8001688:	2253      	movs	r2, #83	; 0x53
 800168a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_TIM1_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_TIM1_Init+0x98>)
 8001694:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001698:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_TIM1_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_TIM1_Init+0x98>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_TIM1_Init+0x98>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ac:	4813      	ldr	r0, [pc, #76]	; (80016fc <MX_TIM1_Init+0x98>)
 80016ae:	f003 f9e9 	bl	8004a84 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016b8:	f7ff fe3c 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_TIM1_Init+0x98>)
 80016ca:	f003 fa85 	bl	8004bd8 <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016d4:	f7ff fe2e 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_TIM1_Init+0x98>)
 80016e6:	f003 fc59 	bl	8004f9c <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016f0:	f7ff fe20 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000027c 	.word	0x2000027c
 8001700:	40010000 	.word	0x40010000

08001704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_TIM_Base_MspInit+0x3c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10d      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_TIM_Base_MspInit+0x40>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_TIM_Base_MspInit+0x40>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_TIM_Base_MspInit+0x40>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40010000 	.word	0x40010000
 8001744:	40023800 	.word	0x40023800

08001748 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <MX_USART1_UART_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001754:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001780:	f003 fc7a 	bl	8005078 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800178a:	f7ff fdd3 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002c4 	.word	0x200002c4
 8001798:	40011000 	.word	0x40011000

0800179c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_USART2_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017d4:	f003 fc50 	bl	8005078 <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017de:	f7ff fda9 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000308 	.word	0x20000308
 80017ec:	40004400 	.word	0x40004400

080017f0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USART6_UART_Init+0x4c>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_USART6_UART_Init+0x50>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_USART6_UART_Init+0x4c>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USART6_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USART6_UART_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USART6_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USART6_UART_Init+0x4c>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USART6_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USART6_UART_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_USART6_UART_Init+0x4c>)
 8001828:	f003 fc26 	bl	8005078 <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001832:	f7ff fd7f 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000034c 	.word	0x2000034c
 8001840:	40011400 	.word	0x40011400

08001844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a67      	ldr	r2, [pc, #412]	; (8001a00 <HAL_UART_MspInit+0x1bc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	f040 8092 	bne.w	800198c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	4a64      	ldr	r2, [pc, #400]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6453      	str	r3, [r2, #68]	; 0x44
 8001878:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6313      	str	r3, [r2, #48]	; 0x30
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018b2:	2307      	movs	r3, #7
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	4852      	ldr	r0, [pc, #328]	; (8001a08 <HAL_UART_MspInit+0x1c4>)
 80018be:	f002 faaf 	bl	8003e20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80018c2:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_UART_MspInit+0x1cc>)
 80018c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d0:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e4:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ea:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001902:	4842      	ldr	r0, [pc, #264]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 8001904:	f001 fe8a 	bl	800361c <HAL_DMA_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800190e:	f7ff fd11 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
 8001918:	4a3c      	ldr	r2, [pc, #240]	; (8001a0c <HAL_UART_MspInit+0x1c8>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001920:	4a3d      	ldr	r2, [pc, #244]	; (8001a18 <HAL_UART_MspInit+0x1d4>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001924:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 800192e:	2240      	movs	r2, #64	; 0x40
 8001930:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001940:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800194c:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800195e:	482d      	ldr	r0, [pc, #180]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001960:	f001 fe5c 	bl	800361c <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800196a:	f7ff fce3 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_UART_MspInit+0x1d0>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2025      	movs	r0, #37	; 0x25
 8001980:	f001 fe15 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001984:	2025      	movs	r0, #37	; 0x25
 8001986:	f001 fe2e 	bl	80035e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800198a:	e0e1      	b.n	8001b50 <HAL_UART_MspInit+0x30c>
  else if(uartHandle->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_UART_MspInit+0x1d8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d144      	bne.n	8001a20 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_UART_MspInit+0x1c0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ce:	230c      	movs	r3, #12
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019de:	2307      	movs	r3, #7
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <HAL_UART_MspInit+0x1c4>)
 80019ea:	f002 fa19 	bl	8003e20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	2026      	movs	r0, #38	; 0x26
 80019f4:	f001 fddb 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f8:	2026      	movs	r0, #38	; 0x26
 80019fa:	f001 fdf4 	bl	80035e6 <HAL_NVIC_EnableIRQ>
}
 80019fe:	e0a7      	b.n	8001b50 <HAL_UART_MspInit+0x30c>
 8001a00:	40011000 	.word	0x40011000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	20000390 	.word	0x20000390
 8001a10:	40026440 	.word	0x40026440
 8001a14:	200003f0 	.word	0x200003f0
 8001a18:	400264b8 	.word	0x400264b8
 8001a1c:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART6)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_UART_MspInit+0x314>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	f040 8092 	bne.w	8001b50 <HAL_UART_MspInit+0x30c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_UART_MspInit+0x318>)
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	4a49      	ldr	r2, [pc, #292]	; (8001b5c <HAL_UART_MspInit+0x318>)
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_UART_MspInit+0x318>)
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_UART_MspInit+0x318>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a42      	ldr	r2, [pc, #264]	; (8001b5c <HAL_UART_MspInit+0x318>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <HAL_UART_MspInit+0x318>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a76:	2308      	movs	r3, #8
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4837      	ldr	r0, [pc, #220]	; (8001b60 <HAL_UART_MspInit+0x31c>)
 8001a82:	f002 f9cd 	bl	8003e20 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <HAL_UART_MspInit+0x324>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001a8e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001a92:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001abc:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001ac8:	4826      	ldr	r0, [pc, #152]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001aca:	f001 fda7 	bl	800361c <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0x294>
      Error_Handler();
 8001ad4:	f7ff fc2e 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_UART_MspInit+0x320>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_UART_MspInit+0x32c>)
 8001ae8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001aec:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001b24:	4811      	ldr	r0, [pc, #68]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b26:	f001 fd79 	bl	800361c <HAL_DMA_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_MspInit+0x2f0>
      Error_Handler();
 8001b30:	f7ff fc00 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_UART_MspInit+0x328>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2047      	movs	r0, #71	; 0x47
 8001b46:	f001 fd32 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b4a:	2047      	movs	r0, #71	; 0x47
 8001b4c:	f001 fd4b 	bl	80035e6 <HAL_NVIC_EnableIRQ>
}
 8001b50:	bf00      	nop
 8001b52:	3738      	adds	r7, #56	; 0x38
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	20000450 	.word	0x20000450
 8001b68:	40026428 	.word	0x40026428
 8001b6c:	200004b0 	.word	0x200004b0
 8001b70:	400264a0 	.word	0x400264a0

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7a:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b90:	4c0b      	ldr	r4, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b9e:	f7ff fd4f 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f005 fb11 	bl	80071c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff fb19 	bl	80011dc <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001bb8:	0800a320 	.word	0x0800a320
  ldr r2, =_sbss
 8001bbc:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001bc0:	20000b78 	.word	0x20000b78

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>
	...

08001bc8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bcc:	b08c      	sub	sp, #48	; 0x30
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001bd4:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <decodeGGA+0x17c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001bde:	e004      	b.n	8001bea <decodeGGA+0x22>
 8001be0:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <decodeGGA+0x17c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <decodeGGA+0x17c>)
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b56      	ldr	r3, [pc, #344]	; (8001d44 <decodeGGA+0x17c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b2c      	cmp	r3, #44	; 0x2c
 8001bf8:	d1f2      	bne.n	8001be0 <decodeGGA+0x18>
	inx++;
 8001bfa:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <decodeGGA+0x17c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <decodeGGA+0x17c>)
 8001c02:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001c04:	e004      	b.n	8001c10 <decodeGGA+0x48>
 8001c06:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <decodeGGA+0x17c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <decodeGGA+0x17c>)
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <decodeGGA+0x17c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001c1e:	d1f2      	bne.n	8001c06 <decodeGGA+0x3e>
	inx++;
 8001c20:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <decodeGGA+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <decodeGGA+0x17c>)
 8001c28:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001c2a:	e004      	b.n	8001c36 <decodeGGA+0x6e>
 8001c2c:	4b45      	ldr	r3, [pc, #276]	; (8001d44 <decodeGGA+0x17c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	4a44      	ldr	r2, [pc, #272]	; (8001d44 <decodeGGA+0x17c>)
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <decodeGGA+0x17c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b2c      	cmp	r3, #44	; 0x2c
 8001c44:	d1f2      	bne.n	8001c2c <decodeGGA+0x64>
	inx++;
 8001c46:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <decodeGGA+0x17c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a3d      	ldr	r2, [pc, #244]	; (8001d44 <decodeGGA+0x17c>)
 8001c4e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001c50:	e004      	b.n	8001c5c <decodeGGA+0x94>
 8001c52:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <decodeGGA+0x17c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a3a      	ldr	r2, [pc, #232]	; (8001d44 <decodeGGA+0x17c>)
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <decodeGGA+0x17c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b2c      	cmp	r3, #44	; 0x2c
 8001c6a:	d1f2      	bne.n	8001c52 <decodeGGA+0x8a>
	inx++;
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <decodeGGA+0x17c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <decodeGGA+0x17c>)
 8001c74:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001c76:	e004      	b.n	8001c82 <decodeGGA+0xba>
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <decodeGGA+0x17c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a31      	ldr	r2, [pc, #196]	; (8001d44 <decodeGGA+0x17c>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <decodeGGA+0x17c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c90:	d1f2      	bne.n	8001c78 <decodeGGA+0xb0>
	inx++;
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <decodeGGA+0x17c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <decodeGGA+0x17c>)
 8001c9a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001c9c:	e004      	b.n	8001ca8 <decodeGGA+0xe0>
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <decodeGGA+0x17c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <decodeGGA+0x17c>)
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <decodeGGA+0x17c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b2c      	cmp	r3, #44	; 0x2c
 8001cb6:	d1f2      	bne.n	8001c9e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <decodeGGA+0x17c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <decodeGGA+0x17c>)
 8001cc0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <decodeGGA+0x17c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b31      	cmp	r3, #49	; 0x31
 8001cd0:	d00f      	beq.n	8001cf2 <decodeGGA+0x12a>
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <decodeGGA+0x17c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b32      	cmp	r3, #50	; 0x32
 8001ce0:	d007      	beq.n	8001cf2 <decodeGGA+0x12a>
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <decodeGGA+0x17c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b36      	cmp	r3, #54	; 0x36
 8001cf0:	d106      	bne.n	8001d00 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <decodeGGA+0x17c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001cfe:	e009      	b.n	8001d14 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001d06:	2301      	movs	r3, #1
 8001d08:	e2fd      	b.n	8002306 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <decodeGGA+0x17c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <decodeGGA+0x17c>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <decodeGGA+0x17c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b2c      	cmp	r3, #44	; 0x2c
 8001d22:	d1f2      	bne.n	8001d0a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <decodeGGA+0x17c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <decodeGGA+0x17c>)
 8001d2c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	220c      	movs	r2, #12
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f005 f9ed 	bl	8007116 <memset>
	i=0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001d40:	e016      	b.n	8001d70 <decodeGGA+0x1a8>
 8001d42:	bf00      	nop
 8001d44:	20000510 	.word	0x20000510
	{
		buffer[i] = GGAbuffer[inx];
 8001d48:	4bab      	ldr	r3, [pc, #684]	; (8001ff8 <decodeGGA+0x430>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	7819      	ldrb	r1, [r3, #0]
 8001d54:	f107 020c 	add.w	r2, r7, #12
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	4413      	add	r3, r2
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
		i++;
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	3301      	adds	r3, #1
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001d66:	4ba4      	ldr	r3, [pc, #656]	; (8001ff8 <decodeGGA+0x430>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4aa2      	ldr	r2, [pc, #648]	; (8001ff8 <decodeGGA+0x430>)
 8001d6e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001d70:	4ba1      	ldr	r3, [pc, #644]	; (8001ff8 <decodeGGA+0x430>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b2c      	cmp	r3, #44	; 0x2c
 8001d7e:	d1e3      	bne.n	8001d48 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fbdd 	bl	8006544 <atoi>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a9b      	ldr	r2, [pc, #620]	; (8001ffc <decodeGGA+0x434>)
 8001d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d92:	1312      	asrs	r2, r2, #12
 8001d94:	17db      	asrs	r3, r3, #31
 8001d96:	1ad2      	subs	r2, r2, r3
 8001d98:	4b99      	ldr	r3, [pc, #612]	; (8002000 <decodeGGA+0x438>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4999      	ldr	r1, [pc, #612]	; (8002004 <decodeGGA+0x43c>)
 8001d9e:	fb81 0103 	smull	r0, r1, r1, r3
 8001da2:	1149      	asrs	r1, r1, #5
 8001da4:	17db      	asrs	r3, r3, #31
 8001da6:	1acb      	subs	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	4a97      	ldr	r2, [pc, #604]	; (8002008 <decodeGGA+0x440>)
 8001dac:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 fbc6 	bl	8006544 <atoi>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a92      	ldr	r2, [pc, #584]	; (8002004 <decodeGGA+0x43c>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	1152      	asrs	r2, r2, #5
 8001dc2:	17db      	asrs	r3, r3, #31
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4a8f      	ldr	r2, [pc, #572]	; (8002004 <decodeGGA+0x43c>)
 8001dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dcc:	1151      	asrs	r1, r2, #5
 8001dce:	17da      	asrs	r2, r3, #31
 8001dd0:	1a8a      	subs	r2, r1, r2
 8001dd2:	2164      	movs	r1, #100	; 0x64
 8001dd4:	fb01 f202 	mul.w	r2, r1, r2
 8001dd8:	1a9a      	subs	r2, r3, r2
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <decodeGGA+0x438>)
 8001ddc:	6819      	ldr	r1, [r3, #0]
 8001dde:	4b89      	ldr	r3, [pc, #548]	; (8002004 <decodeGGA+0x43c>)
 8001de0:	fb83 0301 	smull	r0, r3, r3, r1
 8001de4:	1158      	asrs	r0, r3, #5
 8001de6:	17cb      	asrs	r3, r1, #31
 8001de8:	1ac3      	subs	r3, r0, r3
 8001dea:	2064      	movs	r0, #100	; 0x64
 8001dec:	fb00 f303 	mul.w	r3, r0, r3
 8001df0:	1acb      	subs	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	4a85      	ldr	r2, [pc, #532]	; (800200c <decodeGGA+0x444>)
 8001df6:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001df8:	4b84      	ldr	r3, [pc, #528]	; (800200c <decodeGGA+0x444>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b3b      	cmp	r3, #59	; 0x3b
 8001dfe:	dd09      	ble.n	8001e14 <decodeGGA+0x24c>
	{
		min = min-60;
 8001e00:	4b82      	ldr	r3, [pc, #520]	; (800200c <decodeGGA+0x444>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3b3c      	subs	r3, #60	; 0x3c
 8001e06:	4a81      	ldr	r2, [pc, #516]	; (800200c <decodeGGA+0x444>)
 8001e08:	6013      	str	r3, [r2, #0]
		hr++;
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <decodeGGA+0x440>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a7d      	ldr	r2, [pc, #500]	; (8002008 <decodeGGA+0x440>)
 8001e12:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001e14:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <decodeGGA+0x440>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da09      	bge.n	8001e30 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001e1c:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <decodeGGA+0x440>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3318      	adds	r3, #24
 8001e22:	4a79      	ldr	r2, [pc, #484]	; (8002008 <decodeGGA+0x440>)
 8001e24:	6013      	str	r3, [r2, #0]
		daychange--;
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <decodeGGA+0x448>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	4a78      	ldr	r2, [pc, #480]	; (8002010 <decodeGGA+0x448>)
 8001e2e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001e30:	4b75      	ldr	r3, [pc, #468]	; (8002008 <decodeGGA+0x440>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b17      	cmp	r3, #23
 8001e36:	dd09      	ble.n	8001e4c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001e38:	4b73      	ldr	r3, [pc, #460]	; (8002008 <decodeGGA+0x440>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3b18      	subs	r3, #24
 8001e3e:	4a72      	ldr	r2, [pc, #456]	; (8002008 <decodeGGA+0x440>)
 8001e40:	6013      	str	r3, [r2, #0]
		daychange++;
 8001e42:	4b73      	ldr	r3, [pc, #460]	; (8002010 <decodeGGA+0x448>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a71      	ldr	r2, [pc, #452]	; (8002010 <decodeGGA+0x448>)
 8001e4a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001e4c:	4b6e      	ldr	r3, [pc, #440]	; (8002008 <decodeGGA+0x440>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001e54:	4b6d      	ldr	r3, [pc, #436]	; (800200c <decodeGGA+0x444>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fb6f 	bl	8006544 <atoi>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <decodeGGA+0x43c>)
 8001e6a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e6e:	1159      	asrs	r1, r3, #5
 8001e70:	17d3      	asrs	r3, r2, #31
 8001e72:	1acb      	subs	r3, r1, r3
 8001e74:	2164      	movs	r1, #100	; 0x64
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001e80:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <decodeGGA+0x430>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	4a5c      	ldr	r2, [pc, #368]	; (8001ff8 <decodeGGA+0x430>)
 8001e88:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	220c      	movs	r2, #12
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 f93f 	bl	8007116 <memset>
	i=0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001e9c:	e013      	b.n	8001ec6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <decodeGGA+0x430>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	7819      	ldrb	r1, [r3, #0]
 8001eaa:	f107 020c 	add.w	r2, r7, #12
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	4413      	add	r3, r2
 8001eb2:	460a      	mov	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
		i++;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	3301      	adds	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001ebc:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <decodeGGA+0x430>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <decodeGGA+0x430>)
 8001ec4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <decodeGGA+0x430>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b2c      	cmp	r3, #44	; 0x2c
 8001ed4:	d1e3      	bne.n	8001e9e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe f9d0 	bl	8000280 <strlen>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d801      	bhi.n	8001eea <decodeGGA+0x322>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e20d      	b.n	8002306 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 fb28 	bl	8006544 <atoi>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001efc:	e002      	b.n	8001f04 <decodeGGA+0x33c>
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	3301      	adds	r3, #1
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8001f10:	d1f5      	bne.n	8001efe <decodeGGA+0x336>
	j++;
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	3301      	adds	r3, #1
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe f9af 	bl	8000280 <strlen>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	4413      	add	r3, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fb06 	bl	8006544 <atoi>
 8001f38:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001f3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe faf8 	bl	8000534 <__aeabi_i2d>
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	4b32      	ldr	r3, [pc, #200]	; (8002014 <decodeGGA+0x44c>)
 8001f4a:	f7fe fc87 	bl	800085c <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4690      	mov	r8, r2
 8001f54:	4699      	mov	r9, r3
 8001f56:	69f8      	ldr	r0, [r7, #28]
 8001f58:	f7fe faec 	bl	8000534 <__aeabi_i2d>
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	460d      	mov	r5, r1
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	3302      	adds	r3, #2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fae5 	bl	8000534 <__aeabi_i2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	ec43 2b11 	vmov	d1, r2, r3
 8001f72:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001ff0 <decodeGGA+0x428>
 8001f76:	f007 f81f 	bl	8008fb8 <pow>
 8001f7a:	ec53 2b10 	vmov	r2, r3, d0
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe fc6b 	bl	800085c <__aeabi_ddiv>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	f7fe f985 	bl	800029c <__adddf3>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fe0d 	bl	8000bb8 <__aeabi_d2f>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	601a      	str	r2, [r3, #0]
	inx++;  
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <decodeGGA+0x430>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <decodeGGA+0x430>)
 8001fb0:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <decodeGGA+0x430>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <decodeGGA+0x430>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <decodeGGA+0x430>)
 8001fca:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <decodeGGA+0x430>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <decodeGGA+0x430>)
 8001fd4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	220c      	movs	r2, #12
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 f899 	bl	8007116 <memset>
	i=0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001fe8:	e02a      	b.n	8002040 <decodeGGA+0x478>
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40240000 	.word	0x40240000
 8001ff8:	20000510 	.word	0x20000510
 8001ffc:	68db8bad 	.word	0x68db8bad
 8002000:	20000004 	.word	0x20000004
 8002004:	51eb851f 	.word	0x51eb851f
 8002008:	20000514 	.word	0x20000514
 800200c:	20000518 	.word	0x20000518
 8002010:	2000051c 	.word	0x2000051c
 8002014:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8002018:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <decodeGGA+0x680>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	7819      	ldrb	r1, [r3, #0]
 8002024:	f107 020c 	add.w	r2, r7, #12
 8002028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202a:	4413      	add	r3, r2
 800202c:	460a      	mov	r2, r1
 800202e:	701a      	strb	r2, [r3, #0]
		i++;
 8002030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002032:	3301      	adds	r3, #1
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002036:	4b84      	ldr	r3, [pc, #528]	; (8002248 <decodeGGA+0x680>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	4a82      	ldr	r2, [pc, #520]	; (8002248 <decodeGGA+0x680>)
 800203e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8002040:	4b81      	ldr	r3, [pc, #516]	; (8002248 <decodeGGA+0x680>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b2c      	cmp	r3, #44	; 0x2c
 800204e:	d1e3      	bne.n	8002018 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fa75 	bl	8006544 <atoi>
 800205a:	4603      	mov	r3, r0
 800205c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8002062:	e002      	b.n	800206a <decodeGGA+0x4a2>
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	3301      	adds	r3, #1
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
 800206a:	f107 020c 	add.w	r2, r7, #12
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	4413      	add	r3, r2
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b2e      	cmp	r3, #46	; 0x2e
 8002076:	d1f5      	bne.n	8002064 <decodeGGA+0x49c>
	j++;
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	3301      	adds	r3, #1
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f8fc 	bl	8000280 <strlen>
 8002088:	4602      	mov	r2, r0
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	f107 020c 	add.w	r2, r7, #12
 8002096:	4413      	add	r3, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fa53 	bl	8006544 <atoi>
 800209e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80020a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa45 	bl	8000534 <__aeabi_i2d>
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	4b67      	ldr	r3, [pc, #412]	; (800224c <decodeGGA+0x684>)
 80020b0:	f7fe fbd4 	bl	800085c <__aeabi_ddiv>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4690      	mov	r8, r2
 80020ba:	4699      	mov	r9, r3
 80020bc:	69f8      	ldr	r0, [r7, #28]
 80020be:	f7fe fa39 	bl	8000534 <__aeabi_i2d>
 80020c2:	4604      	mov	r4, r0
 80020c4:	460d      	mov	r5, r1
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	3302      	adds	r3, #2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa32 	bl	8000534 <__aeabi_i2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	ec43 2b11 	vmov	d1, r2, r3
 80020d8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8002240 <decodeGGA+0x678>
 80020dc:	f006 ff6c 	bl	8008fb8 <pow>
 80020e0:	ec53 2b10 	vmov	r2, r3, d0
 80020e4:	4620      	mov	r0, r4
 80020e6:	4629      	mov	r1, r5
 80020e8:	f7fe fbb8 	bl	800085c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4640      	mov	r0, r8
 80020f2:	4649      	mov	r1, r9
 80020f4:	f7fe f8d2 	bl	800029c <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	f7fe fd5a 	bl	8000bb8 <__aeabi_d2f>
 8002104:	4603      	mov	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]
	inx++;
 800210e:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <decodeGGA+0x680>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <decodeGGA+0x680>)
 8002116:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002118:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <decodeGGA+0x680>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002128:	4b47      	ldr	r3, [pc, #284]	; (8002248 <decodeGGA+0x680>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	4a46      	ldr	r2, [pc, #280]	; (8002248 <decodeGGA+0x680>)
 8002130:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8002132:	4b45      	ldr	r3, [pc, #276]	; (8002248 <decodeGGA+0x680>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	4a43      	ldr	r2, [pc, #268]	; (8002248 <decodeGGA+0x680>)
 800213a:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800213c:	4b42      	ldr	r3, [pc, #264]	; (8002248 <decodeGGA+0x680>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a41      	ldr	r2, [pc, #260]	; (8002248 <decodeGGA+0x680>)
 8002144:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <decodeGGA+0x680>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a3e      	ldr	r2, [pc, #248]	; (8002248 <decodeGGA+0x680>)
 800214e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	220c      	movs	r2, #12
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f004 ffdc 	bl	8007116 <memset>
	i=0;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8002162:	e013      	b.n	800218c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8002164:	4b38      	ldr	r3, [pc, #224]	; (8002248 <decodeGGA+0x680>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	7819      	ldrb	r1, [r3, #0]
 8002170:	f107 020c 	add.w	r2, r7, #12
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	4413      	add	r3, r2
 8002178:	460a      	mov	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
		i++;
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	3301      	adds	r3, #1
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002182:	4b31      	ldr	r3, [pc, #196]	; (8002248 <decodeGGA+0x680>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <decodeGGA+0x680>)
 800218a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800218c:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <decodeGGA+0x680>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b2c      	cmp	r3, #44	; 0x2c
 800219a:	d1e3      	bne.n	8002164 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 f9cf 	bl	8006544 <atoi>
 80021a6:	4602      	mov	r2, r0
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <decodeGGA+0x680>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	4a25      	ldr	r2, [pc, #148]	; (8002248 <decodeGGA+0x680>)
 80021b4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80021b6:	e004      	b.n	80021c2 <decodeGGA+0x5fa>
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <decodeGGA+0x680>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <decodeGGA+0x680>)
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <decodeGGA+0x680>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b2c      	cmp	r3, #44	; 0x2c
 80021d0:	d1f2      	bne.n	80021b8 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <decodeGGA+0x680>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <decodeGGA+0x680>)
 80021da:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	220c      	movs	r2, #12
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 ff96 	bl	8007116 <memset>
	i=0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80021ee:	e013      	b.n	8002218 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <decodeGGA+0x680>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	7819      	ldrb	r1, [r3, #0]
 80021fc:	f107 020c 	add.w	r2, r7, #12
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	4413      	add	r3, r2
 8002204:	460a      	mov	r2, r1
 8002206:	701a      	strb	r2, [r3, #0]
		i++;
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	3301      	adds	r3, #1
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <decodeGGA+0x680>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <decodeGGA+0x680>)
 8002216:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <decodeGGA+0x680>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b2c      	cmp	r3, #44	; 0x2c
 8002226:	d1e3      	bne.n	80021f0 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4618      	mov	r0, r3
 800222e:	f004 f989 	bl	8006544 <atoi>
 8002232:	4603      	mov	r3, r0
 8002234:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800223a:	e00c      	b.n	8002256 <decodeGGA+0x68e>
 800223c:	f3af 8000 	nop.w
 8002240:	00000000 	.word	0x00000000
 8002244:	40240000 	.word	0x40240000
 8002248:	20000510 	.word	0x20000510
 800224c:	40590000 	.word	0x40590000
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	3301      	adds	r3, #1
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
 8002256:	f107 020c 	add.w	r2, r7, #12
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b2e      	cmp	r3, #46	; 0x2e
 8002262:	d1f5      	bne.n	8002250 <decodeGGA+0x688>
	j++;
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	3301      	adds	r3, #1
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f806 	bl	8000280 <strlen>
 8002274:	4602      	mov	r2, r0
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	f107 020c 	add.w	r2, r7, #12
 8002282:	4413      	add	r3, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f004 f95d 	bl	8006544 <atoi>
 800228a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800228c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f94f 	bl	8000534 <__aeabi_i2d>
 8002296:	4604      	mov	r4, r0
 8002298:	460d      	mov	r5, r1
 800229a:	69f8      	ldr	r0, [r7, #28]
 800229c:	f7fe f94a 	bl	8000534 <__aeabi_i2d>
 80022a0:	4680      	mov	r8, r0
 80022a2:	4689      	mov	r9, r1
 80022a4:	6a38      	ldr	r0, [r7, #32]
 80022a6:	f7fe f945 	bl	8000534 <__aeabi_i2d>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	ec43 2b11 	vmov	d1, r2, r3
 80022b2:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002310 <decodeGGA+0x748>
 80022b6:	f006 fe7f 	bl	8008fb8 <pow>
 80022ba:	ec53 2b10 	vmov	r2, r3, d0
 80022be:	4640      	mov	r0, r8
 80022c0:	4649      	mov	r1, r9
 80022c2:	f7fe facb 	bl	800085c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fd ffe5 	bl	800029c <__adddf3>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fc6d 	bl	8000bb8 <__aeabi_d2f>
 80022de:	4603      	mov	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	621a      	str	r2, [r3, #32]

	inx++;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <decodeGGA+0x750>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <decodeGGA+0x750>)
 80022f0:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <decodeGGA+0x750>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8002304:	2300      	movs	r3, #0

}
 8002306:	4618      	mov	r0, r3
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002310:	00000000 	.word	0x00000000
 8002314:	40240000 	.word	0x40240000
 8002318:	20000510 	.word	0x20000510

0800231c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <Ringbuf_init+0x3c>)
 8002322:	4a0e      	ldr	r2, [pc, #56]	; (800235c <Ringbuf_init+0x40>)
 8002324:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <Ringbuf_init+0x44>)
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <Ringbuf_init+0x48>)
 800232a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <Ringbuf_init+0x4c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <Ringbuf_init+0x4c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <Ringbuf_init+0x4c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <Ringbuf_init+0x4c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0220 	orr.w	r2, r2, #32
 800234a:	60da      	str	r2, [r3, #12]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000934 	.word	0x20000934
 800235c:	20000524 	.word	0x20000524
 8002360:	20000938 	.word	0x20000938
 8002364:	2000072c 	.word	0x2000072c
 8002368:	20000308 	.word	0x20000308

0800236c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800237e:	3301      	adds	r3, #1
 8002380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002384:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d009      	beq.n	80023a6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	79f9      	ldrb	r1, [r7, #7]
 800239c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <Uart_read+0x54>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <Uart_read+0x54>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d102      	bne.n	80023d4 <Uart_read+0x20>
  {
    return -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d2:	e013      	b.n	80023fc <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <Uart_read+0x54>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <Uart_read+0x54>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <Uart_read+0x54>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <Uart_read+0x54>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	20000934 	.word	0x20000934

0800240c <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <IsDataAvailable+0x30>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002418:	b29a      	uxth	r2, r3
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <IsDataAvailable+0x30>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002422:	b29b      	uxth	r3, r3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	b29b      	uxth	r3, r3
 8002428:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800242c:	b29b      	uxth	r3, r3
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000934 	.word	0x20000934

08002440 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <Uart_peek+0x38>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <Uart_peek+0x38>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002454:	429a      	cmp	r2, r3
 8002456:	d102      	bne.n	800245e <Uart_peek+0x1e>
  {
    return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245c:	e006      	b.n	800246c <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <Uart_peek+0x38>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <Uart_peek+0x38>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800246a:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000934 	.word	0x20000934

0800247c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fd fef8 	bl	8000280 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002498:	e01e      	b.n	80024d8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800249a:	4b36      	ldr	r3, [pc, #216]	; (8002574 <Copy_upto+0xf8>)
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <Copy_upto+0xf8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6838      	ldr	r0, [r7, #0]
 80024aa:	4403      	add	r3, r0
 80024ac:	5c8a      	ldrb	r2, [r1, r2]
 80024ae:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <Copy_upto+0xf8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <Copy_upto+0xf8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	3301      	adds	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80024cc:	bf00      	nop
 80024ce:	f7ff ff9d 	bl	800240c <IsDataAvailable>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0fa      	beq.n	80024ce <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80024d8:	f7ff ffb2 	bl	8002440 <Uart_peek>
 80024dc:	4601      	mov	r1, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4299      	cmp	r1, r3
 80024e8:	d1d7      	bne.n	800249a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80024ea:	e027      	b.n	800253c <Copy_upto+0xc0>
	{
		so_far++;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80024f2:	f7ff ff5f 	bl	80023b4 <Uart_read>
 80024f6:	4601      	mov	r1, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	613a      	str	r2, [r7, #16]
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4413      	add	r3, r2
 8002504:	b2ca      	uxtb	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d101      	bne.n	8002514 <Copy_upto+0x98>
 8002510:	2301      	movs	r3, #1
 8002512:	e02a      	b.n	800256a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <Copy_upto+0xfc>)
 8002516:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800251a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800251c:	bf00      	nop
 800251e:	f7ff ff75 	bl	800240c <IsDataAvailable>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <Copy_upto+0xb4>
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <Copy_upto+0xfc>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f6      	bne.n	800251e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <Copy_upto+0xfc>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <Copy_upto+0xc0>
 8002538:	2300      	movs	r3, #0
 800253a:	e016      	b.n	800256a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 800253c:	f7ff ff80 	bl	8002440 <Uart_peek>
 8002540:	4601      	mov	r1, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4299      	cmp	r1, r3
 800254c:	d0ce      	beq.n	80024ec <Copy_upto+0x70>
	}

	if (so_far != len)
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	429a      	cmp	r2, r3
 8002554:	d002      	beq.n	800255c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
		goto again;
 800255a:	e79d      	b.n	8002498 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d101      	bne.n	8002568 <Copy_upto+0xec>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <Copy_upto+0xee>
	else return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000934 	.word	0x20000934
 8002578:	20000520 	.word	0x20000520

0800257c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fd fe79 	bl	8000280 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002592:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <Wait_for+0x108>)
 8002594:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002598:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800259a:	bf00      	nop
 800259c:	f7ff ff36 	bl	800240c <IsDataAvailable>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <Wait_for+0x32>
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <Wait_for+0x108>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f6      	bne.n	800259c <Wait_for+0x20>
	if (timeout == 0) return 0;
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <Wait_for+0x108>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <Wait_for+0x6e>
 80025b6:	2300      	movs	r3, #0
 80025b8:	e060      	b.n	800267c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <Wait_for+0x10c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <Wait_for+0x10c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d00b      	beq.n	80025e6 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <Wait_for+0x10c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <Wait_for+0x10c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025e4:	e001      	b.n	80025ea <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e048      	b.n	800267c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80025ea:	f7ff ff29 	bl	8002440 <Uart_peek>
 80025ee:	4601      	mov	r1, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4299      	cmp	r1, r3
 80025fa:	d1de      	bne.n	80025ba <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80025fc:	e027      	b.n	800264e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	3301      	adds	r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <Wait_for+0x10c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <Wait_for+0x10c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002616:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d101      	bne.n	8002626 <Wait_for+0xaa>
 8002622:	2301      	movs	r3, #1
 8002624:	e02a      	b.n	800267c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <Wait_for+0x108>)
 8002628:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800262c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800262e:	bf00      	nop
 8002630:	f7ff feec 	bl	800240c <IsDataAvailable>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <Wait_for+0xc6>
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <Wait_for+0x108>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f6      	bne.n	8002630 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <Wait_for+0x108>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <Wait_for+0xd2>
 800264a:	2300      	movs	r3, #0
 800264c:	e016      	b.n	800267c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800264e:	f7ff fef7 	bl	8002440 <Uart_peek>
 8002652:	4601      	mov	r1, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4299      	cmp	r1, r3
 800265e:	d0ce      	beq.n	80025fe <Wait_for+0x82>
	}

	if (so_far != len)
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	d002      	beq.n	800266e <Wait_for+0xf2>
	{
		so_far = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
		goto again;
 800266c:	e791      	b.n	8002592 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d101      	bne.n	800267a <Wait_for+0xfe>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <Wait_for+0x100>
	else return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000520 	.word	0x20000520
 8002688:	20000934 	.word	0x20000934

0800268c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <Uart_isr+0x4a>
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <Uart_isr+0xb4>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fe4c 	bl	800236c <store_char>
        return;
 80026d4:	e031      	b.n	800273a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02c      	beq.n	800273a <Uart_isr+0xae>
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d027      	beq.n	800273a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <Uart_isr+0xb8>)
 80026ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <Uart_isr+0xb8>)
 80026f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d108      	bne.n	800270c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002708:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800270a:	e015      	b.n	8002738 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <Uart_isr+0xb8>)
 800270e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <Uart_isr+0xb8>)
 8002714:	5cd3      	ldrb	r3, [r2, r3]
 8002716:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <Uart_isr+0xb8>)
 800271a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <Uart_isr+0xb8>)
 8002726:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	7bba      	ldrb	r2, [r7, #14]
 8002736:	605a      	str	r2, [r3, #4]
    	return;
 8002738:	bf00      	nop
    }
}
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000934 	.word	0x20000934
 8002744:	2000072c 	.word	0x2000072c

08002748 <gps_GGA_routine>:
uint8_t ggaflag = -1;
uint8_t rmcflag = 1;

GPSSTRUCT gpsData;

void gps_GGA_routine(){
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	if (Wait_for("GGA") == 1){
 800274c:	480a      	ldr	r0, [pc, #40]	; (8002778 <gps_GGA_routine+0x30>)
 800274e:	f7ff ff15 	bl	800257c <Wait_for>
 8002752:	4603      	mov	r3, r0
 8002754:	2b01      	cmp	r3, #1
 8002756:	d10d      	bne.n	8002774 <gps_GGA_routine+0x2c>
		Copy_upto("*", GGA);
 8002758:	4908      	ldr	r1, [pc, #32]	; (800277c <gps_GGA_routine+0x34>)
 800275a:	4809      	ldr	r0, [pc, #36]	; (8002780 <gps_GGA_routine+0x38>)
 800275c:	f7ff fe8e 	bl	800247c <Copy_upto>
		decodeGGA(GGA, &gpsData.ggastruct);
 8002760:	4908      	ldr	r1, [pc, #32]	; (8002784 <gps_GGA_routine+0x3c>)
 8002762:	4806      	ldr	r0, [pc, #24]	; (800277c <gps_GGA_routine+0x34>)
 8002764:	f7ff fa30 	bl	8001bc8 <decodeGGA>
		ggaflag *= -1;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <gps_GGA_routine+0x40>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	425b      	negs	r3, r3
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <gps_GGA_routine+0x40>)
 8002772:	701a      	strb	r2, [r3, #0]
//	if (Wait_for("RMC") == 1){
//		Copy_upto("*", RMC);
//		decodeRMC(RMC, &gpsData.rmcstruct);
//		rmcflag *= -1;
//	}
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	08009f40 	.word	0x08009f40
 800277c:	2000093c 	.word	0x2000093c
 8002780:	08009f44 	.word	0x08009f44
 8002784:	200009a0 	.word	0x200009a0
 8002788:	20000008 	.word	0x20000008

0800278c <LCD_Touch_OnDown>:

/*
 * Indicates the start of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnDown() {
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
	if (m_touch_state == LCD_TOUCH_IDLE) {
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <LCD_Touch_OnDown+0x1c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <LCD_Touch_OnDown+0x12>
		m_touch_state = LCD_TOUCH_DOWN;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <LCD_Touch_OnDown+0x1c>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
	}
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	200009e4 	.word	0x200009e4

080027ac <LCD_Touch_OnUp>:

/*
 * Indicates the finish of a touch.
 * Should be called from EXTIx_IRQHandler interrupt only.
 */
void LCD_Touch_OnUp() {
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	m_touch_state = LCD_TOUCH_IDLE;
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <LCD_Touch_OnUp+0x24>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]

	if (m_last_point_ref != NULL) {
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <LCD_Touch_OnUp+0x28>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <LCD_Touch_OnUp+0x1a>
		// Mark the last read touch point as TOUCH_UP.
		// Note that it changes the point state that the user specified
		// as an argument to LCD_Touch_Read function.
		m_last_point_ref->state = LCD_TOUCH_UP;
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <LCD_Touch_OnUp+0x28>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2203      	movs	r2, #3
 80027c4:	721a      	strb	r2, [r3, #8]
	}
//	LCD_Touch_Draw_OnUp();
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	200009e4 	.word	0x200009e4
 80027d4:	200009e8 	.word	0x200009e8

080027d8 <lora_init>:

char coordinates_buf[4];

extern GPSSTRUCT gpsData;

void lora_init(UART_HandleTypeDef *huart){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 80027e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e4:	4810      	ldr	r0, [pc, #64]	; (8002828 <lora_init+0x50>)
 80027e6:	f001 fc9f 	bl	8004128 <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <lora_init+0x54>)
 80027f0:	701a      	strb	r2, [r3, #0]
	lora_huart = huart;
 80027f2:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <lora_init+0x58>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6013      	str	r3, [r2, #0]
	lora_read_model_data();
 80027f8:	f000 f876 	bl	80028e8 <lora_read_model_data>
	lora_set_ADDH(0);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f000 f89f 	bl	8002940 <lora_set_ADDH>
	lora_set_ADDL(0);
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f8ac 	bl	8002960 <lora_set_ADDL>
	lora_set_speed(0b00011000);
 8002808:	2018      	movs	r0, #24
 800280a:	f000 f8b9 	bl	8002980 <lora_set_speed>
	lora_set_channel(0b00000110);
 800280e:	2006      	movs	r0, #6
 8002810:	f000 f8c6 	bl	80029a0 <lora_set_channel>
	lora_set_option(0b01000100);
 8002814:	2044      	movs	r0, #68	; 0x44
 8002816:	f000 f8d3 	bl	80029c0 <lora_set_option>
	lora_save_param(PERMANENT);
 800281a:	20c0      	movs	r0, #192	; 0xc0
 800281c:	f000 f8e0 	bl	80029e0 <lora_save_param>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40020400 	.word	0x40020400
 800282c:	20000a0f 	.word	0x20000a0f
 8002830:	200009ec 	.word	0x200009ec

08002834 <lora_set_mode>:

void lora_set_mode(LORA_Mode mode){
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(LORA_PIN_RECOVER);
 800283e:	2032      	movs	r0, #50	; 0x32
 8002840:	f000 fb54 	bl	8002eec <HAL_Delay>
	switch(mode){
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d83e      	bhi.n	80028c8 <lora_set_mode+0x94>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <lora_set_mode+0x1c>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002861 	.word	0x08002861
 8002854:	0800287b 	.word	0x0800287b
 8002858:	08002895 	.word	0x08002895
 800285c:	080028af 	.word	0x080028af
	case LORA_NORMAL_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002866:	481e      	ldr	r0, [pc, #120]	; (80028e0 <lora_set_mode+0xac>)
 8002868:	f001 fc76 	bl	8004158 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002872:	481c      	ldr	r0, [pc, #112]	; (80028e4 <lora_set_mode+0xb0>)
 8002874:	f001 fc70 	bl	8004158 <HAL_GPIO_WritePin>
		break;
 8002878:	e026      	b.n	80028c8 <lora_set_mode+0x94>
	case LORA_WAKEUP_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 1);
 800287a:	2201      	movs	r2, #1
 800287c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002880:	4817      	ldr	r0, [pc, #92]	; (80028e0 <lora_set_mode+0xac>)
 8002882:	f001 fc69 	bl	8004158 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288c:	4815      	ldr	r0, [pc, #84]	; (80028e4 <lora_set_mode+0xb0>)
 800288e:	f001 fc63 	bl	8004158 <HAL_GPIO_WritePin>
		break;
 8002892:	e019      	b.n	80028c8 <lora_set_mode+0x94>
	case LORA_POWERSAVING_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800289a:	4811      	ldr	r0, [pc, #68]	; (80028e0 <lora_set_mode+0xac>)
 800289c:	f001 fc5c 	bl	8004158 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 1);
 80028a0:	2201      	movs	r2, #1
 80028a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a6:	480f      	ldr	r0, [pc, #60]	; (80028e4 <lora_set_mode+0xb0>)
 80028a8:	f001 fc56 	bl	8004158 <HAL_GPIO_WritePin>
		break;
 80028ac:	e00c      	b.n	80028c8 <lora_set_mode+0x94>
	case LORA_PROGRAM_MODE:
		HAL_GPIO_WritePin(M0_Port, M0_Pin, 1);
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b4:	480a      	ldr	r0, [pc, #40]	; (80028e0 <lora_set_mode+0xac>)
 80028b6:	f001 fc4f 	bl	8004158 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_Port, M1_Pin, 1);
 80028ba:	2201      	movs	r2, #1
 80028bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c0:	4808      	ldr	r0, [pc, #32]	; (80028e4 <lora_set_mode+0xb0>)
 80028c2:	f001 fc49 	bl	8004158 <HAL_GPIO_WritePin>
		break;
 80028c6:	bf00      	nop
	}
	HAL_Delay(LORA_PIN_RECOVER);
 80028c8:	2032      	movs	r0, #50	; 0x32
 80028ca:	f000 fb0f 	bl	8002eec <HAL_Delay>
	lora_clear_buffer();
 80028ce:	f000 f8cb 	bl	8002a68 <lora_clear_buffer>
	lora_complete_task(200);
 80028d2:	20c8      	movs	r0, #200	; 0xc8
 80028d4:	f000 f8e8 	bl	8002aa8 <lora_complete_task>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400

080028e8 <lora_read_model_data>:

void lora_read_model_data(){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	lora_txbuff[0] = 0xc1;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <lora_read_model_data+0x4c>)
 80028ee:	22c1      	movs	r2, #193	; 0xc1
 80028f0:	701a      	strb	r2, [r3, #0]
	lora_txbuff[1] = 0xc1;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <lora_read_model_data+0x4c>)
 80028f4:	22c1      	movs	r2, #193	; 0xc1
 80028f6:	705a      	strb	r2, [r3, #1]
	lora_txbuff[2] = 0xc1;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <lora_read_model_data+0x4c>)
 80028fa:	22c1      	movs	r2, #193	; 0xc1
 80028fc:	709a      	strb	r2, [r3, #2]

	memset(lora_param, 0, 6);
 80028fe:	2206      	movs	r2, #6
 8002900:	2100      	movs	r1, #0
 8002902:	480d      	ldr	r0, [pc, #52]	; (8002938 <lora_read_model_data+0x50>)
 8002904:	f004 fc07 	bl	8007116 <memset>

	lora_set_mode(LORA_PROGRAM_MODE);
 8002908:	2003      	movs	r0, #3
 800290a:	f7ff ff93 	bl	8002834 <lora_set_mode>

	HAL_UART_Transmit_DMA(lora_huart, lora_txbuff, 3);
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <lora_read_model_data+0x54>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2203      	movs	r2, #3
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <lora_read_model_data+0x4c>)
 8002916:	4618      	mov	r0, r3
 8002918:	f002 fbfc 	bl	8005114 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(lora_huart, lora_param, 6);
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <lora_read_model_data+0x54>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2206      	movs	r2, #6
 8002922:	4905      	ldr	r1, [pc, #20]	; (8002938 <lora_read_model_data+0x50>)
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fc73 	bl	8005210 <HAL_UART_Receive_DMA>
	lora_set_mode(LORA_NORMAL_MODE);
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff ff82 	bl	8002834 <lora_set_mode>
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200009f8 	.word	0x200009f8
 8002938:	20000a08 	.word	0x20000a08
 800293c:	200009ec 	.word	0x200009ec

08002940 <lora_set_ADDH>:

void lora_receive_callback(UART_HandleTypeDef *huart){
	if (huart->Instance != lora_huart->Instance)return;
}

void lora_set_ADDH(uint8_t val){
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
	lora.addh = val;
 800294a:	4a04      	ldr	r2, [pc, #16]	; (800295c <lora_set_ADDH+0x1c>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	7013      	strb	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	200009f0 	.word	0x200009f0

08002960 <lora_set_ADDL>:

void lora_set_ADDL(uint8_t val){
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	lora.addl = val;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <lora_set_ADDL+0x1c>)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	7053      	strb	r3, [r2, #1]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	200009f0 	.word	0x200009f0

08002980 <lora_set_speed>:

void lora_set_speed(uint8_t val){
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
	lora.speed = val;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <lora_set_speed+0x1c>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	7093      	strb	r3, [r2, #2]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	200009f0 	.word	0x200009f0

080029a0 <lora_set_channel>:

void lora_set_channel(uint8_t val){
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	lora.channel = val;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <lora_set_channel+0x1c>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	70d3      	strb	r3, [r2, #3]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	200009f0 	.word	0x200009f0

080029c0 <lora_set_option>:

void lora_set_option(uint8_t val){
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
	lora.option = val;
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <lora_set_option+0x1c>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	7113      	strb	r3, [r2, #4]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	200009f0 	.word	0x200009f0

080029e0 <lora_save_param>:

void lora_save_param(uint8_t val){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
	lora_txbuff[0] = val;
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <lora_save_param+0x4c>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	7013      	strb	r3, [r2, #0]
	lora_txbuff[1] = lora.addh;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <lora_save_param+0x50>)
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <lora_save_param+0x4c>)
 80029f6:	705a      	strb	r2, [r3, #1]
	lora_txbuff[2] = lora.addl;
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <lora_save_param+0x50>)
 80029fa:	785a      	ldrb	r2, [r3, #1]
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <lora_save_param+0x4c>)
 80029fe:	709a      	strb	r2, [r3, #2]
	lora_txbuff[3] = lora.speed;
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <lora_save_param+0x50>)
 8002a02:	789a      	ldrb	r2, [r3, #2]
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <lora_save_param+0x4c>)
 8002a06:	70da      	strb	r2, [r3, #3]
	lora_txbuff[4] = lora.channel;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <lora_save_param+0x50>)
 8002a0a:	78da      	ldrb	r2, [r3, #3]
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <lora_save_param+0x4c>)
 8002a0e:	711a      	strb	r2, [r3, #4]
	lora_txbuff[5] = lora.option;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <lora_save_param+0x50>)
 8002a12:	791a      	ldrb	r2, [r3, #4]
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <lora_save_param+0x4c>)
 8002a16:	715a      	strb	r2, [r3, #5]

	lora_serial_transmit(lora_txbuff, 6);
 8002a18:	2106      	movs	r1, #6
 8002a1a:	4804      	ldr	r0, [pc, #16]	; (8002a2c <lora_save_param+0x4c>)
 8002a1c:	f000 f80a 	bl	8002a34 <lora_serial_transmit>

	lora_read_model_data();
 8002a20:	f7ff ff62 	bl	80028e8 <lora_read_model_data>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200009f8 	.word	0x200009f8
 8002a30:	200009f0 	.word	0x200009f0

08002a34 <lora_serial_transmit>:

void lora_serial_transmit(uint8_t *data, uint8_t len){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
	lora_set_mode(LORA_PROGRAM_MODE);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f7ff fef7 	bl	8002834 <lora_set_mode>
	HAL_UART_Transmit_DMA(lora_huart, data, len);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <lora_serial_transmit+0x30>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fb5f 	bl	8005114 <HAL_UART_Transmit_DMA>
	lora_set_mode(LORA_NORMAL_MODE);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7ff feec 	bl	8002834 <lora_set_mode>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200009ec 	.word	0x200009ec

08002a68 <lora_clear_buffer>:

void lora_clear_buffer(){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
	unsigned long time = HAL_GetTick();
 8002a6e:	f000 fa31 	bl	8002ed4 <HAL_GetTick>
 8002a72:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() < time + 500){
 8002a74:	e006      	b.n	8002a84 <lora_clear_buffer+0x1c>
		HAL_UART_Receive_DMA(lora_huart, &lora_dummy_rxbuff, 1);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <lora_clear_buffer+0x38>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <lora_clear_buffer+0x3c>)
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fbc6 	bl	8005210 <HAL_UART_Receive_DMA>
	while(HAL_GetTick() < time + 500){
 8002a84:	f000 fa26 	bl	8002ed4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3f0      	bcc.n	8002a76 <lora_clear_buffer+0xe>
	}
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200009ec 	.word	0x200009ec
 8002aa4:	20000a0e 	.word	0x20000a0e

08002aa8 <lora_complete_task>:

void lora_complete_task(unsigned long timeout){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	unsigned long time = HAL_GetTick();
 8002ab0:	f000 fa10 	bl	8002ed4 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 8002ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002aba:	4818      	ldr	r0, [pc, #96]	; (8002b1c <lora_complete_task+0x74>)
 8002abc:	f001 fb34 	bl	8004128 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <lora_complete_task+0x78>)
 8002ac6:	701a      	strb	r2, [r3, #0]
	if (((unsigned long) (time + timeout)) == 0){
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <lora_complete_task+0x46>
		time = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
	}
	while (HAL_GPIO_ReadPin(AUX_Port, AUX_Pin) == 0){
 8002ad6:	e00a      	b.n	8002aee <lora_complete_task+0x46>
		HAL_Delay(LORA_PIN_RECOVER);
 8002ad8:	2032      	movs	r0, #50	; 0x32
 8002ada:	f000 fa07 	bl	8002eec <HAL_Delay>
		if (HAL_GetTick() > time + timeout)break;
 8002ade:	f000 f9f9 	bl	8002ed4 <HAL_GetTick>
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4299      	cmp	r1, r3
 8002aec:	d808      	bhi.n	8002b00 <lora_complete_task+0x58>
	while (HAL_GPIO_ReadPin(AUX_Port, AUX_Pin) == 0){
 8002aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002af2:	480a      	ldr	r0, [pc, #40]	; (8002b1c <lora_complete_task+0x74>)
 8002af4:	f001 fb18 	bl	8004128 <HAL_GPIO_ReadPin>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ec      	beq.n	8002ad8 <lora_complete_task+0x30>
 8002afe:	e000      	b.n	8002b02 <lora_complete_task+0x5a>
		if (HAL_GetTick() > time + timeout)break;
 8002b00:	bf00      	nop
	}
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 8002b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b06:	4805      	ldr	r0, [pc, #20]	; (8002b1c <lora_complete_task+0x74>)
 8002b08:	f001 fb0e 	bl	8004128 <HAL_GPIO_ReadPin>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <lora_complete_task+0x78>)
 8002b12:	701a      	strb	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	20000a0f 	.word	0x20000a0f

08002b24 <lora_wireless_transmit_routine>:
	HAL_UART_Receive_DMA(lora_huart, rxdummy, 5);
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
//	lora_complete_task(1000);
}

void lora_wireless_transmit_routine(){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
//	memcpy(lora_data_tx.dummy, dummy, 5);
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 8002b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b2c:	4817      	ldr	r0, [pc, #92]	; (8002b8c <lora_wireless_transmit_routine+0x68>)
 8002b2e:	f001 fafb 	bl	8004128 <HAL_GPIO_ReadPin>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <lora_wireless_transmit_routine+0x6c>)
 8002b38:	701a      	strb	r2, [r3, #0]

	static uint32_t delay = 0;
	if(HAL_GetTick() < delay + 1000)return;
 8002b3a:	f000 f9cb 	bl	8002ed4 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <lora_wireless_transmit_routine+0x70>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d31d      	bcc.n	8002b88 <lora_wireless_transmit_routine+0x64>
	delay = HAL_GetTick();
 8002b4c:	f000 f9c2 	bl	8002ed4 <HAL_GetTick>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <lora_wireless_transmit_routine+0x70>)
 8002b54:	6013      	str	r3, [r2, #0]
	lora_encode_gps();
 8002b56:	f000 f825 	bl	8002ba4 <lora_encode_gps>
	HAL_UART_Transmit_DMA(lora_huart, lora_tx_gps, 23);
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <lora_wireless_transmit_routine+0x74>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2217      	movs	r2, #23
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <lora_wireless_transmit_routine+0x78>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 fad6 	bl	8005114 <HAL_UART_Transmit_DMA>
	txdummy[3]++;
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <lora_wireless_transmit_routine+0x7c>)
 8002b6a:	78db      	ldrb	r3, [r3, #3]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <lora_wireless_transmit_routine+0x7c>)
 8002b72:	70da      	strb	r2, [r3, #3]
	aux = HAL_GPIO_ReadPin(AUX_Port, AUX_Pin);
 8002b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b78:	4804      	ldr	r0, [pc, #16]	; (8002b8c <lora_wireless_transmit_routine+0x68>)
 8002b7a:	f001 fad5 	bl	8004128 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <lora_wireless_transmit_routine+0x6c>)
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e000      	b.n	8002b8a <lora_wireless_transmit_routine+0x66>
	if(HAL_GetTick() < delay + 1000)return;
 8002b88:	bf00      	nop
//	lora_complete_task(1000);
}
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	20000a0f 	.word	0x20000a0f
 8002b94:	20000a18 	.word	0x20000a18
 8002b98:	200009ec 	.word	0x200009ec
 8002b9c:	20000014 	.word	0x20000014
 8002ba0:	2000000c 	.word	0x2000000c

08002ba4 <lora_encode_gps>:

void lora_encode_gps(void){
 8002ba4:	b5b0      	push	{r4, r5, r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
	for (int x=0; x<2; x++){
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e074      	b.n	8002c9a <lora_encode_gps+0xf6>
		int front;
		float back;
		if(x == 0 ){
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d123      	bne.n	8002bfe <lora_encode_gps+0x5a>
			front = floor(gpsData.ggastruct.lcation.latitude);
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <lora_encode_gps+0x188>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fccc 	bl	8000558 <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	ec43 2b10 	vmov	d0, r2, r3
 8002bc8:	f006 fa72 	bl	80090b0 <floor>
 8002bcc:	ec53 2b10 	vmov	r2, r3, d0
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f7fd ffc8 	bl	8000b68 <__aeabi_d2iz>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	613b      	str	r3, [r7, #16]
			back = 100.0*(gpsData.ggastruct.lcation.latitude - (float)front);
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <lora_encode_gps+0x188>)
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002d30 <lora_encode_gps+0x18c>
 8002bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf8:	edc7 7a03 	vstr	s15, [r7, #12]
 8002bfc:	e025      	b.n	8002c4a <lora_encode_gps+0xa6>
		}
		else if (x == 1){
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d122      	bne.n	8002c4a <lora_encode_gps+0xa6>
			front = floor(gpsData.ggastruct.lcation.longitude);
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <lora_encode_gps+0x188>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fca5 	bl	8000558 <__aeabi_f2d>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	ec43 2b10 	vmov	d0, r2, r3
 8002c16:	f006 fa4b 	bl	80090b0 <floor>
 8002c1a:	ec53 2b10 	vmov	r2, r3, d0
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ffa1 	bl	8000b68 <__aeabi_d2iz>
 8002c26:	4603      	mov	r3, r0
 8002c28:	613b      	str	r3, [r7, #16]
			back = 100.0*(gpsData.ggastruct.lcation.longitude - (float)front);
 8002c2a:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <lora_encode_gps+0x188>)
 8002c2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d30 <lora_encode_gps+0x18c>
 8002c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c46:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		coordinates[x] = (float)(front) + ((float)(back)/60.0);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	ee17 0a90 	vmov	r0, s15
 8002c58:	f7fd fc7e 	bl	8000558 <__aeabi_f2d>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	460d      	mov	r5, r1
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7fd fc79 	bl	8000558 <__aeabi_f2d>
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <lora_encode_gps+0x190>)
 8002c6c:	f7fd fdf6 	bl	800085c <__aeabi_ddiv>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fb10 	bl	800029c <__adddf3>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ff98 	bl	8000bb8 <__aeabi_d2f>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	492b      	ldr	r1, [pc, #172]	; (8002d38 <lora_encode_gps+0x194>)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	601a      	str	r2, [r3, #0]
	for (int x=0; x<2; x++){
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	3301      	adds	r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	dd87      	ble.n	8002bb0 <lora_encode_gps+0xc>
	}
	uint8_t h = (uint8_t)(gpsData.ggastruct.tim.hour);
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <lora_encode_gps+0x188>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	72fb      	strb	r3, [r7, #11]
	uint8_t m = (uint8_t)(gpsData.ggastruct.tim.min);
 8002ca8:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <lora_encode_gps+0x188>)
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	72bb      	strb	r3, [r7, #10]
	uint8_t s = (uint8_t)(gpsData.ggastruct.tim.sec);
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <lora_encode_gps+0x188>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	727b      	strb	r3, [r7, #9]
	uint8_t v = (uint8_t)(gpsData.ggastruct.isfixValid);
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <lora_encode_gps+0x188>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	723b      	strb	r3, [r7, #8]
	uint8_t n = (uint8_t)(gpsData.ggastruct.numofsat);
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <lora_encode_gps+0x188>)
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	71fb      	strb	r3, [r7, #7]

	memset(lora_tx_gps+3,0,16);
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <lora_encode_gps+0x198>)
 8002cca:	2210      	movs	r2, #16
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 fa21 	bl	8007116 <memset>
	memcpy(lora_tx_gps+3, &coordinates[0],4); //argumen ke-2 memcpy hanya works untuk 8bit, kalau lebih harus pake tanda & (yang diambil alamat memorinya)
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <lora_encode_gps+0x198>)
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <lora_encode_gps+0x194>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6013      	str	r3, [r2, #0]
	memcpy(lora_tx_gps+7, &gpsData.ggastruct.lcation.NS,1);
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <lora_encode_gps+0x19c>)
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <lora_encode_gps+0x188>)
 8002ce0:	7912      	ldrb	r2, [r2, #4]
 8002ce2:	701a      	strb	r2, [r3, #0]
	memcpy(lora_tx_gps+8, &coordinates[1],4);
 8002ce4:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <lora_encode_gps+0x1a0>)
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <lora_encode_gps+0x194>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	6013      	str	r3, [r2, #0]
	memcpy(lora_tx_gps+12, &gpsData.ggastruct.lcation.EW,1);
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <lora_encode_gps+0x1a4>)
 8002cee:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <lora_encode_gps+0x188>)
 8002cf0:	7b12      	ldrb	r2, [r2, #12]
 8002cf2:	701a      	strb	r2, [r3, #0]
//	memcpy(lora_tx_gps+13, (int8_t*)gpsData.ggastruct.tim.hour,1);
	memcpy(lora_tx_gps+13, &h,1);
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <lora_encode_gps+0x1a8>)
 8002cf6:	7afa      	ldrb	r2, [r7, #11]
 8002cf8:	701a      	strb	r2, [r3, #0]
	memcpy(lora_tx_gps+14, &m,1);
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <lora_encode_gps+0x1ac>)
 8002cfc:	7aba      	ldrb	r2, [r7, #10]
 8002cfe:	701a      	strb	r2, [r3, #0]
	memcpy(lora_tx_gps+15, &s,1);
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <lora_encode_gps+0x1b0>)
 8002d02:	7a7a      	ldrb	r2, [r7, #9]
 8002d04:	701a      	strb	r2, [r3, #0]
	memcpy(lora_tx_gps+16, &v,1);
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <lora_encode_gps+0x1b4>)
 8002d08:	7a3a      	ldrb	r2, [r7, #8]
 8002d0a:	701a      	strb	r2, [r3, #0]
//	memcpy(lora_tx_gps+14, (unt8_t*)&gpsData.ggastruct.tim.min,1);
//	memcpy(lora_tx_gps+15, (uint8_t*)&gpsData.ggastruct.tim.sec,1);
//	memcpy(lora_tx_gps+16, (int8_t*)gpsData.ggastruct.isfixValid,1);
	memcpy(lora_tx_gps+17, &gpsData.ggastruct.alt.altitude,4);
 8002d0c:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <lora_encode_gps+0x1b8>)
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <lora_encode_gps+0x188>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	6013      	str	r3, [r2, #0]
	memcpy(lora_tx_gps+21, &gpsData.ggastruct.alt.unit,1);
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <lora_encode_gps+0x1bc>)
 8002d16:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <lora_encode_gps+0x188>)
 8002d18:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002d1c:	701a      	strb	r2, [r3, #0]
//	memcpy(lora_tx_gps+22, (int8_t*)gpsData.ggastruct.numofsat,1);
	memcpy(lora_tx_gps+22, &n,1);
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <lora_encode_gps+0x1c0>)
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	701a      	strb	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	200009a0 	.word	0x200009a0
 8002d30:	42c80000 	.word	0x42c80000
 8002d34:	404e0000 	.word	0x404e0000
 8002d38:	20000a10 	.word	0x20000a10
 8002d3c:	20000017 	.word	0x20000017
 8002d40:	2000001b 	.word	0x2000001b
 8002d44:	2000001c 	.word	0x2000001c
 8002d48:	20000020 	.word	0x20000020
 8002d4c:	20000021 	.word	0x20000021
 8002d50:	20000022 	.word	0x20000022
 8002d54:	20000023 	.word	0x20000023
 8002d58:	20000024 	.word	0x20000024
 8002d5c:	20000025 	.word	0x20000025
 8002d60:	20000029 	.word	0x20000029
 8002d64:	2000002a 	.word	0x2000002a

08002d68 <server_receive_restart>:
	server_huart = huart;
	HAL_UART_Receive_DMA(server_huart, rxbuff, MAX_RX_PACKET_LEN + 3);
	init_flag = 1;
}

void server_receive_restart(void){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(server_huart);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <server_receive_restart+0x2c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fa7d 	bl	8005270 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(server_huart, rxbuff, MAX_RX_PACKET_LEN + 3);
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <server_receive_restart+0x2c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2205      	movs	r2, #5
 8002d7c:	4906      	ldr	r1, [pc, #24]	; (8002d98 <server_receive_restart+0x30>)
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fa46 	bl	8005210 <HAL_UART_Receive_DMA>
	restart_flag++;
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <server_receive_restart+0x34>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <server_receive_restart+0x34>)
 8002d8e:	701a      	strb	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000a1c 	.word	0x20000a1c
 8002d98:	20000a20 	.word	0x20000a20
 8002d9c:	20000a26 	.word	0x20000a26

08002da0 <server_receive_callback>:

void server_receive_callback(UART_HandleTypeDef *huart){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	if (huart->Instance != server_huart->Instance)return;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <server_receive_callback+0x58>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d11b      	bne.n	8002dee <server_receive_callback+0x4e>
	if (rxbuff[0] == 'i' && rxbuff[1] == 't' && rxbuff[2] == 's'){
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <server_receive_callback+0x5c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b69      	cmp	r3, #105	; 0x69
 8002dbc:	d10b      	bne.n	8002dd6 <server_receive_callback+0x36>
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <server_receive_callback+0x5c>)
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	2b74      	cmp	r3, #116	; 0x74
 8002dc4:	d107      	bne.n	8002dd6 <server_receive_callback+0x36>
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <server_receive_callback+0x5c>)
 8002dc8:	789b      	ldrb	r3, [r3, #2]
 8002dca:	2b73      	cmp	r3, #115	; 0x73
 8002dcc:	d103      	bne.n	8002dd6 <server_receive_callback+0x36>
		server_status = 1;
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <server_receive_callback+0x60>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e004      	b.n	8002de0 <server_receive_callback+0x40>
	}
	else {
		server_status = 0;
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <server_receive_callback+0x60>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
		server_receive_restart();
 8002ddc:	f7ff ffc4 	bl	8002d68 <server_receive_restart>
//		HAL_UART_DMAStop(server_huart);
//		HAL_UART_Receive_DMA(server_huart, txbuff, MAX_RX_PACKET_LEN + 3);
	}
	callback_flag++;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <server_receive_callback+0x64>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <server_receive_callback+0x64>)
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e000      	b.n	8002df0 <server_receive_callback+0x50>
	if (huart->Instance != server_huart->Instance)return;
 8002dee:	bf00      	nop
}
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000a1c 	.word	0x20000a1c
 8002dfc:	20000a20 	.word	0x20000a20
 8002e00:	20000a27 	.word	0x20000a27
 8002e04:	20000a25 	.word	0x20000a25

08002e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_Init+0x40>)
 8002e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <HAL_Init+0x40>)
 8002e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_Init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_Init+0x40>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f000 fbb1 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e36:	200f      	movs	r0, #15
 8002e38:	f000 f808 	bl	8002e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e3c:	f7fe fa80 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023c00 	.word	0x40023c00

08002e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_InitTick+0x54>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_InitTick+0x58>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fbc9 	bl	8003602 <HAL_SYSTICK_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00e      	b.n	8002e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b0f      	cmp	r3, #15
 8002e7e:	d80a      	bhi.n	8002e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e80:	2200      	movs	r2, #0
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e88:	f000 fb91 	bl	80035ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e8c:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <HAL_InitTick+0x5c>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000030 	.word	0x20000030
 8002ea8:	2000002c 	.word	0x2000002c

08002eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <HAL_IncTick+0x24>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000030 	.word	0x20000030
 8002ed0:	20000a28 	.word	0x20000a28

08002ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_GetTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000a28 	.word	0x20000a28

08002eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff ffee 	bl	8002ed4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffde 	bl	8002ed4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000030 	.word	0x20000030

08002f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e033      	b.n	8002fb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe f850 	bl	8000ff8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f7a:	f023 0302 	bic.w	r3, r3, #2
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f93a 	bl	8003200 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa2:	e001      	b.n	8002fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e105      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x228>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	d925      	bls.n	8003034 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68d9      	ldr	r1, [r3, #12]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b1e      	subs	r3, #30
 8002ffe:	2207      	movs	r2, #7
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43da      	mvns	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	400a      	ands	r2, r1
 800300c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	4603      	mov	r3, r0
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4403      	add	r3, r0
 8003026:	3b1e      	subs	r3, #30
 8003028:	409a      	lsls	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	e022      	b.n	800307a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	2207      	movs	r2, #7
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	400a      	ands	r2, r1
 8003056:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	4603      	mov	r3, r0
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4403      	add	r3, r0
 8003070:	409a      	lsls	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d824      	bhi.n	80030cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b05      	subs	r3, #5
 8003094:	221f      	movs	r2, #31
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b05      	subs	r3, #5
 80030be:	fa00 f203 	lsl.w	r2, r0, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ca:	e04c      	b.n	8003166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d824      	bhi.n	800311e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	3b23      	subs	r3, #35	; 0x23
 80030e6:	221f      	movs	r2, #31
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	4618      	mov	r0, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	3b23      	subs	r3, #35	; 0x23
 8003110:	fa00 f203 	lsl.w	r2, r0, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
 800311c:	e023      	b.n	8003166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	3b41      	subs	r3, #65	; 0x41
 8003130:	221f      	movs	r2, #31
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	400a      	ands	r2, r1
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	4618      	mov	r0, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b41      	subs	r3, #65	; 0x41
 800315a:	fa00 f203 	lsl.w	r2, r0, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <HAL_ADC_ConfigChannel+0x234>)
 8003168:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <HAL_ADC_ConfigChannel+0x238>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d109      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x1cc>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b12      	cmp	r3, #18
 800317a:	d105      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_ADC_ConfigChannel+0x238>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d123      	bne.n	80031da <HAL_ADC_ConfigChannel+0x21e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b10      	cmp	r3, #16
 8003198:	d003      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x1e6>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b11      	cmp	r3, #17
 80031a0:	d11b      	bne.n	80031da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d111      	bne.n	80031da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_ADC_ConfigChannel+0x23c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_ADC_ConfigChannel+0x240>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	0c9a      	lsrs	r2, r3, #18
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031cc:	e002      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f9      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40012300 	.word	0x40012300
 80031f4:	40012000 	.word	0x40012000
 80031f8:	20000000 	.word	0x20000000
 80031fc:	431bde83 	.word	0x431bde83

08003200 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003208:	4b79      	ldr	r3, [pc, #484]	; (80033f0 <ADC_Init+0x1f0>)
 800320a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	021a      	lsls	r2, r3, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	4a58      	ldr	r2, [pc, #352]	; (80033f4 <ADC_Init+0x1f4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	e00f      	b.n	80032fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0202 	bic.w	r2, r2, #2
 800330c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7e1b      	ldrb	r3, [r3, #24]
 8003318:	005a      	lsls	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800334a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	3b01      	subs	r3, #1
 8003358:	035a      	lsls	r2, r3, #13
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	e007      	b.n	8003374 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003372:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	3b01      	subs	r3, #1
 8003390:	051a      	lsls	r2, r3, #20
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033b6:	025a      	lsls	r2, r3, #9
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	029a      	lsls	r2, r3, #10
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	40012300 	.word	0x40012300
 80033f4:	0f000001 	.word	0x0f000001

080033f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60d3      	str	r3, [r2, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_GetPriorityGrouping+0x18>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	f003 0307 	and.w	r3, r3, #7
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0b      	blt.n	8003486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4907      	ldr	r1, [pc, #28]	; (8003494 <__NVIC_EnableIRQ+0x38>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db0a      	blt.n	80034c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	490c      	ldr	r1, [pc, #48]	; (80034e4 <__NVIC_SetPriority+0x4c>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c0:	e00a      	b.n	80034d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4908      	ldr	r1, [pc, #32]	; (80034e8 <__NVIC_SetPriority+0x50>)
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3b04      	subs	r3, #4
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	440b      	add	r3, r1
 80034d6:	761a      	strb	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f1c3 0307 	rsb	r3, r3, #7
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf28      	it	cs
 800350a:	2304      	movcs	r3, #4
 800350c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3304      	adds	r3, #4
 8003512:	2b06      	cmp	r3, #6
 8003514:	d902      	bls.n	800351c <NVIC_EncodePriority+0x30>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3b03      	subs	r3, #3
 800351a:	e000      	b.n	800351e <NVIC_EncodePriority+0x32>
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43d9      	mvns	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	4313      	orrs	r3, r2
         );
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003564:	d301      	bcc.n	800356a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003566:	2301      	movs	r3, #1
 8003568:	e00f      	b.n	800358a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <SysTick_Config+0x40>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003572:	210f      	movs	r1, #15
 8003574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003578:	f7ff ff8e 	bl	8003498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SysTick_Config+0x40>)
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <SysTick_Config+0x40>)
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	e000e010 	.word	0xe000e010

08003598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff29 	bl	80033f8 <__NVIC_SetPriorityGrouping>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c0:	f7ff ff3e 	bl	8003440 <__NVIC_GetPriorityGrouping>
 80035c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff8e 	bl	80034ec <NVIC_EncodePriority>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff5d 	bl	8003498 <__NVIC_SetPriority>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff31 	bl	800345c <__NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffa2 	bl	8003554 <SysTick_Config>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff fc54 	bl	8002ed4 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e099      	b.n	800376c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003658:	e00f      	b.n	800367a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365a:	f7ff fc3b 	bl	8002ed4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b05      	cmp	r3, #5
 8003666:	d908      	bls.n	800367a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e078      	b.n	800376c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e8      	bne.n	800365a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_DMA_Init+0x158>)
 8003694:	4013      	ands	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d107      	bne.n	80036e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4313      	orrs	r3, r2
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0307 	bic.w	r3, r3, #7
 80036fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b04      	cmp	r3, #4
 800370c:	d117      	bne.n	800373e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fb01 	bl	8003d28 <DMA_CheckFifoParam>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800373a:	2301      	movs	r3, #1
 800373c:	e016      	b.n	800376c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fab8 	bl	8003cbc <DMA_CalcBaseAndBitshift>
 800374c:	4603      	mov	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	223f      	movs	r2, #63	; 0x3f
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	f010803f 	.word	0xf010803f

08003778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_DMA_Start_IT+0x26>
 800379a:	2302      	movs	r3, #2
 800379c:	e040      	b.n	8003820 <HAL_DMA_Start_IT+0xa8>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d12f      	bne.n	8003812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fa4a 	bl	8003c60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	409a      	lsls	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0216 	orr.w	r2, r2, #22
 80037e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e005      	b.n	800381e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800381a:	2302      	movs	r3, #2
 800381c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003836:	f7ff fb4d 	bl	8002ed4 <HAL_GetTick>
 800383a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d008      	beq.n	800385a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e052      	b.n	8003900 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0216 	bic.w	r2, r2, #22
 8003868:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d103      	bne.n	800388a <HAL_DMA_Abort+0x62>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0208 	bic.w	r2, r2, #8
 8003898:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038aa:	e013      	b.n	80038d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ac:	f7ff fb12 	bl	8002ed4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d90c      	bls.n	80038d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e015      	b.n	8003900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e4      	bne.n	80038ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	223f      	movs	r2, #63	; 0x3f
 80038e8:	409a      	lsls	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d004      	beq.n	8003926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00c      	b.n	8003940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2205      	movs	r2, #5
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003958:	4b8e      	ldr	r3, [pc, #568]	; (8003b94 <HAL_DMA_IRQHandler+0x248>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a8e      	ldr	r2, [pc, #568]	; (8003b98 <HAL_DMA_IRQHandler+0x24c>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	2208      	movs	r2, #8
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01a      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0204 	bic.w	r2, r2, #4
 800399e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	2208      	movs	r2, #8
 80039a6:	409a      	lsls	r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d012      	beq.n	80039ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	2201      	movs	r2, #1
 80039dc:	409a      	lsls	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2204      	movs	r2, #4
 80039f4:	409a      	lsls	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d012      	beq.n	8003a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	2204      	movs	r2, #4
 8003a12:	409a      	lsls	r2, r3
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	2210      	movs	r2, #16
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d043      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03c      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	2210      	movs	r2, #16
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d024      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
 8003a7a:	e01f      	b.n	8003abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
 8003a8c:	e016      	b.n	8003abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0208 	bic.w	r2, r2, #8
 8003aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 808f 	beq.w	8003bec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8087 	beq.w	8003bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d136      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0216 	bic.w	r2, r2, #22
 8003b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x1da>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0208 	bic.w	r2, r2, #8
 8003b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	223f      	movs	r2, #63	; 0x3f
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d07e      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
        }
        return;
 8003b62:	e079      	b.n	8003c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01d      	beq.n	8003bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10d      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d031      	beq.n	8003bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
 8003b90:	e02c      	b.n	8003bec <HAL_DMA_IRQHandler+0x2a0>
 8003b92:	bf00      	nop
 8003b94:	20000000 	.word	0x20000000
 8003b98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d023      	beq.n	8003bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e01e      	b.n	8003bec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0210 	bic.w	r2, r2, #16
 8003bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d032      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d022      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2205      	movs	r2, #5
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d307      	bcc.n	8003c34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f2      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x2cc>
 8003c32:	e000      	b.n	8003c36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	e000      	b.n	8003c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c58:	bf00      	nop
    }
  }
}
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d108      	bne.n	8003ca0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c9e:	e007      	b.n	8003cb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	60da      	str	r2, [r3, #12]
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3b10      	subs	r3, #16
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <DMA_CalcBaseAndBitshift+0x64>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cd6:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d909      	bls.n	8003cfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cf2:	f023 0303 	bic.w	r3, r3, #3
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8003cfc:	e007      	b.n	8003d0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	aaaaaaab 	.word	0xaaaaaaab
 8003d24:	08009f60 	.word	0x08009f60

08003d28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11f      	bne.n	8003d82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d856      	bhi.n	8003df6 <DMA_CheckFifoParam+0xce>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <DMA_CheckFifoParam+0x28>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d73 	.word	0x08003d73
 8003d58:	08003d61 	.word	0x08003d61
 8003d5c:	08003df7 	.word	0x08003df7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d046      	beq.n	8003dfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e043      	b.n	8003dfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d7a:	d140      	bne.n	8003dfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d80:	e03d      	b.n	8003dfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8a:	d121      	bne.n	8003dd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d837      	bhi.n	8003e02 <DMA_CheckFifoParam+0xda>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <DMA_CheckFifoParam+0x70>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003daf 	.word	0x08003daf
 8003da0:	08003da9 	.word	0x08003da9
 8003da4:	08003dc1 	.word	0x08003dc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e030      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d025      	beq.n	8003e06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbe:	e022      	b.n	8003e06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc8:	d11f      	bne.n	8003e0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dce:	e01c      	b.n	8003e0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d903      	bls.n	8003dde <DMA_CheckFifoParam+0xb6>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d003      	beq.n	8003de4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ddc:	e018      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      break;
 8003de2:	e015      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      break;
 8003df4:	e00b      	b.n	8003e0e <DMA_CheckFifoParam+0xe6>
      break;
 8003df6:	bf00      	nop
 8003df8:	e00a      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e008      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e006      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003e02:	bf00      	nop
 8003e04:	e004      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e159      	b.n	80040f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	f040 8148 	bne.w	80040ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d005      	beq.n	8003e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d130      	bne.n	8003ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 0201 	and.w	r2, r3, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d017      	beq.n	8003f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d123      	bne.n	8003f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	08da      	lsrs	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3208      	adds	r2, #8
 8003f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	220f      	movs	r2, #15
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	08da      	lsrs	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	69b9      	ldr	r1, [r7, #24]
 8003f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0203 	and.w	r2, r3, #3
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80a2 	beq.w	80040ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	4b57      	ldr	r3, [pc, #348]	; (8004108 <HAL_GPIO_Init+0x2e8>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	4a56      	ldr	r2, [pc, #344]	; (8004108 <HAL_GPIO_Init+0x2e8>)
 8003fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb6:	4b54      	ldr	r3, [pc, #336]	; (8004108 <HAL_GPIO_Init+0x2e8>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc2:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_GPIO_Init+0x2ec>)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	220f      	movs	r2, #15
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a49      	ldr	r2, [pc, #292]	; (8004110 <HAL_GPIO_Init+0x2f0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_Init+0x202>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a48      	ldr	r2, [pc, #288]	; (8004114 <HAL_GPIO_Init+0x2f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x1fe>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a47      	ldr	r2, [pc, #284]	; (8004118 <HAL_GPIO_Init+0x2f8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x1fa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a46      	ldr	r2, [pc, #280]	; (800411c <HAL_GPIO_Init+0x2fc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x1f6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a45      	ldr	r2, [pc, #276]	; (8004120 <HAL_GPIO_Init+0x300>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x1f2>
 800400e:	2304      	movs	r3, #4
 8004010:	e008      	b.n	8004024 <HAL_GPIO_Init+0x204>
 8004012:	2307      	movs	r3, #7
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x204>
 8004016:	2303      	movs	r3, #3
 8004018:	e004      	b.n	8004024 <HAL_GPIO_Init+0x204>
 800401a:	2302      	movs	r3, #2
 800401c:	e002      	b.n	8004024 <HAL_GPIO_Init+0x204>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_GPIO_Init+0x204>
 8004022:	2300      	movs	r3, #0
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	f002 0203 	and.w	r2, r2, #3
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	4093      	lsls	r3, r2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004034:	4935      	ldr	r1, [pc, #212]	; (800410c <HAL_GPIO_Init+0x2ec>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_GPIO_Init+0x304>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004066:	4a2f      	ldr	r2, [pc, #188]	; (8004124 <HAL_GPIO_Init+0x304>)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800406c:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <HAL_GPIO_Init+0x304>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004090:	4a24      	ldr	r2, [pc, #144]	; (8004124 <HAL_GPIO_Init+0x304>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <HAL_GPIO_Init+0x304>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ba:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <HAL_GPIO_Init+0x304>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_GPIO_Init+0x304>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e4:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <HAL_GPIO_Init+0x304>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3301      	adds	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	f67f aea2 	bls.w	8003e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40013800 	.word	0x40013800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40020800 	.word	0x40020800
 800411c:	40020c00 	.word	0x40020c00
 8004120:	40021000 	.word	0x40021000
 8004124:	40013c00 	.word	0x40013c00

08004128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	887b      	ldrh	r3, [r7, #2]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e001      	b.n	800414a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
 8004164:	4613      	mov	r3, r2
 8004166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004168:	787b      	ldrb	r3, [r7, #1]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004174:	e003      	b.n	800417e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	041a      	lsls	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	619a      	str	r2, [r3, #24]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f806 	bl	80041bc <HAL_GPIO_EXTI_Callback>
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e267      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d075      	beq.n	80042de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d00c      	beq.n	8004218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fe:	4b85      	ldr	r3, [pc, #532]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004206:	2b08      	cmp	r3, #8
 8004208:	d112      	bne.n	8004230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420a:	4b82      	ldr	r3, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004216:	d10b      	bne.n	8004230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004218:	4b7e      	ldr	r3, [pc, #504]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d05b      	beq.n	80042dc <HAL_RCC_OscConfig+0x108>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d157      	bne.n	80042dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e242      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d106      	bne.n	8004248 <HAL_RCC_OscConfig+0x74>
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e01d      	b.n	8004284 <HAL_RCC_OscConfig+0xb0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0x98>
 8004252:	4b70      	ldr	r3, [pc, #448]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6f      	ldr	r2, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b6d      	ldr	r3, [pc, #436]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6c      	ldr	r2, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0xb0>
 800426c:	4b69      	ldr	r3, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a68      	ldr	r2, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b66      	ldr	r3, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a65      	ldr	r2, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 800427e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fe fe22 	bl	8002ed4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7fe fe1e 	bl	8002ed4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e207      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0xc0>
 80042b2:	e014      	b.n	80042de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fe fe0e 	bl	8002ed4 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe fe0a 	bl	8002ed4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e1f3      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ce:	4b51      	ldr	r3, [pc, #324]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0xe8>
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d063      	beq.n	80043b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ea:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d11c      	bne.n	800433c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004302:	4b44      	ldr	r3, [pc, #272]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d116      	bne.n	800433c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_RCC_OscConfig+0x152>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e1c7      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4937      	ldr	r1, [pc, #220]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	e03a      	b.n	80043b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	4b34      	ldr	r3, [pc, #208]	; (8004418 <HAL_RCC_OscConfig+0x244>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fe fdc3 	bl	8002ed4 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004352:	f7fe fdbf 	bl	8002ed4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e1a8      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4925      	ldr	r1, [pc, #148]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
 8004384:	e015      	b.n	80043b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_OscConfig+0x244>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe fda2 	bl	8002ed4 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004394:	f7fe fd9e 	bl	8002ed4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e187      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a6:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d036      	beq.n	800442c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_RCC_OscConfig+0x248>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe fd82 	bl	8002ed4 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fe fd7e 	bl	8002ed4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e167      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x240>)
 80043e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x200>
 80043f2:	e01b      	b.n	800442c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_OscConfig+0x248>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fa:	f7fe fd6b 	bl	8002ed4 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004400:	e00e      	b.n	8004420 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004402:	f7fe fd67 	bl	8002ed4 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d907      	bls.n	8004420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e150      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
 8004414:	40023800 	.word	0x40023800
 8004418:	42470000 	.word	0x42470000
 800441c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004420:	4b88      	ldr	r3, [pc, #544]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ea      	bne.n	8004402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8097 	beq.w	8004568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443e:	4b81      	ldr	r3, [pc, #516]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	4b7d      	ldr	r3, [pc, #500]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a7c      	ldr	r2, [pc, #496]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b7a      	ldr	r3, [pc, #488]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	4b77      	ldr	r3, [pc, #476]	; (8004648 <HAL_RCC_OscConfig+0x474>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d118      	bne.n	80044a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004476:	4b74      	ldr	r3, [pc, #464]	; (8004648 <HAL_RCC_OscConfig+0x474>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a73      	ldr	r2, [pc, #460]	; (8004648 <HAL_RCC_OscConfig+0x474>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fe fd27 	bl	8002ed4 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fe fd23 	bl	8002ed4 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e10c      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <HAL_RCC_OscConfig+0x474>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x2ea>
 80044b0:	4b64      	ldr	r3, [pc, #400]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a63      	ldr	r2, [pc, #396]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
 80044bc:	e01c      	b.n	80044f8 <HAL_RCC_OscConfig+0x324>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x30c>
 80044c6:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	4a5e      	ldr	r2, [pc, #376]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70
 80044d2:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a5b      	ldr	r2, [pc, #364]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0x324>
 80044e0:	4b58      	ldr	r3, [pc, #352]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a57      	ldr	r2, [pc, #348]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
 80044ec:	4b55      	ldr	r3, [pc, #340]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	4a54      	ldr	r2, [pc, #336]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f023 0304 	bic.w	r3, r3, #4
 80044f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fe fce8 	bl	8002ed4 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fe fce4 	bl	8002ed4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0cb      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	4b49      	ldr	r3, [pc, #292]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ee      	beq.n	8004508 <HAL_RCC_OscConfig+0x334>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452c:	f7fe fcd2 	bl	8002ed4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fe fcce 	bl	8002ed4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0b5      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454a:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ee      	bne.n	8004534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455c:	4b39      	ldr	r3, [pc, #228]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4a38      	ldr	r2, [pc, #224]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 8004562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a1 	beq.w	80046b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004572:	4b34      	ldr	r3, [pc, #208]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b08      	cmp	r3, #8
 800457c:	d05c      	beq.n	8004638 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d141      	bne.n	800460a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004586:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_RCC_OscConfig+0x478>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fe fca2 	bl	8002ed4 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004594:	f7fe fc9e 	bl	8002ed4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e087      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	3b01      	subs	r3, #1
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	491b      	ldr	r1, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_RCC_OscConfig+0x478>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fe fc77 	bl	8002ed4 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fe fc73 	bl	8002ed4 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e05c      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x416>
 8004608:	e054      	b.n	80046b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <HAL_RCC_OscConfig+0x478>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fe fc60 	bl	8002ed4 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004618:	f7fe fc5c 	bl	8002ed4 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e045      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_RCC_OscConfig+0x470>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x444>
 8004636:	e03d      	b.n	80046b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e038      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000
 800464c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCC_OscConfig+0x4ec>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d028      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d121      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d11a      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004688:	4293      	cmp	r3, r2
 800468a:	d111      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800

080046c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0cc      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d8:	4b68      	ldr	r3, [pc, #416]	; (800487c <HAL_RCC_ClockConfig+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d90c      	bls.n	8004700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b65      	ldr	r3, [pc, #404]	; (800487c <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b63      	ldr	r3, [pc, #396]	; (800487c <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0b8      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4a58      	ldr	r2, [pc, #352]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004730:	4b53      	ldr	r3, [pc, #332]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a52      	ldr	r2, [pc, #328]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800473a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800473c:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	494d      	ldr	r1, [pc, #308]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d044      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d119      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07f      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d003      	beq.n	8004782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477e:	2b03      	cmp	r3, #3
 8004780:	d107      	bne.n	8004792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004782:	4b3f      	ldr	r3, [pc, #252]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e06f      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004792:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e067      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a2:	4b37      	ldr	r3, [pc, #220]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f023 0203 	bic.w	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4934      	ldr	r1, [pc, #208]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b4:	f7fe fb8e 	bl	8002ed4 <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047bc:	f7fe fb8a 	bl	8002ed4 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e04f      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 020c 	and.w	r2, r3, #12
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d1eb      	bne.n	80047bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e4:	4b25      	ldr	r3, [pc, #148]	; (800487c <HAL_RCC_ClockConfig+0x1b8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d20c      	bcs.n	800480c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e032      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4916      	ldr	r1, [pc, #88]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	490e      	ldr	r1, [pc, #56]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800484a:	f000 f821 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 800484e:	4602      	mov	r2, r0
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	490a      	ldr	r1, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	5ccb      	ldrb	r3, [r1, r3]
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1c8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe faee 	bl	8002e4c <HAL_InitTick>

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023c00 	.word	0x40023c00
 8004880:	40023800 	.word	0x40023800
 8004884:	08009f48 	.word	0x08009f48
 8004888:	20000000 	.word	0x20000000
 800488c:	2000002c 	.word	0x2000002c

08004890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004894:	b090      	sub	sp, #64	; 0x40
 8004896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
 800489c:	2300      	movs	r3, #0
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a0:	2300      	movs	r3, #0
 80048a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a8:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x180>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d00d      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x40>
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	f200 80a1 	bhi.w	80049fc <HAL_RCC_GetSysClockFreq+0x16c>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x34>
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d003      	beq.n	80048ca <HAL_RCC_GetSysClockFreq+0x3a>
 80048c2:	e09b      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x184>)
 80048c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048c8:	e09b      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ca:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x188>)
 80048cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ce:	e098      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d0:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048da:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x180>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d028      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e6:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	2200      	movs	r2, #0
 80048ee:	623b      	str	r3, [r7, #32]
 80048f0:	627a      	str	r2, [r7, #36]	; 0x24
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048f8:	2100      	movs	r1, #0
 80048fa:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x188>)
 80048fc:	fb03 f201 	mul.w	r2, r3, r1
 8004900:	2300      	movs	r3, #0
 8004902:	fb00 f303 	mul.w	r3, r0, r3
 8004906:	4413      	add	r3, r2
 8004908:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x188>)
 800490a:	fba0 1202 	umull	r1, r2, r0, r2
 800490e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004910:	460a      	mov	r2, r1
 8004912:	62ba      	str	r2, [r7, #40]	; 0x28
 8004914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004916:	4413      	add	r3, r2
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	2200      	movs	r2, #0
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	61fa      	str	r2, [r7, #28]
 8004922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004926:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800492a:	f7fc f995 	bl	8000c58 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4613      	mov	r3, r2
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004936:	e053      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004938:	4b35      	ldr	r3, [pc, #212]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x180>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	2200      	movs	r2, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	617a      	str	r2, [r7, #20]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800494a:	f04f 0b00 	mov.w	fp, #0
 800494e:	4652      	mov	r2, sl
 8004950:	465b      	mov	r3, fp
 8004952:	f04f 0000 	mov.w	r0, #0
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	0159      	lsls	r1, r3, #5
 800495c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004960:	0150      	lsls	r0, r2, #5
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	ebb2 080a 	subs.w	r8, r2, sl
 800496a:	eb63 090b 	sbc.w	r9, r3, fp
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800497a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800497e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004982:	ebb2 0408 	subs.w	r4, r2, r8
 8004986:	eb63 0509 	sbc.w	r5, r3, r9
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	00eb      	lsls	r3, r5, #3
 8004994:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004998:	00e2      	lsls	r2, r4, #3
 800499a:	4614      	mov	r4, r2
 800499c:	461d      	mov	r5, r3
 800499e:	eb14 030a 	adds.w	r3, r4, sl
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	eb45 030b 	adc.w	r3, r5, fp
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049b6:	4629      	mov	r1, r5
 80049b8:	028b      	lsls	r3, r1, #10
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c0:	4621      	mov	r1, r4
 80049c2:	028a      	lsls	r2, r1, #10
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	2200      	movs	r2, #0
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	60fa      	str	r2, [r7, #12]
 80049d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d4:	f7fc f940 	bl	8000c58 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	3301      	adds	r3, #1
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049fa:	e002      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x184>)
 80049fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3740      	adds	r7, #64	; 0x40
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	00f42400 	.word	0x00f42400
 8004a18:	017d7840 	.word	0x017d7840

08004a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000000 	.word	0x20000000

08004a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a38:	f7ff fff0 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	0a9b      	lsrs	r3, r3, #10
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4903      	ldr	r1, [pc, #12]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40023800 	.word	0x40023800
 8004a58:	08009f58 	.word	0x08009f58

08004a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a60:	f7ff ffdc 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	0b5b      	lsrs	r3, r3, #13
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	08009f58 	.word	0x08009f58

08004a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e041      	b.n	8004b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fe2a 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 f950 	bl	8004d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e03c      	b.n	8004bb6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <HAL_TIM_Base_Start+0xa0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d018      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d013      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <HAL_TIM_Base_Start+0xa4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00e      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <HAL_TIM_Base_Start+0xa8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_TIM_Base_Start+0xac>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <HAL_TIM_Base_Start+0xb0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d111      	bne.n	8004ba4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d010      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	e007      	b.n	8004bb4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40014000 	.word	0x40014000

08004bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0b4      	b.n	8004d5e <HAL_TIM_ConfigClockSource+0x186>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2c:	d03e      	beq.n	8004cac <HAL_TIM_ConfigClockSource+0xd4>
 8004c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c32:	f200 8087 	bhi.w	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	f000 8086 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x172>
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c42:	d87f      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b70      	cmp	r3, #112	; 0x70
 8004c46:	d01a      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0xa6>
 8004c48:	2b70      	cmp	r3, #112	; 0x70
 8004c4a:	d87b      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b60      	cmp	r3, #96	; 0x60
 8004c4e:	d050      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d877      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b50      	cmp	r3, #80	; 0x50
 8004c56:	d03c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d873      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d058      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x13a>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d86f      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b30      	cmp	r3, #48	; 0x30
 8004c66:	d064      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d86b      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d060      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d867      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d05a      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7c:	e062      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6899      	ldr	r1, [r3, #8]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f000 f965 	bl	8004f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	609a      	str	r2, [r3, #8]
      break;
 8004caa:	e04f      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6899      	ldr	r1, [r3, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f000 f94e 	bl	8004f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cce:	609a      	str	r2, [r3, #8]
      break;
 8004cd0:	e03c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 f8c2 	bl	8004e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2150      	movs	r1, #80	; 0x50
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 f91b 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e02c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 f8e1 	bl	8004ec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2160      	movs	r1, #96	; 0x60
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f90b 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e01c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 f8a2 	bl	8004e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2140      	movs	r1, #64	; 0x40
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f8fb 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004d30:	e00c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 f8f2 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004d42:	e003      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
      break;
 8004d48:	e000      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a34      	ldr	r2, [pc, #208]	; (8004e4c <TIM_Base_SetConfig+0xe4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a31      	ldr	r2, [pc, #196]	; (8004e50 <TIM_Base_SetConfig+0xe8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <TIM_Base_SetConfig+0xec>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a2f      	ldr	r2, [pc, #188]	; (8004e58 <TIM_Base_SetConfig+0xf0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <TIM_Base_SetConfig+0xe4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01b      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d017      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <TIM_Base_SetConfig+0xe8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <TIM_Base_SetConfig+0xec>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <TIM_Base_SetConfig+0xf0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <TIM_Base_SetConfig+0xf4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <TIM_Base_SetConfig+0xf8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <TIM_Base_SetConfig+0xfc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <TIM_Base_SetConfig+0xe4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800

08004e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 030a 	bic.w	r3, r3, #10
 8004ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0210 	bic.w	r2, r3, #16
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	031b      	lsls	r3, r3, #12
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f043 0307 	orr.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e050      	b.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d013      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a18      	ldr	r2, [pc, #96]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a16      	ldr	r2, [pc, #88]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a15      	ldr	r2, [pc, #84]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d10c      	bne.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	4313      	orrs	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800
 8005070:	40000c00 	.word	0x40000c00
 8005074:	40014000 	.word	0x40014000

08005078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e03f      	b.n	800510a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fbd0 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 ffcd 	bl	800605c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08c      	sub	sp, #48	; 0x30
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b20      	cmp	r3, #32
 800512c:	d165      	bne.n	80051fa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_Transmit_DMA+0x26>
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e05e      	b.n	80051fc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_UART_Transmit_DMA+0x38>
 8005148:	2302      	movs	r3, #2
 800514a:	e057      	b.n	80051fc <HAL_UART_Transmit_DMA+0xe8>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2221      	movs	r2, #33	; 0x21
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	4a22      	ldr	r2, [pc, #136]	; (8005204 <HAL_UART_Transmit_DMA+0xf0>)
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005180:	4a21      	ldr	r2, [pc, #132]	; (8005208 <HAL_UART_Transmit_DMA+0xf4>)
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	4a20      	ldr	r2, [pc, #128]	; (800520c <HAL_UART_Transmit_DMA+0xf8>)
 800518a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	2200      	movs	r2, #0
 8005192:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005194:	f107 0308 	add.w	r3, r7, #8
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3304      	adds	r3, #4
 80051a8:	461a      	mov	r2, r3
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	f7fe fae4 	bl	8003778 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3314      	adds	r3, #20
 80051c8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	617b      	str	r3, [r7, #20]
   return(result);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e2:	627a      	str	r2, [r7, #36]	; 0x24
 80051e4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6a39      	ldr	r1, [r7, #32]
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e5      	bne.n	80051c2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3730      	adds	r7, #48	; 0x30
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	080058f5 	.word	0x080058f5
 8005208:	0800598f 	.word	0x0800598f
 800520c:	08005b07 	.word	0x08005b07

08005210 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b20      	cmp	r3, #32
 8005228:	d11d      	bne.n	8005266 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_Receive_DMA+0x26>
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e016      	b.n	8005268 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_UART_Receive_DMA+0x38>
 8005244:	2302      	movs	r3, #2
 8005246:	e00f      	b.n	8005268 <HAL_UART_Receive_DMA+0x58>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	461a      	mov	r2, r3
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fc9d 	bl	8005b9c <UART_Start_Receive_DMA>
 8005262:	4603      	mov	r3, r0
 8005264:	e000      	b.n	8005268 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b090      	sub	sp, #64	; 0x40
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005278:	2300      	movs	r3, #0
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b21      	cmp	r3, #33	; 0x21
 800529c:	d128      	bne.n	80052f0 <HAL_UART_DMAStop+0x80>
 800529e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d025      	beq.n	80052f0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	623b      	str	r3, [r7, #32]
   return(result);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c4:	633a      	str	r2, [r7, #48]	; 0x30
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fa9f 	bl	8003828 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fcf4 	bl	8005cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b22      	cmp	r3, #34	; 0x22
 8005310:	d128      	bne.n	8005364 <HAL_UART_DMAStop+0xf4>
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d025      	beq.n	8005364 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	60fb      	str	r3, [r7, #12]
   return(result);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3314      	adds	r3, #20
 8005336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005338:	61fa      	str	r2, [r7, #28]
 800533a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	617b      	str	r3, [r7, #20]
   return(result);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fa65 	bl	8003828 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fce2 	bl	8005d28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3740      	adds	r7, #64	; 0x40
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b0ba      	sub	sp, #232	; 0xe8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_UART_IRQHandler+0x66>
 80053c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fd89 	bl	8005ee6 <UART_Receive_IT>
      return;
 80053d4:	e256      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80de 	beq.w	800559c <HAL_UART_IRQHandler+0x22c>
 80053e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80d1 	beq.w	800559c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_UART_IRQHandler+0xae>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0201 	orr.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_UART_IRQHandler+0xd2>
 800542a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f043 0202 	orr.w	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_UART_IRQHandler+0xf6>
 800544e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f043 0204 	orr.w	r2, r3, #4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d011      	beq.n	8005496 <HAL_UART_IRQHandler+0x126>
 8005472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800547e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0208 	orr.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 81ed 	beq.w	800587a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_UART_IRQHandler+0x14e>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fd14 	bl	8005ee6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <HAL_UART_IRQHandler+0x17a>
 80054e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d04f      	beq.n	800558a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fc1c 	bl	8005d28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d141      	bne.n	8005582 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3314      	adds	r3, #20
 8005526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800552a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800552e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1d9      	bne.n	80054fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d013      	beq.n	800557a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	4a7d      	ldr	r2, [pc, #500]	; (800574c <HAL_UART_IRQHandler+0x3dc>)
 8005558:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe f9d2 	bl	8003908 <HAL_DMA_Abort_IT>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d016      	beq.n	8005598 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	e00e      	b.n	8005598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9a4 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	e00a      	b.n	8005598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f9a0 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e006      	b.n	8005598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f99c 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005596:	e170      	b.n	800587a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	bf00      	nop
    return;
 800559a:	e16e      	b.n	800587a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	f040 814a 	bne.w	800583a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8143 	beq.w	800583a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 813c 	beq.w	800583a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e2:	2b40      	cmp	r3, #64	; 0x40
 80055e4:	f040 80b4 	bne.w	8005750 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8140 	beq.w	800587e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005606:	429a      	cmp	r2, r3
 8005608:	f080 8139 	bcs.w	800587e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005612:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561e:	f000 8088 	beq.w	8005732 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800563c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800564e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800565a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3314      	adds	r3, #20
 8005674:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800567e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3314      	adds	r3, #20
 800568e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005692:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005696:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800569a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e1      	bne.n	800566e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e3      	bne.n	80056aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005714:	65ba      	str	r2, [r7, #88]	; 0x58
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800571a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e3      	bne.n	80056f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe f87b 	bl	8003828 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800573a:	b29b      	uxth	r3, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	b29b      	uxth	r3, r3
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f8ca 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005748:	e099      	b.n	800587e <HAL_UART_IRQHandler+0x50e>
 800574a:	bf00      	nop
 800574c:	08005def 	.word	0x08005def
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005758:	b29b      	uxth	r3, r3
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 808b 	beq.w	8005882 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800576c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8086 	beq.w	8005882 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800579a:	647a      	str	r2, [r7, #68]	; 0x44
 800579c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e3      	bne.n	8005776 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	623b      	str	r3, [r7, #32]
   return(result);
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057d2:	633a      	str	r2, [r7, #48]	; 0x30
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e3      	bne.n	80057ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	60fb      	str	r3, [r7, #12]
   return(result);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0310 	bic.w	r3, r3, #16
 800580a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005818:	61fa      	str	r2, [r7, #28]
 800581a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	617b      	str	r3, [r7, #20]
   return(result);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e3      	bne.n	80057f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800582c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f852 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005838:	e023      	b.n	8005882 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <HAL_UART_IRQHandler+0x4ea>
 8005846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fadf 	bl	8005e16 <UART_Transmit_IT>
    return;
 8005858:	e014      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00e      	beq.n	8005884 <HAL_UART_IRQHandler+0x514>
 8005866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb1f 	bl	8005eb6 <UART_EndTransmit_IT>
    return;
 8005878:	e004      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
    return;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
      return;
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <HAL_UART_IRQHandler+0x514>
      return;
 8005882:	bf00      	nop
  }
}
 8005884:	37e8      	adds	r7, #232	; 0xe8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop

0800588c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b090      	sub	sp, #64	; 0x40
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d137      	bne.n	8005980 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005912:	2200      	movs	r2, #0
 8005914:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3314      	adds	r3, #20
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	623b      	str	r3, [r7, #32]
   return(result);
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592c:	63bb      	str	r3, [r7, #56]	; 0x38
 800592e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3314      	adds	r3, #20
 8005934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005936:	633a      	str	r2, [r7, #48]	; 0x30
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e5      	bne.n	8005916 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	60fb      	str	r3, [r7, #12]
   return(result);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
 8005962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800596a:	61fa      	str	r2, [r7, #28]
 800596c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	69b9      	ldr	r1, [r7, #24]
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	617b      	str	r3, [r7, #20]
   return(result);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e5      	bne.n	800594a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800597e:	e002      	b.n	8005986 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005980:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005982:	f7ff ff83 	bl	800588c <HAL_UART_TxCpltCallback>
}
 8005986:	bf00      	nop
 8005988:	3740      	adds	r7, #64	; 0x40
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff7f 	bl	80058a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b09c      	sub	sp, #112	; 0x70
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d172      	bne.n	8005aac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	2200      	movs	r2, #0
 80059ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e5      	bne.n	80059cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3314      	adds	r3, #20
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	667b      	str	r3, [r7, #100]	; 0x64
 8005a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a20:	647a      	str	r2, [r7, #68]	; 0x44
 8005a22:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e5      	bne.n	8005a00 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	623b      	str	r3, [r7, #32]
   return(result);
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3314      	adds	r3, #20
 8005a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a54:	633a      	str	r2, [r7, #48]	; 0x30
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d119      	bne.n	8005aac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0310 	bic.w	r3, r3, #16
 8005a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a98:	61fa      	str	r2, [r7, #28]
 8005a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e5      	bne.n	8005a78 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005abc:	f7ff ff0e 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ac0:	e002      	b.n	8005ac8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005ac2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ac4:	f7ff fef6 	bl	80058b4 <HAL_UART_RxCpltCallback>
}
 8005ac8:	bf00      	nop
 8005aca:	3770      	adds	r7, #112	; 0x70
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d108      	bne.n	8005af8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff fef3 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005af6:	e002      	b.n	8005afe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7fb fc07 	bl	800130c <HAL_UART_RxHalfCpltCallback>
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	bf0c      	ite	eq
 8005b26:	2301      	moveq	r3, #1
 8005b28:	2300      	movne	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b21      	cmp	r3, #33	; 0x21
 8005b38:	d108      	bne.n	8005b4c <UART_DMAError+0x46>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b46:	68b8      	ldr	r0, [r7, #8]
 8005b48:	f000 f8c6 	bl	8005cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b22      	cmp	r3, #34	; 0x22
 8005b6c:	d108      	bne.n	8005b80 <UART_DMAError+0x7a>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b7a:	68b8      	ldr	r0, [r7, #8]
 8005b7c:	f000 f8d4 	bl	8005d28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	f043 0210 	orr.w	r2, r3, #16
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	f7ff fe9b 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b098      	sub	sp, #96	; 0x60
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2222      	movs	r2, #34	; 0x22
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	4a40      	ldr	r2, [pc, #256]	; (8005ccc <UART_Start_Receive_DMA+0x130>)
 8005bca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	4a3f      	ldr	r2, [pc, #252]	; (8005cd0 <UART_Start_Receive_DMA+0x134>)
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	4a3e      	ldr	r2, [pc, #248]	; (8005cd4 <UART_Start_Receive_DMA+0x138>)
 8005bda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	2200      	movs	r2, #0
 8005be2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005be4:	f107 0308 	add.w	r3, r7, #8
 8005be8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	f7fd fdbc 	bl	8003778 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d019      	beq.n	8005c5a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330c      	adds	r3, #12
 8005c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c46:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	657b      	str	r3, [r7, #84]	; 0x54
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cae:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6a39      	ldr	r1, [r7, #32]
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e5      	bne.n	8005c8e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3760      	adds	r7, #96	; 0x60
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	080059ab 	.word	0x080059ab
 8005cd0:	08005ad1 	.word	0x08005ad1
 8005cd4:	08005b07 	.word	0x08005b07

08005cd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	; 0x24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	61ba      	str	r2, [r7, #24]
 8005d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6979      	ldr	r1, [r7, #20]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e5      	bne.n	8005ce0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d1c:	bf00      	nop
 8005d1e:	3724      	adds	r7, #36	; 0x24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b095      	sub	sp, #84	; 0x54
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d50:	643a      	str	r2, [r7, #64]	; 0x40
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f023 0301 	bic.w	r3, r3, #1
 8005d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3314      	adds	r3, #20
 8005d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e5      	bne.n	8005d64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d119      	bne.n	8005dd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0310 	bic.w	r3, r3, #16
 8005db6:	647b      	str	r3, [r7, #68]	; 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc0:	61ba      	str	r2, [r7, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e5      	bne.n	8005da0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005de2:	bf00      	nop
 8005de4:	3754      	adds	r7, #84	; 0x54
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff fd5d 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b21      	cmp	r3, #33	; 0x21
 8005e28:	d13e      	bne.n	8005ea8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e32:	d114      	bne.n	8005e5e <UART_Transmit_IT+0x48>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d110      	bne.n	8005e5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	1c9a      	adds	r2, r3, #2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]
 8005e5c:	e008      	b.n	8005e70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	1c59      	adds	r1, r3, #1
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6211      	str	r1, [r2, #32]
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e000      	b.n	8005eaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ea8:	2302      	movs	r3, #2
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fcd8 	bl	800588c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b08c      	sub	sp, #48	; 0x30
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b22      	cmp	r3, #34	; 0x22
 8005ef8:	f040 80ab 	bne.w	8006052 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f04:	d117      	bne.n	8005f36 <UART_Receive_IT+0x50>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d113      	bne.n	8005f36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	629a      	str	r2, [r3, #40]	; 0x28
 8005f34:	e026      	b.n	8005f84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f48:	d007      	beq.n	8005f5a <UART_Receive_IT+0x74>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <UART_Receive_IT+0x82>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	e008      	b.n	8005f7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4619      	mov	r1, r3
 8005f92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d15a      	bne.n	800604e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0220 	bic.w	r2, r2, #32
 8005fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d135      	bne.n	8006044 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	613b      	str	r3, [r7, #16]
   return(result);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f023 0310 	bic.w	r3, r3, #16
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffe:	623a      	str	r2, [r7, #32]
 8006000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	69f9      	ldr	r1, [r7, #28]
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	61bb      	str	r3, [r7, #24]
   return(result);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e5      	bne.n	8005fde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b10      	cmp	r3, #16
 800601e:	d10a      	bne.n	8006036 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff fc4d 	bl	80058dc <HAL_UARTEx_RxEventCallback>
 8006042:	e002      	b.n	800604a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fc35 	bl	80058b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e002      	b.n	8006054 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e000      	b.n	8006054 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006052:	2302      	movs	r3, #2
  }
}
 8006054:	4618      	mov	r0, r3
 8006056:	3730      	adds	r7, #48	; 0x30
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800605c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006060:	b0c0      	sub	sp, #256	; 0x100
 8006062:	af00      	add	r7, sp, #0
 8006064:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	68d9      	ldr	r1, [r3, #12]
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	ea40 0301 	orr.w	r3, r0, r1
 8006084:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	431a      	orrs	r2, r3
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	431a      	orrs	r2, r3
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060b4:	f021 010c 	bic.w	r1, r1, #12
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060c2:	430b      	orrs	r3, r1
 80060c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	6999      	ldr	r1, [r3, #24]
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	ea40 0301 	orr.w	r3, r0, r1
 80060e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b8f      	ldr	r3, [pc, #572]	; (8006328 <UART_SetConfig+0x2cc>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d005      	beq.n	80060fc <UART_SetConfig+0xa0>
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8d      	ldr	r3, [pc, #564]	; (800632c <UART_SetConfig+0x2d0>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d104      	bne.n	8006106 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fe fcae 	bl	8004a5c <HAL_RCC_GetPCLK2Freq>
 8006100:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006104:	e003      	b.n	800610e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006106:	f7fe fc95 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 800610a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006118:	f040 810c 	bne.w	8006334 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800611c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006120:	2200      	movs	r2, #0
 8006122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006126:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800612a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800612e:	4622      	mov	r2, r4
 8006130:	462b      	mov	r3, r5
 8006132:	1891      	adds	r1, r2, r2
 8006134:	65b9      	str	r1, [r7, #88]	; 0x58
 8006136:	415b      	adcs	r3, r3
 8006138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800613a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800613e:	4621      	mov	r1, r4
 8006140:	eb12 0801 	adds.w	r8, r2, r1
 8006144:	4629      	mov	r1, r5
 8006146:	eb43 0901 	adc.w	r9, r3, r1
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800615a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800615e:	4690      	mov	r8, r2
 8006160:	4699      	mov	r9, r3
 8006162:	4623      	mov	r3, r4
 8006164:	eb18 0303 	adds.w	r3, r8, r3
 8006168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800616c:	462b      	mov	r3, r5
 800616e:	eb49 0303 	adc.w	r3, r9, r3
 8006172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006182:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006186:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800618a:	460b      	mov	r3, r1
 800618c:	18db      	adds	r3, r3, r3
 800618e:	653b      	str	r3, [r7, #80]	; 0x50
 8006190:	4613      	mov	r3, r2
 8006192:	eb42 0303 	adc.w	r3, r2, r3
 8006196:	657b      	str	r3, [r7, #84]	; 0x54
 8006198:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800619c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061a0:	f7fa fd5a 	bl	8000c58 <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4b61      	ldr	r3, [pc, #388]	; (8006330 <UART_SetConfig+0x2d4>)
 80061aa:	fba3 2302 	umull	r2, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	011c      	lsls	r4, r3, #4
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80061cc:	415b      	adcs	r3, r3
 80061ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061d4:	4641      	mov	r1, r8
 80061d6:	eb12 0a01 	adds.w	sl, r2, r1
 80061da:	4649      	mov	r1, r9
 80061dc:	eb43 0b01 	adc.w	fp, r3, r1
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f4:	4692      	mov	sl, r2
 80061f6:	469b      	mov	fp, r3
 80061f8:	4643      	mov	r3, r8
 80061fa:	eb1a 0303 	adds.w	r3, sl, r3
 80061fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006202:	464b      	mov	r3, r9
 8006204:	eb4b 0303 	adc.w	r3, fp, r3
 8006208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006218:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800621c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006220:	460b      	mov	r3, r1
 8006222:	18db      	adds	r3, r3, r3
 8006224:	643b      	str	r3, [r7, #64]	; 0x40
 8006226:	4613      	mov	r3, r2
 8006228:	eb42 0303 	adc.w	r3, r2, r3
 800622c:	647b      	str	r3, [r7, #68]	; 0x44
 800622e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006236:	f7fa fd0f 	bl	8000c58 <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4611      	mov	r1, r2
 8006240:	4b3b      	ldr	r3, [pc, #236]	; (8006330 <UART_SetConfig+0x2d4>)
 8006242:	fba3 2301 	umull	r2, r3, r3, r1
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	2264      	movs	r2, #100	; 0x64
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	1acb      	subs	r3, r1, r3
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006256:	4b36      	ldr	r3, [pc, #216]	; (8006330 <UART_SetConfig+0x2d4>)
 8006258:	fba3 2302 	umull	r2, r3, r3, r2
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006264:	441c      	add	r4, r3
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006270:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006274:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	1891      	adds	r1, r2, r2
 800627e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006280:	415b      	adcs	r3, r3
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006288:	4641      	mov	r1, r8
 800628a:	1851      	adds	r1, r2, r1
 800628c:	6339      	str	r1, [r7, #48]	; 0x30
 800628e:	4649      	mov	r1, r9
 8006290:	414b      	adcs	r3, r1
 8006292:	637b      	str	r3, [r7, #52]	; 0x34
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062a0:	4659      	mov	r1, fp
 80062a2:	00cb      	lsls	r3, r1, #3
 80062a4:	4651      	mov	r1, sl
 80062a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062aa:	4651      	mov	r1, sl
 80062ac:	00ca      	lsls	r2, r1, #3
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	4642      	mov	r2, r8
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062bc:	464b      	mov	r3, r9
 80062be:	460a      	mov	r2, r1
 80062c0:	eb42 0303 	adc.w	r3, r2, r3
 80062c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062dc:	460b      	mov	r3, r1
 80062de:	18db      	adds	r3, r3, r3
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e2:	4613      	mov	r3, r2
 80062e4:	eb42 0303 	adc.w	r3, r2, r3
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062f2:	f7fa fcb1 	bl	8000c58 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <UART_SetConfig+0x2d4>)
 80062fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	2164      	movs	r1, #100	; 0x64
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	3332      	adds	r3, #50	; 0x32
 800630e:	4a08      	ldr	r2, [pc, #32]	; (8006330 <UART_SetConfig+0x2d4>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f003 0207 	and.w	r2, r3, #7
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4422      	add	r2, r4
 8006322:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006324:	e106      	b.n	8006534 <UART_SetConfig+0x4d8>
 8006326:	bf00      	nop
 8006328:	40011000 	.word	0x40011000
 800632c:	40011400 	.word	0x40011400
 8006330:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006338:	2200      	movs	r2, #0
 800633a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800633e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006342:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006346:	4642      	mov	r2, r8
 8006348:	464b      	mov	r3, r9
 800634a:	1891      	adds	r1, r2, r2
 800634c:	6239      	str	r1, [r7, #32]
 800634e:	415b      	adcs	r3, r3
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
 8006352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006356:	4641      	mov	r1, r8
 8006358:	1854      	adds	r4, r2, r1
 800635a:	4649      	mov	r1, r9
 800635c:	eb43 0501 	adc.w	r5, r3, r1
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	00eb      	lsls	r3, r5, #3
 800636a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800636e:	00e2      	lsls	r2, r4, #3
 8006370:	4614      	mov	r4, r2
 8006372:	461d      	mov	r5, r3
 8006374:	4643      	mov	r3, r8
 8006376:	18e3      	adds	r3, r4, r3
 8006378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800637c:	464b      	mov	r3, r9
 800637e:	eb45 0303 	adc.w	r3, r5, r3
 8006382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063a2:	4629      	mov	r1, r5
 80063a4:	008b      	lsls	r3, r1, #2
 80063a6:	4621      	mov	r1, r4
 80063a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ac:	4621      	mov	r1, r4
 80063ae:	008a      	lsls	r2, r1, #2
 80063b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063b4:	f7fa fc50 	bl	8000c58 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4b60      	ldr	r3, [pc, #384]	; (8006540 <UART_SetConfig+0x4e4>)
 80063be:	fba3 2302 	umull	r2, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	011c      	lsls	r4, r3, #4
 80063c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	1891      	adds	r1, r2, r2
 80063de:	61b9      	str	r1, [r7, #24]
 80063e0:	415b      	adcs	r3, r3
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e8:	4641      	mov	r1, r8
 80063ea:	1851      	adds	r1, r2, r1
 80063ec:	6139      	str	r1, [r7, #16]
 80063ee:	4649      	mov	r1, r9
 80063f0:	414b      	adcs	r3, r1
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006400:	4659      	mov	r1, fp
 8006402:	00cb      	lsls	r3, r1, #3
 8006404:	4651      	mov	r1, sl
 8006406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800640a:	4651      	mov	r1, sl
 800640c:	00ca      	lsls	r2, r1, #3
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	4603      	mov	r3, r0
 8006414:	4642      	mov	r2, r8
 8006416:	189b      	adds	r3, r3, r2
 8006418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800641c:	464b      	mov	r3, r9
 800641e:	460a      	mov	r2, r1
 8006420:	eb42 0303 	adc.w	r3, r2, r3
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	67bb      	str	r3, [r7, #120]	; 0x78
 8006432:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006440:	4649      	mov	r1, r9
 8006442:	008b      	lsls	r3, r1, #2
 8006444:	4641      	mov	r1, r8
 8006446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644a:	4641      	mov	r1, r8
 800644c:	008a      	lsls	r2, r1, #2
 800644e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006452:	f7fa fc01 	bl	8000c58 <__aeabi_uldivmod>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4611      	mov	r1, r2
 800645c:	4b38      	ldr	r3, [pc, #224]	; (8006540 <UART_SetConfig+0x4e4>)
 800645e:	fba3 2301 	umull	r2, r3, r3, r1
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	2264      	movs	r2, #100	; 0x64
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	1acb      	subs	r3, r1, r3
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	3332      	adds	r3, #50	; 0x32
 8006470:	4a33      	ldr	r2, [pc, #204]	; (8006540 <UART_SetConfig+0x4e4>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800647c:	441c      	add	r4, r3
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006482:	2200      	movs	r2, #0
 8006484:	673b      	str	r3, [r7, #112]	; 0x70
 8006486:	677a      	str	r2, [r7, #116]	; 0x74
 8006488:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	1891      	adds	r1, r2, r2
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	415b      	adcs	r3, r3
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800649c:	4641      	mov	r1, r8
 800649e:	1851      	adds	r1, r2, r1
 80064a0:	6039      	str	r1, [r7, #0]
 80064a2:	4649      	mov	r1, r9
 80064a4:	414b      	adcs	r3, r1
 80064a6:	607b      	str	r3, [r7, #4]
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064b4:	4659      	mov	r1, fp
 80064b6:	00cb      	lsls	r3, r1, #3
 80064b8:	4651      	mov	r1, sl
 80064ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064be:	4651      	mov	r1, sl
 80064c0:	00ca      	lsls	r2, r1, #3
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	4642      	mov	r2, r8
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ce:	464b      	mov	r3, r9
 80064d0:	460a      	mov	r2, r1
 80064d2:	eb42 0303 	adc.w	r3, r2, r3
 80064d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	663b      	str	r3, [r7, #96]	; 0x60
 80064e2:	667a      	str	r2, [r7, #100]	; 0x64
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064f0:	4649      	mov	r1, r9
 80064f2:	008b      	lsls	r3, r1, #2
 80064f4:	4641      	mov	r1, r8
 80064f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064fa:	4641      	mov	r1, r8
 80064fc:	008a      	lsls	r2, r1, #2
 80064fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006502:	f7fa fba9 	bl	8000c58 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <UART_SetConfig+0x4e4>)
 800650c:	fba3 1302 	umull	r1, r3, r3, r2
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	2164      	movs	r1, #100	; 0x64
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	3332      	adds	r3, #50	; 0x32
 800651e:	4a08      	ldr	r2, [pc, #32]	; (8006540 <UART_SetConfig+0x4e4>)
 8006520:	fba2 2303 	umull	r2, r3, r2, r3
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f003 020f 	and.w	r2, r3, #15
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4422      	add	r2, r4
 8006532:	609a      	str	r2, [r3, #8]
}
 8006534:	bf00      	nop
 8006536:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800653a:	46bd      	mov	sp, r7
 800653c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006540:	51eb851f 	.word	0x51eb851f

08006544 <atoi>:
 8006544:	220a      	movs	r2, #10
 8006546:	2100      	movs	r1, #0
 8006548:	f000 b882 	b.w	8006650 <strtol>

0800654c <_strtol_l.constprop.0>:
 800654c:	2b01      	cmp	r3, #1
 800654e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006552:	d001      	beq.n	8006558 <_strtol_l.constprop.0+0xc>
 8006554:	2b24      	cmp	r3, #36	; 0x24
 8006556:	d906      	bls.n	8006566 <_strtol_l.constprop.0+0x1a>
 8006558:	f000 fe30 	bl	80071bc <__errno>
 800655c:	2316      	movs	r3, #22
 800655e:	6003      	str	r3, [r0, #0]
 8006560:	2000      	movs	r0, #0
 8006562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006566:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800664c <_strtol_l.constprop.0+0x100>
 800656a:	460d      	mov	r5, r1
 800656c:	462e      	mov	r6, r5
 800656e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006572:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006576:	f017 0708 	ands.w	r7, r7, #8
 800657a:	d1f7      	bne.n	800656c <_strtol_l.constprop.0+0x20>
 800657c:	2c2d      	cmp	r4, #45	; 0x2d
 800657e:	d132      	bne.n	80065e6 <_strtol_l.constprop.0+0x9a>
 8006580:	782c      	ldrb	r4, [r5, #0]
 8006582:	2701      	movs	r7, #1
 8006584:	1cb5      	adds	r5, r6, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d05b      	beq.n	8006642 <_strtol_l.constprop.0+0xf6>
 800658a:	2b10      	cmp	r3, #16
 800658c:	d109      	bne.n	80065a2 <_strtol_l.constprop.0+0x56>
 800658e:	2c30      	cmp	r4, #48	; 0x30
 8006590:	d107      	bne.n	80065a2 <_strtol_l.constprop.0+0x56>
 8006592:	782c      	ldrb	r4, [r5, #0]
 8006594:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006598:	2c58      	cmp	r4, #88	; 0x58
 800659a:	d14d      	bne.n	8006638 <_strtol_l.constprop.0+0xec>
 800659c:	786c      	ldrb	r4, [r5, #1]
 800659e:	2310      	movs	r3, #16
 80065a0:	3502      	adds	r5, #2
 80065a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80065a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80065aa:	f04f 0e00 	mov.w	lr, #0
 80065ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80065b2:	4676      	mov	r6, lr
 80065b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80065b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80065bc:	f1bc 0f09 	cmp.w	ip, #9
 80065c0:	d816      	bhi.n	80065f0 <_strtol_l.constprop.0+0xa4>
 80065c2:	4664      	mov	r4, ip
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	dd24      	ble.n	8006612 <_strtol_l.constprop.0+0xc6>
 80065c8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80065cc:	d008      	beq.n	80065e0 <_strtol_l.constprop.0+0x94>
 80065ce:	45b1      	cmp	r9, r6
 80065d0:	d31c      	bcc.n	800660c <_strtol_l.constprop.0+0xc0>
 80065d2:	d101      	bne.n	80065d8 <_strtol_l.constprop.0+0x8c>
 80065d4:	45a2      	cmp	sl, r4
 80065d6:	db19      	blt.n	800660c <_strtol_l.constprop.0+0xc0>
 80065d8:	fb06 4603 	mla	r6, r6, r3, r4
 80065dc:	f04f 0e01 	mov.w	lr, #1
 80065e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065e4:	e7e8      	b.n	80065b8 <_strtol_l.constprop.0+0x6c>
 80065e6:	2c2b      	cmp	r4, #43	; 0x2b
 80065e8:	bf04      	itt	eq
 80065ea:	782c      	ldrbeq	r4, [r5, #0]
 80065ec:	1cb5      	addeq	r5, r6, #2
 80065ee:	e7ca      	b.n	8006586 <_strtol_l.constprop.0+0x3a>
 80065f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80065f4:	f1bc 0f19 	cmp.w	ip, #25
 80065f8:	d801      	bhi.n	80065fe <_strtol_l.constprop.0+0xb2>
 80065fa:	3c37      	subs	r4, #55	; 0x37
 80065fc:	e7e2      	b.n	80065c4 <_strtol_l.constprop.0+0x78>
 80065fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006602:	f1bc 0f19 	cmp.w	ip, #25
 8006606:	d804      	bhi.n	8006612 <_strtol_l.constprop.0+0xc6>
 8006608:	3c57      	subs	r4, #87	; 0x57
 800660a:	e7db      	b.n	80065c4 <_strtol_l.constprop.0+0x78>
 800660c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8006610:	e7e6      	b.n	80065e0 <_strtol_l.constprop.0+0x94>
 8006612:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006616:	d105      	bne.n	8006624 <_strtol_l.constprop.0+0xd8>
 8006618:	2322      	movs	r3, #34	; 0x22
 800661a:	6003      	str	r3, [r0, #0]
 800661c:	4646      	mov	r6, r8
 800661e:	b942      	cbnz	r2, 8006632 <_strtol_l.constprop.0+0xe6>
 8006620:	4630      	mov	r0, r6
 8006622:	e79e      	b.n	8006562 <_strtol_l.constprop.0+0x16>
 8006624:	b107      	cbz	r7, 8006628 <_strtol_l.constprop.0+0xdc>
 8006626:	4276      	negs	r6, r6
 8006628:	2a00      	cmp	r2, #0
 800662a:	d0f9      	beq.n	8006620 <_strtol_l.constprop.0+0xd4>
 800662c:	f1be 0f00 	cmp.w	lr, #0
 8006630:	d000      	beq.n	8006634 <_strtol_l.constprop.0+0xe8>
 8006632:	1e69      	subs	r1, r5, #1
 8006634:	6011      	str	r1, [r2, #0]
 8006636:	e7f3      	b.n	8006620 <_strtol_l.constprop.0+0xd4>
 8006638:	2430      	movs	r4, #48	; 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1b1      	bne.n	80065a2 <_strtol_l.constprop.0+0x56>
 800663e:	2308      	movs	r3, #8
 8006640:	e7af      	b.n	80065a2 <_strtol_l.constprop.0+0x56>
 8006642:	2c30      	cmp	r4, #48	; 0x30
 8006644:	d0a5      	beq.n	8006592 <_strtol_l.constprop.0+0x46>
 8006646:	230a      	movs	r3, #10
 8006648:	e7ab      	b.n	80065a2 <_strtol_l.constprop.0+0x56>
 800664a:	bf00      	nop
 800664c:	08009f69 	.word	0x08009f69

08006650 <strtol>:
 8006650:	4613      	mov	r3, r2
 8006652:	460a      	mov	r2, r1
 8006654:	4601      	mov	r1, r0
 8006656:	4802      	ldr	r0, [pc, #8]	; (8006660 <strtol+0x10>)
 8006658:	6800      	ldr	r0, [r0, #0]
 800665a:	f7ff bf77 	b.w	800654c <_strtol_l.constprop.0>
 800665e:	bf00      	nop
 8006660:	2000008c 	.word	0x2000008c

08006664 <__cvt>:
 8006664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	ec55 4b10 	vmov	r4, r5, d0
 800666c:	2d00      	cmp	r5, #0
 800666e:	460e      	mov	r6, r1
 8006670:	4619      	mov	r1, r3
 8006672:	462b      	mov	r3, r5
 8006674:	bfbb      	ittet	lt
 8006676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800667a:	461d      	movlt	r5, r3
 800667c:	2300      	movge	r3, #0
 800667e:	232d      	movlt	r3, #45	; 0x2d
 8006680:	700b      	strb	r3, [r1, #0]
 8006682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006688:	4691      	mov	r9, r2
 800668a:	f023 0820 	bic.w	r8, r3, #32
 800668e:	bfbc      	itt	lt
 8006690:	4622      	movlt	r2, r4
 8006692:	4614      	movlt	r4, r2
 8006694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006698:	d005      	beq.n	80066a6 <__cvt+0x42>
 800669a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800669e:	d100      	bne.n	80066a2 <__cvt+0x3e>
 80066a0:	3601      	adds	r6, #1
 80066a2:	2102      	movs	r1, #2
 80066a4:	e000      	b.n	80066a8 <__cvt+0x44>
 80066a6:	2103      	movs	r1, #3
 80066a8:	ab03      	add	r3, sp, #12
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	ab02      	add	r3, sp, #8
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	ec45 4b10 	vmov	d0, r4, r5
 80066b4:	4653      	mov	r3, sl
 80066b6:	4632      	mov	r2, r6
 80066b8:	f000 fe36 	bl	8007328 <_dtoa_r>
 80066bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80066c0:	4607      	mov	r7, r0
 80066c2:	d102      	bne.n	80066ca <__cvt+0x66>
 80066c4:	f019 0f01 	tst.w	r9, #1
 80066c8:	d022      	beq.n	8006710 <__cvt+0xac>
 80066ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066ce:	eb07 0906 	add.w	r9, r7, r6
 80066d2:	d110      	bne.n	80066f6 <__cvt+0x92>
 80066d4:	783b      	ldrb	r3, [r7, #0]
 80066d6:	2b30      	cmp	r3, #48	; 0x30
 80066d8:	d10a      	bne.n	80066f0 <__cvt+0x8c>
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	4620      	mov	r0, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	f7fa f9f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80066e6:	b918      	cbnz	r0, 80066f0 <__cvt+0x8c>
 80066e8:	f1c6 0601 	rsb	r6, r6, #1
 80066ec:	f8ca 6000 	str.w	r6, [sl]
 80066f0:	f8da 3000 	ldr.w	r3, [sl]
 80066f4:	4499      	add	r9, r3
 80066f6:	2200      	movs	r2, #0
 80066f8:	2300      	movs	r3, #0
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	f7fa f9eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006702:	b108      	cbz	r0, 8006708 <__cvt+0xa4>
 8006704:	f8cd 900c 	str.w	r9, [sp, #12]
 8006708:	2230      	movs	r2, #48	; 0x30
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	454b      	cmp	r3, r9
 800670e:	d307      	bcc.n	8006720 <__cvt+0xbc>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006714:	1bdb      	subs	r3, r3, r7
 8006716:	4638      	mov	r0, r7
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	b004      	add	sp, #16
 800671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	9103      	str	r1, [sp, #12]
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e7f0      	b.n	800670a <__cvt+0xa6>

08006728 <__exponent>:
 8006728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800672a:	4603      	mov	r3, r0
 800672c:	2900      	cmp	r1, #0
 800672e:	bfb8      	it	lt
 8006730:	4249      	neglt	r1, r1
 8006732:	f803 2b02 	strb.w	r2, [r3], #2
 8006736:	bfb4      	ite	lt
 8006738:	222d      	movlt	r2, #45	; 0x2d
 800673a:	222b      	movge	r2, #43	; 0x2b
 800673c:	2909      	cmp	r1, #9
 800673e:	7042      	strb	r2, [r0, #1]
 8006740:	dd2a      	ble.n	8006798 <__exponent+0x70>
 8006742:	f10d 0207 	add.w	r2, sp, #7
 8006746:	4617      	mov	r7, r2
 8006748:	260a      	movs	r6, #10
 800674a:	4694      	mov	ip, r2
 800674c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006750:	fb06 1415 	mls	r4, r6, r5, r1
 8006754:	3430      	adds	r4, #48	; 0x30
 8006756:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800675a:	460c      	mov	r4, r1
 800675c:	2c63      	cmp	r4, #99	; 0x63
 800675e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006762:	4629      	mov	r1, r5
 8006764:	dcf1      	bgt.n	800674a <__exponent+0x22>
 8006766:	3130      	adds	r1, #48	; 0x30
 8006768:	f1ac 0402 	sub.w	r4, ip, #2
 800676c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006770:	1c41      	adds	r1, r0, #1
 8006772:	4622      	mov	r2, r4
 8006774:	42ba      	cmp	r2, r7
 8006776:	d30a      	bcc.n	800678e <__exponent+0x66>
 8006778:	f10d 0209 	add.w	r2, sp, #9
 800677c:	eba2 020c 	sub.w	r2, r2, ip
 8006780:	42bc      	cmp	r4, r7
 8006782:	bf88      	it	hi
 8006784:	2200      	movhi	r2, #0
 8006786:	4413      	add	r3, r2
 8006788:	1a18      	subs	r0, r3, r0
 800678a:	b003      	add	sp, #12
 800678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006792:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006796:	e7ed      	b.n	8006774 <__exponent+0x4c>
 8006798:	2330      	movs	r3, #48	; 0x30
 800679a:	3130      	adds	r1, #48	; 0x30
 800679c:	7083      	strb	r3, [r0, #2]
 800679e:	70c1      	strb	r1, [r0, #3]
 80067a0:	1d03      	adds	r3, r0, #4
 80067a2:	e7f1      	b.n	8006788 <__exponent+0x60>

080067a4 <_printf_float>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	ed2d 8b02 	vpush	{d8}
 80067ac:	b08d      	sub	sp, #52	; 0x34
 80067ae:	460c      	mov	r4, r1
 80067b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80067b4:	4616      	mov	r6, r2
 80067b6:	461f      	mov	r7, r3
 80067b8:	4605      	mov	r5, r0
 80067ba:	f000 fcb5 	bl	8007128 <_localeconv_r>
 80067be:	f8d0 a000 	ldr.w	sl, [r0]
 80067c2:	4650      	mov	r0, sl
 80067c4:	f7f9 fd5c 	bl	8000280 <strlen>
 80067c8:	2300      	movs	r3, #0
 80067ca:	930a      	str	r3, [sp, #40]	; 0x28
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	f8d8 3000 	ldr.w	r3, [r8]
 80067d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80067d8:	3307      	adds	r3, #7
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	f103 0208 	add.w	r2, r3, #8
 80067e2:	f8c8 2000 	str.w	r2, [r8]
 80067e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80067f4:	ee08 0a10 	vmov	s16, r0
 80067f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80067fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006800:	4b9e      	ldr	r3, [pc, #632]	; (8006a7c <_printf_float+0x2d8>)
 8006802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006806:	f7fa f999 	bl	8000b3c <__aeabi_dcmpun>
 800680a:	bb88      	cbnz	r0, 8006870 <_printf_float+0xcc>
 800680c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006810:	4b9a      	ldr	r3, [pc, #616]	; (8006a7c <_printf_float+0x2d8>)
 8006812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006816:	f7fa f973 	bl	8000b00 <__aeabi_dcmple>
 800681a:	bb48      	cbnz	r0, 8006870 <_printf_float+0xcc>
 800681c:	2200      	movs	r2, #0
 800681e:	2300      	movs	r3, #0
 8006820:	4640      	mov	r0, r8
 8006822:	4649      	mov	r1, r9
 8006824:	f7fa f962 	bl	8000aec <__aeabi_dcmplt>
 8006828:	b110      	cbz	r0, 8006830 <_printf_float+0x8c>
 800682a:	232d      	movs	r3, #45	; 0x2d
 800682c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006830:	4a93      	ldr	r2, [pc, #588]	; (8006a80 <_printf_float+0x2dc>)
 8006832:	4b94      	ldr	r3, [pc, #592]	; (8006a84 <_printf_float+0x2e0>)
 8006834:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006838:	bf94      	ite	ls
 800683a:	4690      	movls	r8, r2
 800683c:	4698      	movhi	r8, r3
 800683e:	2303      	movs	r3, #3
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	9b05      	ldr	r3, [sp, #20]
 8006844:	f023 0304 	bic.w	r3, r3, #4
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	f04f 0900 	mov.w	r9, #0
 800684e:	9700      	str	r7, [sp, #0]
 8006850:	4633      	mov	r3, r6
 8006852:	aa0b      	add	r2, sp, #44	; 0x2c
 8006854:	4621      	mov	r1, r4
 8006856:	4628      	mov	r0, r5
 8006858:	f000 f9da 	bl	8006c10 <_printf_common>
 800685c:	3001      	adds	r0, #1
 800685e:	f040 8090 	bne.w	8006982 <_printf_float+0x1de>
 8006862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006866:	b00d      	add	sp, #52	; 0x34
 8006868:	ecbd 8b02 	vpop	{d8}
 800686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	4640      	mov	r0, r8
 8006876:	4649      	mov	r1, r9
 8006878:	f7fa f960 	bl	8000b3c <__aeabi_dcmpun>
 800687c:	b140      	cbz	r0, 8006890 <_printf_float+0xec>
 800687e:	464b      	mov	r3, r9
 8006880:	2b00      	cmp	r3, #0
 8006882:	bfbc      	itt	lt
 8006884:	232d      	movlt	r3, #45	; 0x2d
 8006886:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800688a:	4a7f      	ldr	r2, [pc, #508]	; (8006a88 <_printf_float+0x2e4>)
 800688c:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <_printf_float+0x2e8>)
 800688e:	e7d1      	b.n	8006834 <_printf_float+0x90>
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006896:	9206      	str	r2, [sp, #24]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	d13f      	bne.n	800691c <_printf_float+0x178>
 800689c:	2306      	movs	r3, #6
 800689e:	6063      	str	r3, [r4, #4]
 80068a0:	9b05      	ldr	r3, [sp, #20]
 80068a2:	6861      	ldr	r1, [r4, #4]
 80068a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068a8:	2300      	movs	r3, #0
 80068aa:	9303      	str	r3, [sp, #12]
 80068ac:	ab0a      	add	r3, sp, #40	; 0x28
 80068ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80068b2:	ab09      	add	r3, sp, #36	; 0x24
 80068b4:	ec49 8b10 	vmov	d0, r8, r9
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068c0:	4628      	mov	r0, r5
 80068c2:	f7ff fecf 	bl	8006664 <__cvt>
 80068c6:	9b06      	ldr	r3, [sp, #24]
 80068c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ca:	2b47      	cmp	r3, #71	; 0x47
 80068cc:	4680      	mov	r8, r0
 80068ce:	d108      	bne.n	80068e2 <_printf_float+0x13e>
 80068d0:	1cc8      	adds	r0, r1, #3
 80068d2:	db02      	blt.n	80068da <_printf_float+0x136>
 80068d4:	6863      	ldr	r3, [r4, #4]
 80068d6:	4299      	cmp	r1, r3
 80068d8:	dd41      	ble.n	800695e <_printf_float+0x1ba>
 80068da:	f1ab 0302 	sub.w	r3, fp, #2
 80068de:	fa5f fb83 	uxtb.w	fp, r3
 80068e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068e6:	d820      	bhi.n	800692a <_printf_float+0x186>
 80068e8:	3901      	subs	r1, #1
 80068ea:	465a      	mov	r2, fp
 80068ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068f0:	9109      	str	r1, [sp, #36]	; 0x24
 80068f2:	f7ff ff19 	bl	8006728 <__exponent>
 80068f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068f8:	1813      	adds	r3, r2, r0
 80068fa:	2a01      	cmp	r2, #1
 80068fc:	4681      	mov	r9, r0
 80068fe:	6123      	str	r3, [r4, #16]
 8006900:	dc02      	bgt.n	8006908 <_printf_float+0x164>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	07d2      	lsls	r2, r2, #31
 8006906:	d501      	bpl.n	800690c <_printf_float+0x168>
 8006908:	3301      	adds	r3, #1
 800690a:	6123      	str	r3, [r4, #16]
 800690c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006910:	2b00      	cmp	r3, #0
 8006912:	d09c      	beq.n	800684e <_printf_float+0xaa>
 8006914:	232d      	movs	r3, #45	; 0x2d
 8006916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691a:	e798      	b.n	800684e <_printf_float+0xaa>
 800691c:	9a06      	ldr	r2, [sp, #24]
 800691e:	2a47      	cmp	r2, #71	; 0x47
 8006920:	d1be      	bne.n	80068a0 <_printf_float+0xfc>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1bc      	bne.n	80068a0 <_printf_float+0xfc>
 8006926:	2301      	movs	r3, #1
 8006928:	e7b9      	b.n	800689e <_printf_float+0xfa>
 800692a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800692e:	d118      	bne.n	8006962 <_printf_float+0x1be>
 8006930:	2900      	cmp	r1, #0
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	dd0b      	ble.n	800694e <_printf_float+0x1aa>
 8006936:	6121      	str	r1, [r4, #16]
 8006938:	b913      	cbnz	r3, 8006940 <_printf_float+0x19c>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	07d0      	lsls	r0, r2, #31
 800693e:	d502      	bpl.n	8006946 <_printf_float+0x1a2>
 8006940:	3301      	adds	r3, #1
 8006942:	440b      	add	r3, r1
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	65a1      	str	r1, [r4, #88]	; 0x58
 8006948:	f04f 0900 	mov.w	r9, #0
 800694c:	e7de      	b.n	800690c <_printf_float+0x168>
 800694e:	b913      	cbnz	r3, 8006956 <_printf_float+0x1b2>
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	07d2      	lsls	r2, r2, #31
 8006954:	d501      	bpl.n	800695a <_printf_float+0x1b6>
 8006956:	3302      	adds	r3, #2
 8006958:	e7f4      	b.n	8006944 <_printf_float+0x1a0>
 800695a:	2301      	movs	r3, #1
 800695c:	e7f2      	b.n	8006944 <_printf_float+0x1a0>
 800695e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006964:	4299      	cmp	r1, r3
 8006966:	db05      	blt.n	8006974 <_printf_float+0x1d0>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	6121      	str	r1, [r4, #16]
 800696c:	07d8      	lsls	r0, r3, #31
 800696e:	d5ea      	bpl.n	8006946 <_printf_float+0x1a2>
 8006970:	1c4b      	adds	r3, r1, #1
 8006972:	e7e7      	b.n	8006944 <_printf_float+0x1a0>
 8006974:	2900      	cmp	r1, #0
 8006976:	bfd4      	ite	le
 8006978:	f1c1 0202 	rsble	r2, r1, #2
 800697c:	2201      	movgt	r2, #1
 800697e:	4413      	add	r3, r2
 8006980:	e7e0      	b.n	8006944 <_printf_float+0x1a0>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	055a      	lsls	r2, r3, #21
 8006986:	d407      	bmi.n	8006998 <_printf_float+0x1f4>
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	4642      	mov	r2, r8
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	d12c      	bne.n	80069f0 <_printf_float+0x24c>
 8006996:	e764      	b.n	8006862 <_printf_float+0xbe>
 8006998:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800699c:	f240 80e0 	bls.w	8006b60 <_printf_float+0x3bc>
 80069a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069a4:	2200      	movs	r2, #0
 80069a6:	2300      	movs	r3, #0
 80069a8:	f7fa f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d034      	beq.n	8006a1a <_printf_float+0x276>
 80069b0:	4a37      	ldr	r2, [pc, #220]	; (8006a90 <_printf_float+0x2ec>)
 80069b2:	2301      	movs	r3, #1
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	f43f af51 	beq.w	8006862 <_printf_float+0xbe>
 80069c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c4:	429a      	cmp	r2, r3
 80069c6:	db02      	blt.n	80069ce <_printf_float+0x22a>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	07d8      	lsls	r0, r3, #31
 80069cc:	d510      	bpl.n	80069f0 <_printf_float+0x24c>
 80069ce:	ee18 3a10 	vmov	r3, s16
 80069d2:	4652      	mov	r2, sl
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af41 	beq.w	8006862 <_printf_float+0xbe>
 80069e0:	f04f 0800 	mov.w	r8, #0
 80069e4:	f104 091a 	add.w	r9, r4, #26
 80069e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ea:	3b01      	subs	r3, #1
 80069ec:	4543      	cmp	r3, r8
 80069ee:	dc09      	bgt.n	8006a04 <_printf_float+0x260>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	079b      	lsls	r3, r3, #30
 80069f4:	f100 8107 	bmi.w	8006c06 <_printf_float+0x462>
 80069f8:	68e0      	ldr	r0, [r4, #12]
 80069fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fc:	4298      	cmp	r0, r3
 80069fe:	bfb8      	it	lt
 8006a00:	4618      	movlt	r0, r3
 8006a02:	e730      	b.n	8006866 <_printf_float+0xc2>
 8006a04:	2301      	movs	r3, #1
 8006a06:	464a      	mov	r2, r9
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f af27 	beq.w	8006862 <_printf_float+0xbe>
 8006a14:	f108 0801 	add.w	r8, r8, #1
 8006a18:	e7e6      	b.n	80069e8 <_printf_float+0x244>
 8006a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dc39      	bgt.n	8006a94 <_printf_float+0x2f0>
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <_printf_float+0x2ec>)
 8006a22:	2301      	movs	r3, #1
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	f43f af19 	beq.w	8006862 <_printf_float+0xbe>
 8006a30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a34:	4313      	orrs	r3, r2
 8006a36:	d102      	bne.n	8006a3e <_printf_float+0x29a>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	d5d8      	bpl.n	80069f0 <_printf_float+0x24c>
 8006a3e:	ee18 3a10 	vmov	r3, s16
 8006a42:	4652      	mov	r2, sl
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f af09 	beq.w	8006862 <_printf_float+0xbe>
 8006a50:	f04f 0900 	mov.w	r9, #0
 8006a54:	f104 0a1a 	add.w	sl, r4, #26
 8006a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5a:	425b      	negs	r3, r3
 8006a5c:	454b      	cmp	r3, r9
 8006a5e:	dc01      	bgt.n	8006a64 <_printf_float+0x2c0>
 8006a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a62:	e792      	b.n	800698a <_printf_float+0x1e6>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4652      	mov	r2, sl
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	47b8      	blx	r7
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f aef7 	beq.w	8006862 <_printf_float+0xbe>
 8006a74:	f109 0901 	add.w	r9, r9, #1
 8006a78:	e7ee      	b.n	8006a58 <_printf_float+0x2b4>
 8006a7a:	bf00      	nop
 8006a7c:	7fefffff 	.word	0x7fefffff
 8006a80:	0800a069 	.word	0x0800a069
 8006a84:	0800a06d 	.word	0x0800a06d
 8006a88:	0800a071 	.word	0x0800a071
 8006a8c:	0800a075 	.word	0x0800a075
 8006a90:	0800a079 	.word	0x0800a079
 8006a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	bfa8      	it	ge
 8006a9c:	461a      	movge	r2, r3
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	4691      	mov	r9, r2
 8006aa2:	dc37      	bgt.n	8006b14 <_printf_float+0x370>
 8006aa4:	f04f 0b00 	mov.w	fp, #0
 8006aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aac:	f104 021a 	add.w	r2, r4, #26
 8006ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ab2:	9305      	str	r3, [sp, #20]
 8006ab4:	eba3 0309 	sub.w	r3, r3, r9
 8006ab8:	455b      	cmp	r3, fp
 8006aba:	dc33      	bgt.n	8006b24 <_printf_float+0x380>
 8006abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	db3b      	blt.n	8006b3c <_printf_float+0x398>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07da      	lsls	r2, r3, #31
 8006ac8:	d438      	bmi.n	8006b3c <_printf_float+0x398>
 8006aca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ace:	eba2 0903 	sub.w	r9, r2, r3
 8006ad2:	9b05      	ldr	r3, [sp, #20]
 8006ad4:	1ad2      	subs	r2, r2, r3
 8006ad6:	4591      	cmp	r9, r2
 8006ad8:	bfa8      	it	ge
 8006ada:	4691      	movge	r9, r2
 8006adc:	f1b9 0f00 	cmp.w	r9, #0
 8006ae0:	dc35      	bgt.n	8006b4e <_printf_float+0x3aa>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aea:	f104 0a1a 	add.w	sl, r4, #26
 8006aee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006af2:	1a9b      	subs	r3, r3, r2
 8006af4:	eba3 0309 	sub.w	r3, r3, r9
 8006af8:	4543      	cmp	r3, r8
 8006afa:	f77f af79 	ble.w	80069f0 <_printf_float+0x24c>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4652      	mov	r2, sl
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f43f aeaa 	beq.w	8006862 <_printf_float+0xbe>
 8006b0e:	f108 0801 	add.w	r8, r8, #1
 8006b12:	e7ec      	b.n	8006aee <_printf_float+0x34a>
 8006b14:	4613      	mov	r3, r2
 8006b16:	4631      	mov	r1, r6
 8006b18:	4642      	mov	r2, r8
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d1c0      	bne.n	8006aa4 <_printf_float+0x300>
 8006b22:	e69e      	b.n	8006862 <_printf_float+0xbe>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	9205      	str	r2, [sp, #20]
 8006b2c:	47b8      	blx	r7
 8006b2e:	3001      	adds	r0, #1
 8006b30:	f43f ae97 	beq.w	8006862 <_printf_float+0xbe>
 8006b34:	9a05      	ldr	r2, [sp, #20]
 8006b36:	f10b 0b01 	add.w	fp, fp, #1
 8006b3a:	e7b9      	b.n	8006ab0 <_printf_float+0x30c>
 8006b3c:	ee18 3a10 	vmov	r3, s16
 8006b40:	4652      	mov	r2, sl
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1be      	bne.n	8006aca <_printf_float+0x326>
 8006b4c:	e689      	b.n	8006862 <_printf_float+0xbe>
 8006b4e:	9a05      	ldr	r2, [sp, #20]
 8006b50:	464b      	mov	r3, r9
 8006b52:	4442      	add	r2, r8
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b8      	blx	r7
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d1c1      	bne.n	8006ae2 <_printf_float+0x33e>
 8006b5e:	e680      	b.n	8006862 <_printf_float+0xbe>
 8006b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b62:	2a01      	cmp	r2, #1
 8006b64:	dc01      	bgt.n	8006b6a <_printf_float+0x3c6>
 8006b66:	07db      	lsls	r3, r3, #31
 8006b68:	d53a      	bpl.n	8006be0 <_printf_float+0x43c>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b8      	blx	r7
 8006b74:	3001      	adds	r0, #1
 8006b76:	f43f ae74 	beq.w	8006862 <_printf_float+0xbe>
 8006b7a:	ee18 3a10 	vmov	r3, s16
 8006b7e:	4652      	mov	r2, sl
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	f43f ae6b 	beq.w	8006862 <_printf_float+0xbe>
 8006b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b90:	2200      	movs	r2, #0
 8006b92:	2300      	movs	r3, #0
 8006b94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006b98:	f7f9 ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b9c:	b9d8      	cbnz	r0, 8006bd6 <_printf_float+0x432>
 8006b9e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006ba2:	f108 0201 	add.w	r2, r8, #1
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	d10e      	bne.n	8006bce <_printf_float+0x42a>
 8006bb0:	e657      	b.n	8006862 <_printf_float+0xbe>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f ae50 	beq.w	8006862 <_printf_float+0xbe>
 8006bc2:	f108 0801 	add.w	r8, r8, #1
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	4543      	cmp	r3, r8
 8006bcc:	dcf1      	bgt.n	8006bb2 <_printf_float+0x40e>
 8006bce:	464b      	mov	r3, r9
 8006bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bd4:	e6da      	b.n	800698c <_printf_float+0x1e8>
 8006bd6:	f04f 0800 	mov.w	r8, #0
 8006bda:	f104 0a1a 	add.w	sl, r4, #26
 8006bde:	e7f2      	b.n	8006bc6 <_printf_float+0x422>
 8006be0:	2301      	movs	r3, #1
 8006be2:	4642      	mov	r2, r8
 8006be4:	e7df      	b.n	8006ba6 <_printf_float+0x402>
 8006be6:	2301      	movs	r3, #1
 8006be8:	464a      	mov	r2, r9
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f43f ae36 	beq.w	8006862 <_printf_float+0xbe>
 8006bf6:	f108 0801 	add.w	r8, r8, #1
 8006bfa:	68e3      	ldr	r3, [r4, #12]
 8006bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bfe:	1a5b      	subs	r3, r3, r1
 8006c00:	4543      	cmp	r3, r8
 8006c02:	dcf0      	bgt.n	8006be6 <_printf_float+0x442>
 8006c04:	e6f8      	b.n	80069f8 <_printf_float+0x254>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	f104 0919 	add.w	r9, r4, #25
 8006c0e:	e7f4      	b.n	8006bfa <_printf_float+0x456>

08006c10 <_printf_common>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	4616      	mov	r6, r2
 8006c16:	4699      	mov	r9, r3
 8006c18:	688a      	ldr	r2, [r1, #8]
 8006c1a:	690b      	ldr	r3, [r1, #16]
 8006c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bfb8      	it	lt
 8006c24:	4613      	movlt	r3, r2
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b10a      	cbz	r2, 8006c36 <_printf_common+0x26>
 8006c32:	3301      	adds	r3, #1
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	0699      	lsls	r1, r3, #26
 8006c3a:	bf42      	ittt	mi
 8006c3c:	6833      	ldrmi	r3, [r6, #0]
 8006c3e:	3302      	addmi	r3, #2
 8006c40:	6033      	strmi	r3, [r6, #0]
 8006c42:	6825      	ldr	r5, [r4, #0]
 8006c44:	f015 0506 	ands.w	r5, r5, #6
 8006c48:	d106      	bne.n	8006c58 <_printf_common+0x48>
 8006c4a:	f104 0a19 	add.w	sl, r4, #25
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	6832      	ldr	r2, [r6, #0]
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc26      	bgt.n	8006ca6 <_printf_common+0x96>
 8006c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c5c:	1e13      	subs	r3, r2, #0
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	bf18      	it	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	0692      	lsls	r2, r2, #26
 8006c66:	d42b      	bmi.n	8006cc0 <_printf_common+0xb0>
 8006c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	3001      	adds	r0, #1
 8006c74:	d01e      	beq.n	8006cb4 <_printf_common+0xa4>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	6922      	ldr	r2, [r4, #16]
 8006c7a:	f003 0306 	and.w	r3, r3, #6
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	bf02      	ittt	eq
 8006c82:	68e5      	ldreq	r5, [r4, #12]
 8006c84:	6833      	ldreq	r3, [r6, #0]
 8006c86:	1aed      	subeq	r5, r5, r3
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	bf0c      	ite	eq
 8006c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c90:	2500      	movne	r5, #0
 8006c92:	4293      	cmp	r3, r2
 8006c94:	bfc4      	itt	gt
 8006c96:	1a9b      	subgt	r3, r3, r2
 8006c98:	18ed      	addgt	r5, r5, r3
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	341a      	adds	r4, #26
 8006c9e:	42b5      	cmp	r5, r6
 8006ca0:	d11a      	bne.n	8006cd8 <_printf_common+0xc8>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e008      	b.n	8006cb8 <_printf_common+0xa8>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	4649      	mov	r1, r9
 8006cac:	4638      	mov	r0, r7
 8006cae:	47c0      	blx	r8
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d103      	bne.n	8006cbc <_printf_common+0xac>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	e7c6      	b.n	8006c4e <_printf_common+0x3e>
 8006cc0:	18e1      	adds	r1, r4, r3
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	2030      	movs	r0, #48	; 0x30
 8006cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cca:	4422      	add	r2, r4
 8006ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	e7c7      	b.n	8006c68 <_printf_common+0x58>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4622      	mov	r2, r4
 8006cdc:	4649      	mov	r1, r9
 8006cde:	4638      	mov	r0, r7
 8006ce0:	47c0      	blx	r8
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d0e6      	beq.n	8006cb4 <_printf_common+0xa4>
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7d9      	b.n	8006c9e <_printf_common+0x8e>
	...

08006cec <_printf_i>:
 8006cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	7e0f      	ldrb	r7, [r1, #24]
 8006cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cf4:	2f78      	cmp	r7, #120	; 0x78
 8006cf6:	4691      	mov	r9, r2
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	469a      	mov	sl, r3
 8006cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d02:	d807      	bhi.n	8006d14 <_printf_i+0x28>
 8006d04:	2f62      	cmp	r7, #98	; 0x62
 8006d06:	d80a      	bhi.n	8006d1e <_printf_i+0x32>
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	f000 80d4 	beq.w	8006eb6 <_printf_i+0x1ca>
 8006d0e:	2f58      	cmp	r7, #88	; 0x58
 8006d10:	f000 80c0 	beq.w	8006e94 <_printf_i+0x1a8>
 8006d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d1c:	e03a      	b.n	8006d94 <_printf_i+0xa8>
 8006d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d22:	2b15      	cmp	r3, #21
 8006d24:	d8f6      	bhi.n	8006d14 <_printf_i+0x28>
 8006d26:	a101      	add	r1, pc, #4	; (adr r1, 8006d2c <_printf_i+0x40>)
 8006d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d99 	.word	0x08006d99
 8006d34:	08006d15 	.word	0x08006d15
 8006d38:	08006d15 	.word	0x08006d15
 8006d3c:	08006d15 	.word	0x08006d15
 8006d40:	08006d15 	.word	0x08006d15
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006d15 	.word	0x08006d15
 8006d4c:	08006d15 	.word	0x08006d15
 8006d50:	08006d15 	.word	0x08006d15
 8006d54:	08006d15 	.word	0x08006d15
 8006d58:	08006e9d 	.word	0x08006e9d
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006e57 	.word	0x08006e57
 8006d64:	08006d15 	.word	0x08006d15
 8006d68:	08006d15 	.word	0x08006d15
 8006d6c:	08006ebf 	.word	0x08006ebf
 8006d70:	08006d15 	.word	0x08006d15
 8006d74:	08006dc5 	.word	0x08006dc5
 8006d78:	08006d15 	.word	0x08006d15
 8006d7c:	08006d15 	.word	0x08006d15
 8006d80:	08006e5f 	.word	0x08006e5f
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	602a      	str	r2, [r5, #0]
 8006d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d94:	2301      	movs	r3, #1
 8006d96:	e09f      	b.n	8006ed8 <_printf_i+0x1ec>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	0607      	lsls	r7, r0, #24
 8006d9e:	f103 0104 	add.w	r1, r3, #4
 8006da2:	6029      	str	r1, [r5, #0]
 8006da4:	d501      	bpl.n	8006daa <_printf_i+0xbe>
 8006da6:	681e      	ldr	r6, [r3, #0]
 8006da8:	e003      	b.n	8006db2 <_printf_i+0xc6>
 8006daa:	0646      	lsls	r6, r0, #25
 8006dac:	d5fb      	bpl.n	8006da6 <_printf_i+0xba>
 8006dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	da03      	bge.n	8006dbe <_printf_i+0xd2>
 8006db6:	232d      	movs	r3, #45	; 0x2d
 8006db8:	4276      	negs	r6, r6
 8006dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dbe:	485a      	ldr	r0, [pc, #360]	; (8006f28 <_printf_i+0x23c>)
 8006dc0:	230a      	movs	r3, #10
 8006dc2:	e012      	b.n	8006dea <_printf_i+0xfe>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	6820      	ldr	r0, [r4, #0]
 8006dc8:	1d19      	adds	r1, r3, #4
 8006dca:	6029      	str	r1, [r5, #0]
 8006dcc:	0605      	lsls	r5, r0, #24
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0xe8>
 8006dd0:	681e      	ldr	r6, [r3, #0]
 8006dd2:	e002      	b.n	8006dda <_printf_i+0xee>
 8006dd4:	0641      	lsls	r1, r0, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0xe4>
 8006dd8:	881e      	ldrh	r6, [r3, #0]
 8006dda:	4853      	ldr	r0, [pc, #332]	; (8006f28 <_printf_i+0x23c>)
 8006ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8006dde:	bf0c      	ite	eq
 8006de0:	2308      	moveq	r3, #8
 8006de2:	230a      	movne	r3, #10
 8006de4:	2100      	movs	r1, #0
 8006de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dea:	6865      	ldr	r5, [r4, #4]
 8006dec:	60a5      	str	r5, [r4, #8]
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	bfa2      	ittt	ge
 8006df2:	6821      	ldrge	r1, [r4, #0]
 8006df4:	f021 0104 	bicge.w	r1, r1, #4
 8006df8:	6021      	strge	r1, [r4, #0]
 8006dfa:	b90e      	cbnz	r6, 8006e00 <_printf_i+0x114>
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	d04b      	beq.n	8006e98 <_printf_i+0x1ac>
 8006e00:	4615      	mov	r5, r2
 8006e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e06:	fb03 6711 	mls	r7, r3, r1, r6
 8006e0a:	5dc7      	ldrb	r7, [r0, r7]
 8006e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e10:	4637      	mov	r7, r6
 8006e12:	42bb      	cmp	r3, r7
 8006e14:	460e      	mov	r6, r1
 8006e16:	d9f4      	bls.n	8006e02 <_printf_i+0x116>
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d10b      	bne.n	8006e34 <_printf_i+0x148>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07de      	lsls	r6, r3, #31
 8006e20:	d508      	bpl.n	8006e34 <_printf_i+0x148>
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	6861      	ldr	r1, [r4, #4]
 8006e26:	4299      	cmp	r1, r3
 8006e28:	bfde      	ittt	le
 8006e2a:	2330      	movle	r3, #48	; 0x30
 8006e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006e34:	1b52      	subs	r2, r2, r5
 8006e36:	6122      	str	r2, [r4, #16]
 8006e38:	f8cd a000 	str.w	sl, [sp]
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	aa03      	add	r2, sp, #12
 8006e40:	4621      	mov	r1, r4
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7ff fee4 	bl	8006c10 <_printf_common>
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d14a      	bne.n	8006ee2 <_printf_i+0x1f6>
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e50:	b004      	add	sp, #16
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	f043 0320 	orr.w	r3, r3, #32
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	4833      	ldr	r0, [pc, #204]	; (8006f2c <_printf_i+0x240>)
 8006e60:	2778      	movs	r7, #120	; 0x78
 8006e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	6829      	ldr	r1, [r5, #0]
 8006e6a:	061f      	lsls	r7, r3, #24
 8006e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e70:	d402      	bmi.n	8006e78 <_printf_i+0x18c>
 8006e72:	065f      	lsls	r7, r3, #25
 8006e74:	bf48      	it	mi
 8006e76:	b2b6      	uxthmi	r6, r6
 8006e78:	07df      	lsls	r7, r3, #31
 8006e7a:	bf48      	it	mi
 8006e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8006e80:	6029      	str	r1, [r5, #0]
 8006e82:	bf48      	it	mi
 8006e84:	6023      	strmi	r3, [r4, #0]
 8006e86:	b91e      	cbnz	r6, 8006e90 <_printf_i+0x1a4>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	f023 0320 	bic.w	r3, r3, #32
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	2310      	movs	r3, #16
 8006e92:	e7a7      	b.n	8006de4 <_printf_i+0xf8>
 8006e94:	4824      	ldr	r0, [pc, #144]	; (8006f28 <_printf_i+0x23c>)
 8006e96:	e7e4      	b.n	8006e62 <_printf_i+0x176>
 8006e98:	4615      	mov	r5, r2
 8006e9a:	e7bd      	b.n	8006e18 <_printf_i+0x12c>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	6826      	ldr	r6, [r4, #0]
 8006ea0:	6961      	ldr	r1, [r4, #20]
 8006ea2:	1d18      	adds	r0, r3, #4
 8006ea4:	6028      	str	r0, [r5, #0]
 8006ea6:	0635      	lsls	r5, r6, #24
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	d501      	bpl.n	8006eb0 <_printf_i+0x1c4>
 8006eac:	6019      	str	r1, [r3, #0]
 8006eae:	e002      	b.n	8006eb6 <_printf_i+0x1ca>
 8006eb0:	0670      	lsls	r0, r6, #25
 8006eb2:	d5fb      	bpl.n	8006eac <_printf_i+0x1c0>
 8006eb4:	8019      	strh	r1, [r3, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6123      	str	r3, [r4, #16]
 8006eba:	4615      	mov	r5, r2
 8006ebc:	e7bc      	b.n	8006e38 <_printf_i+0x14c>
 8006ebe:	682b      	ldr	r3, [r5, #0]
 8006ec0:	1d1a      	adds	r2, r3, #4
 8006ec2:	602a      	str	r2, [r5, #0]
 8006ec4:	681d      	ldr	r5, [r3, #0]
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7f9 f988 	bl	80001e0 <memchr>
 8006ed0:	b108      	cbz	r0, 8006ed6 <_printf_i+0x1ea>
 8006ed2:	1b40      	subs	r0, r0, r5
 8006ed4:	6060      	str	r0, [r4, #4]
 8006ed6:	6863      	ldr	r3, [r4, #4]
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	2300      	movs	r3, #0
 8006edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee0:	e7aa      	b.n	8006e38 <_printf_i+0x14c>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	4640      	mov	r0, r8
 8006eea:	47d0      	blx	sl
 8006eec:	3001      	adds	r0, #1
 8006eee:	d0ad      	beq.n	8006e4c <_printf_i+0x160>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	079b      	lsls	r3, r3, #30
 8006ef4:	d413      	bmi.n	8006f1e <_printf_i+0x232>
 8006ef6:	68e0      	ldr	r0, [r4, #12]
 8006ef8:	9b03      	ldr	r3, [sp, #12]
 8006efa:	4298      	cmp	r0, r3
 8006efc:	bfb8      	it	lt
 8006efe:	4618      	movlt	r0, r3
 8006f00:	e7a6      	b.n	8006e50 <_printf_i+0x164>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4632      	mov	r2, r6
 8006f06:	4649      	mov	r1, r9
 8006f08:	4640      	mov	r0, r8
 8006f0a:	47d0      	blx	sl
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d09d      	beq.n	8006e4c <_printf_i+0x160>
 8006f10:	3501      	adds	r5, #1
 8006f12:	68e3      	ldr	r3, [r4, #12]
 8006f14:	9903      	ldr	r1, [sp, #12]
 8006f16:	1a5b      	subs	r3, r3, r1
 8006f18:	42ab      	cmp	r3, r5
 8006f1a:	dcf2      	bgt.n	8006f02 <_printf_i+0x216>
 8006f1c:	e7eb      	b.n	8006ef6 <_printf_i+0x20a>
 8006f1e:	2500      	movs	r5, #0
 8006f20:	f104 0619 	add.w	r6, r4, #25
 8006f24:	e7f5      	b.n	8006f12 <_printf_i+0x226>
 8006f26:	bf00      	nop
 8006f28:	0800a07b 	.word	0x0800a07b
 8006f2c:	0800a08c 	.word	0x0800a08c

08006f30 <std>:
 8006f30:	2300      	movs	r3, #0
 8006f32:	b510      	push	{r4, lr}
 8006f34:	4604      	mov	r4, r0
 8006f36:	e9c0 3300 	strd	r3, r3, [r0]
 8006f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f3e:	6083      	str	r3, [r0, #8]
 8006f40:	8181      	strh	r1, [r0, #12]
 8006f42:	6643      	str	r3, [r0, #100]	; 0x64
 8006f44:	81c2      	strh	r2, [r0, #14]
 8006f46:	6183      	str	r3, [r0, #24]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	2208      	movs	r2, #8
 8006f4c:	305c      	adds	r0, #92	; 0x5c
 8006f4e:	f000 f8e2 	bl	8007116 <memset>
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <std+0x38>)
 8006f54:	6263      	str	r3, [r4, #36]	; 0x24
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <std+0x3c>)
 8006f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <std+0x40>)
 8006f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <std+0x44>)
 8006f60:	6224      	str	r4, [r4, #32]
 8006f62:	6323      	str	r3, [r4, #48]	; 0x30
 8006f64:	bd10      	pop	{r4, pc}
 8006f66:	bf00      	nop
 8006f68:	08007091 	.word	0x08007091
 8006f6c:	080070b3 	.word	0x080070b3
 8006f70:	080070eb 	.word	0x080070eb
 8006f74:	0800710f 	.word	0x0800710f

08006f78 <stdio_exit_handler>:
 8006f78:	4a02      	ldr	r2, [pc, #8]	; (8006f84 <stdio_exit_handler+0xc>)
 8006f7a:	4903      	ldr	r1, [pc, #12]	; (8006f88 <stdio_exit_handler+0x10>)
 8006f7c:	4803      	ldr	r0, [pc, #12]	; (8006f8c <stdio_exit_handler+0x14>)
 8006f7e:	f000 b869 	b.w	8007054 <_fwalk_sglue>
 8006f82:	bf00      	nop
 8006f84:	20000034 	.word	0x20000034
 8006f88:	08008911 	.word	0x08008911
 8006f8c:	20000040 	.word	0x20000040

08006f90 <cleanup_stdio>:
 8006f90:	6841      	ldr	r1, [r0, #4]
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <cleanup_stdio+0x34>)
 8006f94:	4299      	cmp	r1, r3
 8006f96:	b510      	push	{r4, lr}
 8006f98:	4604      	mov	r4, r0
 8006f9a:	d001      	beq.n	8006fa0 <cleanup_stdio+0x10>
 8006f9c:	f001 fcb8 	bl	8008910 <_fflush_r>
 8006fa0:	68a1      	ldr	r1, [r4, #8]
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <cleanup_stdio+0x38>)
 8006fa4:	4299      	cmp	r1, r3
 8006fa6:	d002      	beq.n	8006fae <cleanup_stdio+0x1e>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f001 fcb1 	bl	8008910 <_fflush_r>
 8006fae:	68e1      	ldr	r1, [r4, #12]
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <cleanup_stdio+0x3c>)
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	d004      	beq.n	8006fc0 <cleanup_stdio+0x30>
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fbc:	f001 bca8 	b.w	8008910 <_fflush_r>
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000a2c 	.word	0x20000a2c
 8006fc8:	20000a94 	.word	0x20000a94
 8006fcc:	20000afc 	.word	0x20000afc

08006fd0 <global_stdio_init.part.0>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <global_stdio_init.part.0+0x30>)
 8006fd4:	4c0b      	ldr	r4, [pc, #44]	; (8007004 <global_stdio_init.part.0+0x34>)
 8006fd6:	4a0c      	ldr	r2, [pc, #48]	; (8007008 <global_stdio_init.part.0+0x38>)
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	4620      	mov	r0, r4
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2104      	movs	r1, #4
 8006fe0:	f7ff ffa6 	bl	8006f30 <std>
 8006fe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006fe8:	2201      	movs	r2, #1
 8006fea:	2109      	movs	r1, #9
 8006fec:	f7ff ffa0 	bl	8006f30 <std>
 8006ff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffa:	2112      	movs	r1, #18
 8006ffc:	f7ff bf98 	b.w	8006f30 <std>
 8007000:	20000b64 	.word	0x20000b64
 8007004:	20000a2c 	.word	0x20000a2c
 8007008:	08006f79 	.word	0x08006f79

0800700c <__sfp_lock_acquire>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__sfp_lock_acquire+0x8>)
 800700e:	f000 b8ff 	b.w	8007210 <__retarget_lock_acquire_recursive>
 8007012:	bf00      	nop
 8007014:	20000b6d 	.word	0x20000b6d

08007018 <__sfp_lock_release>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__sfp_lock_release+0x8>)
 800701a:	f000 b8fa 	b.w	8007212 <__retarget_lock_release_recursive>
 800701e:	bf00      	nop
 8007020:	20000b6d 	.word	0x20000b6d

08007024 <__sinit>:
 8007024:	b510      	push	{r4, lr}
 8007026:	4604      	mov	r4, r0
 8007028:	f7ff fff0 	bl	800700c <__sfp_lock_acquire>
 800702c:	6a23      	ldr	r3, [r4, #32]
 800702e:	b11b      	cbz	r3, 8007038 <__sinit+0x14>
 8007030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007034:	f7ff bff0 	b.w	8007018 <__sfp_lock_release>
 8007038:	4b04      	ldr	r3, [pc, #16]	; (800704c <__sinit+0x28>)
 800703a:	6223      	str	r3, [r4, #32]
 800703c:	4b04      	ldr	r3, [pc, #16]	; (8007050 <__sinit+0x2c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1f5      	bne.n	8007030 <__sinit+0xc>
 8007044:	f7ff ffc4 	bl	8006fd0 <global_stdio_init.part.0>
 8007048:	e7f2      	b.n	8007030 <__sinit+0xc>
 800704a:	bf00      	nop
 800704c:	08006f91 	.word	0x08006f91
 8007050:	20000b64 	.word	0x20000b64

08007054 <_fwalk_sglue>:
 8007054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007058:	4607      	mov	r7, r0
 800705a:	4688      	mov	r8, r1
 800705c:	4614      	mov	r4, r2
 800705e:	2600      	movs	r6, #0
 8007060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007064:	f1b9 0901 	subs.w	r9, r9, #1
 8007068:	d505      	bpl.n	8007076 <_fwalk_sglue+0x22>
 800706a:	6824      	ldr	r4, [r4, #0]
 800706c:	2c00      	cmp	r4, #0
 800706e:	d1f7      	bne.n	8007060 <_fwalk_sglue+0xc>
 8007070:	4630      	mov	r0, r6
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007076:	89ab      	ldrh	r3, [r5, #12]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d907      	bls.n	800708c <_fwalk_sglue+0x38>
 800707c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007080:	3301      	adds	r3, #1
 8007082:	d003      	beq.n	800708c <_fwalk_sglue+0x38>
 8007084:	4629      	mov	r1, r5
 8007086:	4638      	mov	r0, r7
 8007088:	47c0      	blx	r8
 800708a:	4306      	orrs	r6, r0
 800708c:	3568      	adds	r5, #104	; 0x68
 800708e:	e7e9      	b.n	8007064 <_fwalk_sglue+0x10>

08007090 <__sread>:
 8007090:	b510      	push	{r4, lr}
 8007092:	460c      	mov	r4, r1
 8007094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007098:	f000 f86c 	bl	8007174 <_read_r>
 800709c:	2800      	cmp	r0, #0
 800709e:	bfab      	itete	ge
 80070a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070a2:	89a3      	ldrhlt	r3, [r4, #12]
 80070a4:	181b      	addge	r3, r3, r0
 80070a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070aa:	bfac      	ite	ge
 80070ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80070ae:	81a3      	strhlt	r3, [r4, #12]
 80070b0:	bd10      	pop	{r4, pc}

080070b2 <__swrite>:
 80070b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b6:	461f      	mov	r7, r3
 80070b8:	898b      	ldrh	r3, [r1, #12]
 80070ba:	05db      	lsls	r3, r3, #23
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	4616      	mov	r6, r2
 80070c2:	d505      	bpl.n	80070d0 <__swrite+0x1e>
 80070c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c8:	2302      	movs	r3, #2
 80070ca:	2200      	movs	r2, #0
 80070cc:	f000 f840 	bl	8007150 <_lseek_r>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	4632      	mov	r2, r6
 80070de:	463b      	mov	r3, r7
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070e6:	f000 b857 	b.w	8007198 <_write_r>

080070ea <__sseek>:
 80070ea:	b510      	push	{r4, lr}
 80070ec:	460c      	mov	r4, r1
 80070ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f2:	f000 f82d 	bl	8007150 <_lseek_r>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	bf15      	itete	ne
 80070fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007106:	81a3      	strheq	r3, [r4, #12]
 8007108:	bf18      	it	ne
 800710a:	81a3      	strhne	r3, [r4, #12]
 800710c:	bd10      	pop	{r4, pc}

0800710e <__sclose>:
 800710e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007112:	f000 b80d 	b.w	8007130 <_close_r>

08007116 <memset>:
 8007116:	4402      	add	r2, r0
 8007118:	4603      	mov	r3, r0
 800711a:	4293      	cmp	r3, r2
 800711c:	d100      	bne.n	8007120 <memset+0xa>
 800711e:	4770      	bx	lr
 8007120:	f803 1b01 	strb.w	r1, [r3], #1
 8007124:	e7f9      	b.n	800711a <memset+0x4>
	...

08007128 <_localeconv_r>:
 8007128:	4800      	ldr	r0, [pc, #0]	; (800712c <_localeconv_r+0x4>)
 800712a:	4770      	bx	lr
 800712c:	20000180 	.word	0x20000180

08007130 <_close_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d06      	ldr	r5, [pc, #24]	; (800714c <_close_r+0x1c>)
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	602b      	str	r3, [r5, #0]
 800713c:	f7fa fa15 	bl	800156a <_close>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_close_r+0x1a>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_close_r+0x1a>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20000b68 	.word	0x20000b68

08007150 <_lseek_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	; (8007170 <_lseek_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7fa fa2a 	bl	80015b8 <_lseek>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_lseek_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_lseek_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000b68 	.word	0x20000b68

08007174 <_read_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4d07      	ldr	r5, [pc, #28]	; (8007194 <_read_r+0x20>)
 8007178:	4604      	mov	r4, r0
 800717a:	4608      	mov	r0, r1
 800717c:	4611      	mov	r1, r2
 800717e:	2200      	movs	r2, #0
 8007180:	602a      	str	r2, [r5, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	f7fa f9b8 	bl	80014f8 <_read>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	d102      	bne.n	8007192 <_read_r+0x1e>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	b103      	cbz	r3, 8007192 <_read_r+0x1e>
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	bd38      	pop	{r3, r4, r5, pc}
 8007194:	20000b68 	.word	0x20000b68

08007198 <_write_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4d07      	ldr	r5, [pc, #28]	; (80071b8 <_write_r+0x20>)
 800719c:	4604      	mov	r4, r0
 800719e:	4608      	mov	r0, r1
 80071a0:	4611      	mov	r1, r2
 80071a2:	2200      	movs	r2, #0
 80071a4:	602a      	str	r2, [r5, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f7fa f9c3 	bl	8001532 <_write>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_write_r+0x1e>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_write_r+0x1e>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	20000b68 	.word	0x20000b68

080071bc <__errno>:
 80071bc:	4b01      	ldr	r3, [pc, #4]	; (80071c4 <__errno+0x8>)
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	2000008c 	.word	0x2000008c

080071c8 <__libc_init_array>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	4d0d      	ldr	r5, [pc, #52]	; (8007200 <__libc_init_array+0x38>)
 80071cc:	4c0d      	ldr	r4, [pc, #52]	; (8007204 <__libc_init_array+0x3c>)
 80071ce:	1b64      	subs	r4, r4, r5
 80071d0:	10a4      	asrs	r4, r4, #2
 80071d2:	2600      	movs	r6, #0
 80071d4:	42a6      	cmp	r6, r4
 80071d6:	d109      	bne.n	80071ec <__libc_init_array+0x24>
 80071d8:	4d0b      	ldr	r5, [pc, #44]	; (8007208 <__libc_init_array+0x40>)
 80071da:	4c0c      	ldr	r4, [pc, #48]	; (800720c <__libc_init_array+0x44>)
 80071dc:	f002 fea4 	bl	8009f28 <_init>
 80071e0:	1b64      	subs	r4, r4, r5
 80071e2:	10a4      	asrs	r4, r4, #2
 80071e4:	2600      	movs	r6, #0
 80071e6:	42a6      	cmp	r6, r4
 80071e8:	d105      	bne.n	80071f6 <__libc_init_array+0x2e>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f0:	4798      	blx	r3
 80071f2:	3601      	adds	r6, #1
 80071f4:	e7ee      	b.n	80071d4 <__libc_init_array+0xc>
 80071f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071fa:	4798      	blx	r3
 80071fc:	3601      	adds	r6, #1
 80071fe:	e7f2      	b.n	80071e6 <__libc_init_array+0x1e>
 8007200:	0800a318 	.word	0x0800a318
 8007204:	0800a318 	.word	0x0800a318
 8007208:	0800a318 	.word	0x0800a318
 800720c:	0800a31c 	.word	0x0800a31c

08007210 <__retarget_lock_acquire_recursive>:
 8007210:	4770      	bx	lr

08007212 <__retarget_lock_release_recursive>:
 8007212:	4770      	bx	lr

08007214 <quorem>:
 8007214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	6903      	ldr	r3, [r0, #16]
 800721a:	690c      	ldr	r4, [r1, #16]
 800721c:	42a3      	cmp	r3, r4
 800721e:	4607      	mov	r7, r0
 8007220:	db7e      	blt.n	8007320 <quorem+0x10c>
 8007222:	3c01      	subs	r4, #1
 8007224:	f101 0814 	add.w	r8, r1, #20
 8007228:	f100 0514 	add.w	r5, r0, #20
 800722c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800723a:	3301      	adds	r3, #1
 800723c:	429a      	cmp	r2, r3
 800723e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007242:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007246:	fbb2 f6f3 	udiv	r6, r2, r3
 800724a:	d331      	bcc.n	80072b0 <quorem+0x9c>
 800724c:	f04f 0e00 	mov.w	lr, #0
 8007250:	4640      	mov	r0, r8
 8007252:	46ac      	mov	ip, r5
 8007254:	46f2      	mov	sl, lr
 8007256:	f850 2b04 	ldr.w	r2, [r0], #4
 800725a:	b293      	uxth	r3, r2
 800725c:	fb06 e303 	mla	r3, r6, r3, lr
 8007260:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007264:	0c1a      	lsrs	r2, r3, #16
 8007266:	b29b      	uxth	r3, r3
 8007268:	ebaa 0303 	sub.w	r3, sl, r3
 800726c:	f8dc a000 	ldr.w	sl, [ip]
 8007270:	fa13 f38a 	uxtah	r3, r3, sl
 8007274:	fb06 220e 	mla	r2, r6, lr, r2
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007280:	b292      	uxth	r2, r2
 8007282:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007286:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800728a:	f8bd 3000 	ldrh.w	r3, [sp]
 800728e:	4581      	cmp	r9, r0
 8007290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007294:	f84c 3b04 	str.w	r3, [ip], #4
 8007298:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800729c:	d2db      	bcs.n	8007256 <quorem+0x42>
 800729e:	f855 300b 	ldr.w	r3, [r5, fp]
 80072a2:	b92b      	cbnz	r3, 80072b0 <quorem+0x9c>
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	3b04      	subs	r3, #4
 80072a8:	429d      	cmp	r5, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	d32c      	bcc.n	8007308 <quorem+0xf4>
 80072ae:	613c      	str	r4, [r7, #16]
 80072b0:	4638      	mov	r0, r7
 80072b2:	f001 f9a7 	bl	8008604 <__mcmp>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	db22      	blt.n	8007300 <quorem+0xec>
 80072ba:	3601      	adds	r6, #1
 80072bc:	4629      	mov	r1, r5
 80072be:	2000      	movs	r0, #0
 80072c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80072c4:	f8d1 c000 	ldr.w	ip, [r1]
 80072c8:	b293      	uxth	r3, r2
 80072ca:	1ac3      	subs	r3, r0, r3
 80072cc:	0c12      	lsrs	r2, r2, #16
 80072ce:	fa13 f38c 	uxtah	r3, r3, ip
 80072d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80072d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072e0:	45c1      	cmp	r9, r8
 80072e2:	f841 3b04 	str.w	r3, [r1], #4
 80072e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072ea:	d2e9      	bcs.n	80072c0 <quorem+0xac>
 80072ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072f4:	b922      	cbnz	r2, 8007300 <quorem+0xec>
 80072f6:	3b04      	subs	r3, #4
 80072f8:	429d      	cmp	r5, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	d30a      	bcc.n	8007314 <quorem+0x100>
 80072fe:	613c      	str	r4, [r7, #16]
 8007300:	4630      	mov	r0, r6
 8007302:	b003      	add	sp, #12
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	3b04      	subs	r3, #4
 800730c:	2a00      	cmp	r2, #0
 800730e:	d1ce      	bne.n	80072ae <quorem+0x9a>
 8007310:	3c01      	subs	r4, #1
 8007312:	e7c9      	b.n	80072a8 <quorem+0x94>
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	3b04      	subs	r3, #4
 8007318:	2a00      	cmp	r2, #0
 800731a:	d1f0      	bne.n	80072fe <quorem+0xea>
 800731c:	3c01      	subs	r4, #1
 800731e:	e7eb      	b.n	80072f8 <quorem+0xe4>
 8007320:	2000      	movs	r0, #0
 8007322:	e7ee      	b.n	8007302 <quorem+0xee>
 8007324:	0000      	movs	r0, r0
	...

08007328 <_dtoa_r>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	ed2d 8b04 	vpush	{d8-d9}
 8007330:	69c5      	ldr	r5, [r0, #28]
 8007332:	b093      	sub	sp, #76	; 0x4c
 8007334:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007338:	ec57 6b10 	vmov	r6, r7, d0
 800733c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007340:	9107      	str	r1, [sp, #28]
 8007342:	4604      	mov	r4, r0
 8007344:	920a      	str	r2, [sp, #40]	; 0x28
 8007346:	930d      	str	r3, [sp, #52]	; 0x34
 8007348:	b975      	cbnz	r5, 8007368 <_dtoa_r+0x40>
 800734a:	2010      	movs	r0, #16
 800734c:	f000 fe2a 	bl	8007fa4 <malloc>
 8007350:	4602      	mov	r2, r0
 8007352:	61e0      	str	r0, [r4, #28]
 8007354:	b920      	cbnz	r0, 8007360 <_dtoa_r+0x38>
 8007356:	4bae      	ldr	r3, [pc, #696]	; (8007610 <_dtoa_r+0x2e8>)
 8007358:	21ef      	movs	r1, #239	; 0xef
 800735a:	48ae      	ldr	r0, [pc, #696]	; (8007614 <_dtoa_r+0x2ec>)
 800735c:	f001 fb1e 	bl	800899c <__assert_func>
 8007360:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007364:	6005      	str	r5, [r0, #0]
 8007366:	60c5      	str	r5, [r0, #12]
 8007368:	69e3      	ldr	r3, [r4, #28]
 800736a:	6819      	ldr	r1, [r3, #0]
 800736c:	b151      	cbz	r1, 8007384 <_dtoa_r+0x5c>
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	604a      	str	r2, [r1, #4]
 8007372:	2301      	movs	r3, #1
 8007374:	4093      	lsls	r3, r2
 8007376:	608b      	str	r3, [r1, #8]
 8007378:	4620      	mov	r0, r4
 800737a:	f000 ff07 	bl	800818c <_Bfree>
 800737e:	69e3      	ldr	r3, [r4, #28]
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	1e3b      	subs	r3, r7, #0
 8007386:	bfbb      	ittet	lt
 8007388:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800738c:	9303      	strlt	r3, [sp, #12]
 800738e:	2300      	movge	r3, #0
 8007390:	2201      	movlt	r2, #1
 8007392:	bfac      	ite	ge
 8007394:	f8c8 3000 	strge.w	r3, [r8]
 8007398:	f8c8 2000 	strlt.w	r2, [r8]
 800739c:	4b9e      	ldr	r3, [pc, #632]	; (8007618 <_dtoa_r+0x2f0>)
 800739e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073a2:	ea33 0308 	bics.w	r3, r3, r8
 80073a6:	d11b      	bne.n	80073e0 <_dtoa_r+0xb8>
 80073a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073b4:	4333      	orrs	r3, r6
 80073b6:	f000 8593 	beq.w	8007ee0 <_dtoa_r+0xbb8>
 80073ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073bc:	b963      	cbnz	r3, 80073d8 <_dtoa_r+0xb0>
 80073be:	4b97      	ldr	r3, [pc, #604]	; (800761c <_dtoa_r+0x2f4>)
 80073c0:	e027      	b.n	8007412 <_dtoa_r+0xea>
 80073c2:	4b97      	ldr	r3, [pc, #604]	; (8007620 <_dtoa_r+0x2f8>)
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	9800      	ldr	r0, [sp, #0]
 80073ce:	b013      	add	sp, #76	; 0x4c
 80073d0:	ecbd 8b04 	vpop	{d8-d9}
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	4b90      	ldr	r3, [pc, #576]	; (800761c <_dtoa_r+0x2f4>)
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	3303      	adds	r3, #3
 80073de:	e7f3      	b.n	80073c8 <_dtoa_r+0xa0>
 80073e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073e4:	2200      	movs	r2, #0
 80073e6:	ec51 0b17 	vmov	r0, r1, d7
 80073ea:	eeb0 8a47 	vmov.f32	s16, s14
 80073ee:	eef0 8a67 	vmov.f32	s17, s15
 80073f2:	2300      	movs	r3, #0
 80073f4:	f7f9 fb70 	bl	8000ad8 <__aeabi_dcmpeq>
 80073f8:	4681      	mov	r9, r0
 80073fa:	b160      	cbz	r0, 8007416 <_dtoa_r+0xee>
 80073fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073fe:	2301      	movs	r3, #1
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8568 	beq.w	8007eda <_dtoa_r+0xbb2>
 800740a:	4b86      	ldr	r3, [pc, #536]	; (8007624 <_dtoa_r+0x2fc>)
 800740c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	3b01      	subs	r3, #1
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	e7da      	b.n	80073cc <_dtoa_r+0xa4>
 8007416:	aa10      	add	r2, sp, #64	; 0x40
 8007418:	a911      	add	r1, sp, #68	; 0x44
 800741a:	4620      	mov	r0, r4
 800741c:	eeb0 0a48 	vmov.f32	s0, s16
 8007420:	eef0 0a68 	vmov.f32	s1, s17
 8007424:	f001 f994 	bl	8008750 <__d2b>
 8007428:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800742c:	4682      	mov	sl, r0
 800742e:	2d00      	cmp	r5, #0
 8007430:	d07f      	beq.n	8007532 <_dtoa_r+0x20a>
 8007432:	ee18 3a90 	vmov	r3, s17
 8007436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800743a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800743e:	ec51 0b18 	vmov	r0, r1, d8
 8007442:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007446:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800744a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800744e:	4619      	mov	r1, r3
 8007450:	2200      	movs	r2, #0
 8007452:	4b75      	ldr	r3, [pc, #468]	; (8007628 <_dtoa_r+0x300>)
 8007454:	f7f8 ff20 	bl	8000298 <__aeabi_dsub>
 8007458:	a367      	add	r3, pc, #412	; (adr r3, 80075f8 <_dtoa_r+0x2d0>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f9 f8d3 	bl	8000608 <__aeabi_dmul>
 8007462:	a367      	add	r3, pc, #412	; (adr r3, 8007600 <_dtoa_r+0x2d8>)
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f7f8 ff18 	bl	800029c <__adddf3>
 800746c:	4606      	mov	r6, r0
 800746e:	4628      	mov	r0, r5
 8007470:	460f      	mov	r7, r1
 8007472:	f7f9 f85f 	bl	8000534 <__aeabi_i2d>
 8007476:	a364      	add	r3, pc, #400	; (adr r3, 8007608 <_dtoa_r+0x2e0>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f7f9 f8c4 	bl	8000608 <__aeabi_dmul>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f8 ff08 	bl	800029c <__adddf3>
 800748c:	4606      	mov	r6, r0
 800748e:	460f      	mov	r7, r1
 8007490:	f7f9 fb6a 	bl	8000b68 <__aeabi_d2iz>
 8007494:	2200      	movs	r2, #0
 8007496:	4683      	mov	fp, r0
 8007498:	2300      	movs	r3, #0
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f9 fb25 	bl	8000aec <__aeabi_dcmplt>
 80074a2:	b148      	cbz	r0, 80074b8 <_dtoa_r+0x190>
 80074a4:	4658      	mov	r0, fp
 80074a6:	f7f9 f845 	bl	8000534 <__aeabi_i2d>
 80074aa:	4632      	mov	r2, r6
 80074ac:	463b      	mov	r3, r7
 80074ae:	f7f9 fb13 	bl	8000ad8 <__aeabi_dcmpeq>
 80074b2:	b908      	cbnz	r0, 80074b8 <_dtoa_r+0x190>
 80074b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074b8:	f1bb 0f16 	cmp.w	fp, #22
 80074bc:	d857      	bhi.n	800756e <_dtoa_r+0x246>
 80074be:	4b5b      	ldr	r3, [pc, #364]	; (800762c <_dtoa_r+0x304>)
 80074c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c8:	ec51 0b18 	vmov	r0, r1, d8
 80074cc:	f7f9 fb0e 	bl	8000aec <__aeabi_dcmplt>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d04e      	beq.n	8007572 <_dtoa_r+0x24a>
 80074d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074d8:	2300      	movs	r3, #0
 80074da:	930c      	str	r3, [sp, #48]	; 0x30
 80074dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074de:	1b5b      	subs	r3, r3, r5
 80074e0:	1e5a      	subs	r2, r3, #1
 80074e2:	bf45      	ittet	mi
 80074e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80074e8:	9305      	strmi	r3, [sp, #20]
 80074ea:	2300      	movpl	r3, #0
 80074ec:	2300      	movmi	r3, #0
 80074ee:	9206      	str	r2, [sp, #24]
 80074f0:	bf54      	ite	pl
 80074f2:	9305      	strpl	r3, [sp, #20]
 80074f4:	9306      	strmi	r3, [sp, #24]
 80074f6:	f1bb 0f00 	cmp.w	fp, #0
 80074fa:	db3c      	blt.n	8007576 <_dtoa_r+0x24e>
 80074fc:	9b06      	ldr	r3, [sp, #24]
 80074fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007502:	445b      	add	r3, fp
 8007504:	9306      	str	r3, [sp, #24]
 8007506:	2300      	movs	r3, #0
 8007508:	9308      	str	r3, [sp, #32]
 800750a:	9b07      	ldr	r3, [sp, #28]
 800750c:	2b09      	cmp	r3, #9
 800750e:	d868      	bhi.n	80075e2 <_dtoa_r+0x2ba>
 8007510:	2b05      	cmp	r3, #5
 8007512:	bfc4      	itt	gt
 8007514:	3b04      	subgt	r3, #4
 8007516:	9307      	strgt	r3, [sp, #28]
 8007518:	9b07      	ldr	r3, [sp, #28]
 800751a:	f1a3 0302 	sub.w	r3, r3, #2
 800751e:	bfcc      	ite	gt
 8007520:	2500      	movgt	r5, #0
 8007522:	2501      	movle	r5, #1
 8007524:	2b03      	cmp	r3, #3
 8007526:	f200 8085 	bhi.w	8007634 <_dtoa_r+0x30c>
 800752a:	e8df f003 	tbb	[pc, r3]
 800752e:	3b2e      	.short	0x3b2e
 8007530:	5839      	.short	0x5839
 8007532:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007536:	441d      	add	r5, r3
 8007538:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800753c:	2b20      	cmp	r3, #32
 800753e:	bfc1      	itttt	gt
 8007540:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007544:	fa08 f803 	lslgt.w	r8, r8, r3
 8007548:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800754c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007550:	bfd6      	itet	le
 8007552:	f1c3 0320 	rsble	r3, r3, #32
 8007556:	ea48 0003 	orrgt.w	r0, r8, r3
 800755a:	fa06 f003 	lslle.w	r0, r6, r3
 800755e:	f7f8 ffd9 	bl	8000514 <__aeabi_ui2d>
 8007562:	2201      	movs	r2, #1
 8007564:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007568:	3d01      	subs	r5, #1
 800756a:	920e      	str	r2, [sp, #56]	; 0x38
 800756c:	e76f      	b.n	800744e <_dtoa_r+0x126>
 800756e:	2301      	movs	r3, #1
 8007570:	e7b3      	b.n	80074da <_dtoa_r+0x1b2>
 8007572:	900c      	str	r0, [sp, #48]	; 0x30
 8007574:	e7b2      	b.n	80074dc <_dtoa_r+0x1b4>
 8007576:	9b05      	ldr	r3, [sp, #20]
 8007578:	eba3 030b 	sub.w	r3, r3, fp
 800757c:	9305      	str	r3, [sp, #20]
 800757e:	f1cb 0300 	rsb	r3, fp, #0
 8007582:	9308      	str	r3, [sp, #32]
 8007584:	2300      	movs	r3, #0
 8007586:	930b      	str	r3, [sp, #44]	; 0x2c
 8007588:	e7bf      	b.n	800750a <_dtoa_r+0x1e2>
 800758a:	2300      	movs	r3, #0
 800758c:	9309      	str	r3, [sp, #36]	; 0x24
 800758e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	dc52      	bgt.n	800763a <_dtoa_r+0x312>
 8007594:	2301      	movs	r3, #1
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	461a      	mov	r2, r3
 800759c:	920a      	str	r2, [sp, #40]	; 0x28
 800759e:	e00b      	b.n	80075b8 <_dtoa_r+0x290>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e7f3      	b.n	800758c <_dtoa_r+0x264>
 80075a4:	2300      	movs	r3, #0
 80075a6:	9309      	str	r3, [sp, #36]	; 0x24
 80075a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075aa:	445b      	add	r3, fp
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	3301      	adds	r3, #1
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	bfb8      	it	lt
 80075b6:	2301      	movlt	r3, #1
 80075b8:	69e0      	ldr	r0, [r4, #28]
 80075ba:	2100      	movs	r1, #0
 80075bc:	2204      	movs	r2, #4
 80075be:	f102 0614 	add.w	r6, r2, #20
 80075c2:	429e      	cmp	r6, r3
 80075c4:	d93d      	bls.n	8007642 <_dtoa_r+0x31a>
 80075c6:	6041      	str	r1, [r0, #4]
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fd9f 	bl	800810c <_Balloc>
 80075ce:	9000      	str	r0, [sp, #0]
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d139      	bne.n	8007648 <_dtoa_r+0x320>
 80075d4:	4b16      	ldr	r3, [pc, #88]	; (8007630 <_dtoa_r+0x308>)
 80075d6:	4602      	mov	r2, r0
 80075d8:	f240 11af 	movw	r1, #431	; 0x1af
 80075dc:	e6bd      	b.n	800735a <_dtoa_r+0x32>
 80075de:	2301      	movs	r3, #1
 80075e0:	e7e1      	b.n	80075a6 <_dtoa_r+0x27e>
 80075e2:	2501      	movs	r5, #1
 80075e4:	2300      	movs	r3, #0
 80075e6:	9307      	str	r3, [sp, #28]
 80075e8:	9509      	str	r5, [sp, #36]	; 0x24
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2312      	movs	r3, #18
 80075f6:	e7d1      	b.n	800759c <_dtoa_r+0x274>
 80075f8:	636f4361 	.word	0x636f4361
 80075fc:	3fd287a7 	.word	0x3fd287a7
 8007600:	8b60c8b3 	.word	0x8b60c8b3
 8007604:	3fc68a28 	.word	0x3fc68a28
 8007608:	509f79fb 	.word	0x509f79fb
 800760c:	3fd34413 	.word	0x3fd34413
 8007610:	0800a0aa 	.word	0x0800a0aa
 8007614:	0800a0c1 	.word	0x0800a0c1
 8007618:	7ff00000 	.word	0x7ff00000
 800761c:	0800a0a6 	.word	0x0800a0a6
 8007620:	0800a09d 	.word	0x0800a09d
 8007624:	0800a07a 	.word	0x0800a07a
 8007628:	3ff80000 	.word	0x3ff80000
 800762c:	0800a1b0 	.word	0x0800a1b0
 8007630:	0800a119 	.word	0x0800a119
 8007634:	2301      	movs	r3, #1
 8007636:	9309      	str	r3, [sp, #36]	; 0x24
 8007638:	e7d7      	b.n	80075ea <_dtoa_r+0x2c2>
 800763a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	e7ba      	b.n	80075b8 <_dtoa_r+0x290>
 8007642:	3101      	adds	r1, #1
 8007644:	0052      	lsls	r2, r2, #1
 8007646:	e7ba      	b.n	80075be <_dtoa_r+0x296>
 8007648:	69e3      	ldr	r3, [r4, #28]
 800764a:	9a00      	ldr	r2, [sp, #0]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	2b0e      	cmp	r3, #14
 8007652:	f200 80a8 	bhi.w	80077a6 <_dtoa_r+0x47e>
 8007656:	2d00      	cmp	r5, #0
 8007658:	f000 80a5 	beq.w	80077a6 <_dtoa_r+0x47e>
 800765c:	f1bb 0f00 	cmp.w	fp, #0
 8007660:	dd38      	ble.n	80076d4 <_dtoa_r+0x3ac>
 8007662:	4bc0      	ldr	r3, [pc, #768]	; (8007964 <_dtoa_r+0x63c>)
 8007664:	f00b 020f 	and.w	r2, fp, #15
 8007668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800766c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007670:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007674:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007678:	d019      	beq.n	80076ae <_dtoa_r+0x386>
 800767a:	4bbb      	ldr	r3, [pc, #748]	; (8007968 <_dtoa_r+0x640>)
 800767c:	ec51 0b18 	vmov	r0, r1, d8
 8007680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007684:	f7f9 f8ea 	bl	800085c <__aeabi_ddiv>
 8007688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800768c:	f008 080f 	and.w	r8, r8, #15
 8007690:	2503      	movs	r5, #3
 8007692:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007968 <_dtoa_r+0x640>
 8007696:	f1b8 0f00 	cmp.w	r8, #0
 800769a:	d10a      	bne.n	80076b2 <_dtoa_r+0x38a>
 800769c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a0:	4632      	mov	r2, r6
 80076a2:	463b      	mov	r3, r7
 80076a4:	f7f9 f8da 	bl	800085c <__aeabi_ddiv>
 80076a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ac:	e02b      	b.n	8007706 <_dtoa_r+0x3de>
 80076ae:	2502      	movs	r5, #2
 80076b0:	e7ef      	b.n	8007692 <_dtoa_r+0x36a>
 80076b2:	f018 0f01 	tst.w	r8, #1
 80076b6:	d008      	beq.n	80076ca <_dtoa_r+0x3a2>
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076c0:	f7f8 ffa2 	bl	8000608 <__aeabi_dmul>
 80076c4:	3501      	adds	r5, #1
 80076c6:	4606      	mov	r6, r0
 80076c8:	460f      	mov	r7, r1
 80076ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076ce:	f109 0908 	add.w	r9, r9, #8
 80076d2:	e7e0      	b.n	8007696 <_dtoa_r+0x36e>
 80076d4:	f000 809f 	beq.w	8007816 <_dtoa_r+0x4ee>
 80076d8:	f1cb 0600 	rsb	r6, fp, #0
 80076dc:	4ba1      	ldr	r3, [pc, #644]	; (8007964 <_dtoa_r+0x63c>)
 80076de:	4fa2      	ldr	r7, [pc, #648]	; (8007968 <_dtoa_r+0x640>)
 80076e0:	f006 020f 	and.w	r2, r6, #15
 80076e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	ec51 0b18 	vmov	r0, r1, d8
 80076f0:	f7f8 ff8a 	bl	8000608 <__aeabi_dmul>
 80076f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f8:	1136      	asrs	r6, r6, #4
 80076fa:	2300      	movs	r3, #0
 80076fc:	2502      	movs	r5, #2
 80076fe:	2e00      	cmp	r6, #0
 8007700:	d17e      	bne.n	8007800 <_dtoa_r+0x4d8>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1d0      	bne.n	80076a8 <_dtoa_r+0x380>
 8007706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007708:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8084 	beq.w	800781a <_dtoa_r+0x4f2>
 8007712:	4b96      	ldr	r3, [pc, #600]	; (800796c <_dtoa_r+0x644>)
 8007714:	2200      	movs	r2, #0
 8007716:	4640      	mov	r0, r8
 8007718:	4649      	mov	r1, r9
 800771a:	f7f9 f9e7 	bl	8000aec <__aeabi_dcmplt>
 800771e:	2800      	cmp	r0, #0
 8007720:	d07b      	beq.n	800781a <_dtoa_r+0x4f2>
 8007722:	9b04      	ldr	r3, [sp, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d078      	beq.n	800781a <_dtoa_r+0x4f2>
 8007728:	9b01      	ldr	r3, [sp, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	dd39      	ble.n	80077a2 <_dtoa_r+0x47a>
 800772e:	4b90      	ldr	r3, [pc, #576]	; (8007970 <_dtoa_r+0x648>)
 8007730:	2200      	movs	r2, #0
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 ff67 	bl	8000608 <__aeabi_dmul>
 800773a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800773e:	9e01      	ldr	r6, [sp, #4]
 8007740:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007744:	3501      	adds	r5, #1
 8007746:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800774a:	4628      	mov	r0, r5
 800774c:	f7f8 fef2 	bl	8000534 <__aeabi_i2d>
 8007750:	4642      	mov	r2, r8
 8007752:	464b      	mov	r3, r9
 8007754:	f7f8 ff58 	bl	8000608 <__aeabi_dmul>
 8007758:	4b86      	ldr	r3, [pc, #536]	; (8007974 <_dtoa_r+0x64c>)
 800775a:	2200      	movs	r2, #0
 800775c:	f7f8 fd9e 	bl	800029c <__adddf3>
 8007760:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007768:	9303      	str	r3, [sp, #12]
 800776a:	2e00      	cmp	r6, #0
 800776c:	d158      	bne.n	8007820 <_dtoa_r+0x4f8>
 800776e:	4b82      	ldr	r3, [pc, #520]	; (8007978 <_dtoa_r+0x650>)
 8007770:	2200      	movs	r2, #0
 8007772:	4640      	mov	r0, r8
 8007774:	4649      	mov	r1, r9
 8007776:	f7f8 fd8f 	bl	8000298 <__aeabi_dsub>
 800777a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800777e:	4680      	mov	r8, r0
 8007780:	4689      	mov	r9, r1
 8007782:	f7f9 f9d1 	bl	8000b28 <__aeabi_dcmpgt>
 8007786:	2800      	cmp	r0, #0
 8007788:	f040 8296 	bne.w	8007cb8 <_dtoa_r+0x990>
 800778c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007790:	4640      	mov	r0, r8
 8007792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007796:	4649      	mov	r1, r9
 8007798:	f7f9 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800779c:	2800      	cmp	r0, #0
 800779e:	f040 8289 	bne.w	8007cb4 <_dtoa_r+0x98c>
 80077a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f2c0 814e 	blt.w	8007a4a <_dtoa_r+0x722>
 80077ae:	f1bb 0f0e 	cmp.w	fp, #14
 80077b2:	f300 814a 	bgt.w	8007a4a <_dtoa_r+0x722>
 80077b6:	4b6b      	ldr	r3, [pc, #428]	; (8007964 <_dtoa_r+0x63c>)
 80077b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f280 80dc 	bge.w	8007980 <_dtoa_r+0x658>
 80077c8:	9b04      	ldr	r3, [sp, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f300 80d8 	bgt.w	8007980 <_dtoa_r+0x658>
 80077d0:	f040 826f 	bne.w	8007cb2 <_dtoa_r+0x98a>
 80077d4:	4b68      	ldr	r3, [pc, #416]	; (8007978 <_dtoa_r+0x650>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f8 ff14 	bl	8000608 <__aeabi_dmul>
 80077e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077e4:	f7f9 f996 	bl	8000b14 <__aeabi_dcmpge>
 80077e8:	9e04      	ldr	r6, [sp, #16]
 80077ea:	4637      	mov	r7, r6
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f040 8245 	bne.w	8007c7c <_dtoa_r+0x954>
 80077f2:	9d00      	ldr	r5, [sp, #0]
 80077f4:	2331      	movs	r3, #49	; 0x31
 80077f6:	f805 3b01 	strb.w	r3, [r5], #1
 80077fa:	f10b 0b01 	add.w	fp, fp, #1
 80077fe:	e241      	b.n	8007c84 <_dtoa_r+0x95c>
 8007800:	07f2      	lsls	r2, r6, #31
 8007802:	d505      	bpl.n	8007810 <_dtoa_r+0x4e8>
 8007804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007808:	f7f8 fefe 	bl	8000608 <__aeabi_dmul>
 800780c:	3501      	adds	r5, #1
 800780e:	2301      	movs	r3, #1
 8007810:	1076      	asrs	r6, r6, #1
 8007812:	3708      	adds	r7, #8
 8007814:	e773      	b.n	80076fe <_dtoa_r+0x3d6>
 8007816:	2502      	movs	r5, #2
 8007818:	e775      	b.n	8007706 <_dtoa_r+0x3de>
 800781a:	9e04      	ldr	r6, [sp, #16]
 800781c:	465f      	mov	r7, fp
 800781e:	e792      	b.n	8007746 <_dtoa_r+0x41e>
 8007820:	9900      	ldr	r1, [sp, #0]
 8007822:	4b50      	ldr	r3, [pc, #320]	; (8007964 <_dtoa_r+0x63c>)
 8007824:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007828:	4431      	add	r1, r6
 800782a:	9102      	str	r1, [sp, #8]
 800782c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800782e:	eeb0 9a47 	vmov.f32	s18, s14
 8007832:	eef0 9a67 	vmov.f32	s19, s15
 8007836:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800783a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800783e:	2900      	cmp	r1, #0
 8007840:	d044      	beq.n	80078cc <_dtoa_r+0x5a4>
 8007842:	494e      	ldr	r1, [pc, #312]	; (800797c <_dtoa_r+0x654>)
 8007844:	2000      	movs	r0, #0
 8007846:	f7f9 f809 	bl	800085c <__aeabi_ddiv>
 800784a:	ec53 2b19 	vmov	r2, r3, d9
 800784e:	f7f8 fd23 	bl	8000298 <__aeabi_dsub>
 8007852:	9d00      	ldr	r5, [sp, #0]
 8007854:	ec41 0b19 	vmov	d9, r0, r1
 8007858:	4649      	mov	r1, r9
 800785a:	4640      	mov	r0, r8
 800785c:	f7f9 f984 	bl	8000b68 <__aeabi_d2iz>
 8007860:	4606      	mov	r6, r0
 8007862:	f7f8 fe67 	bl	8000534 <__aeabi_i2d>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	f7f8 fd13 	bl	8000298 <__aeabi_dsub>
 8007872:	3630      	adds	r6, #48	; 0x30
 8007874:	f805 6b01 	strb.w	r6, [r5], #1
 8007878:	ec53 2b19 	vmov	r2, r3, d9
 800787c:	4680      	mov	r8, r0
 800787e:	4689      	mov	r9, r1
 8007880:	f7f9 f934 	bl	8000aec <__aeabi_dcmplt>
 8007884:	2800      	cmp	r0, #0
 8007886:	d164      	bne.n	8007952 <_dtoa_r+0x62a>
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	4937      	ldr	r1, [pc, #220]	; (800796c <_dtoa_r+0x644>)
 800788e:	2000      	movs	r0, #0
 8007890:	f7f8 fd02 	bl	8000298 <__aeabi_dsub>
 8007894:	ec53 2b19 	vmov	r2, r3, d9
 8007898:	f7f9 f928 	bl	8000aec <__aeabi_dcmplt>
 800789c:	2800      	cmp	r0, #0
 800789e:	f040 80b6 	bne.w	8007a0e <_dtoa_r+0x6e6>
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	429d      	cmp	r5, r3
 80078a6:	f43f af7c 	beq.w	80077a2 <_dtoa_r+0x47a>
 80078aa:	4b31      	ldr	r3, [pc, #196]	; (8007970 <_dtoa_r+0x648>)
 80078ac:	ec51 0b19 	vmov	r0, r1, d9
 80078b0:	2200      	movs	r2, #0
 80078b2:	f7f8 fea9 	bl	8000608 <__aeabi_dmul>
 80078b6:	4b2e      	ldr	r3, [pc, #184]	; (8007970 <_dtoa_r+0x648>)
 80078b8:	ec41 0b19 	vmov	d9, r0, r1
 80078bc:	2200      	movs	r2, #0
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	f7f8 fea1 	bl	8000608 <__aeabi_dmul>
 80078c6:	4680      	mov	r8, r0
 80078c8:	4689      	mov	r9, r1
 80078ca:	e7c5      	b.n	8007858 <_dtoa_r+0x530>
 80078cc:	ec51 0b17 	vmov	r0, r1, d7
 80078d0:	f7f8 fe9a 	bl	8000608 <__aeabi_dmul>
 80078d4:	9b02      	ldr	r3, [sp, #8]
 80078d6:	9d00      	ldr	r5, [sp, #0]
 80078d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80078da:	ec41 0b19 	vmov	d9, r0, r1
 80078de:	4649      	mov	r1, r9
 80078e0:	4640      	mov	r0, r8
 80078e2:	f7f9 f941 	bl	8000b68 <__aeabi_d2iz>
 80078e6:	4606      	mov	r6, r0
 80078e8:	f7f8 fe24 	bl	8000534 <__aeabi_i2d>
 80078ec:	3630      	adds	r6, #48	; 0x30
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4640      	mov	r0, r8
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 fccf 	bl	8000298 <__aeabi_dsub>
 80078fa:	f805 6b01 	strb.w	r6, [r5], #1
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	429d      	cmp	r5, r3
 8007902:	4680      	mov	r8, r0
 8007904:	4689      	mov	r9, r1
 8007906:	f04f 0200 	mov.w	r2, #0
 800790a:	d124      	bne.n	8007956 <_dtoa_r+0x62e>
 800790c:	4b1b      	ldr	r3, [pc, #108]	; (800797c <_dtoa_r+0x654>)
 800790e:	ec51 0b19 	vmov	r0, r1, d9
 8007912:	f7f8 fcc3 	bl	800029c <__adddf3>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f9 f903 	bl	8000b28 <__aeabi_dcmpgt>
 8007922:	2800      	cmp	r0, #0
 8007924:	d173      	bne.n	8007a0e <_dtoa_r+0x6e6>
 8007926:	ec53 2b19 	vmov	r2, r3, d9
 800792a:	4914      	ldr	r1, [pc, #80]	; (800797c <_dtoa_r+0x654>)
 800792c:	2000      	movs	r0, #0
 800792e:	f7f8 fcb3 	bl	8000298 <__aeabi_dsub>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4640      	mov	r0, r8
 8007938:	4649      	mov	r1, r9
 800793a:	f7f9 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800793e:	2800      	cmp	r0, #0
 8007940:	f43f af2f 	beq.w	80077a2 <_dtoa_r+0x47a>
 8007944:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007946:	1e6b      	subs	r3, r5, #1
 8007948:	930f      	str	r3, [sp, #60]	; 0x3c
 800794a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800794e:	2b30      	cmp	r3, #48	; 0x30
 8007950:	d0f8      	beq.n	8007944 <_dtoa_r+0x61c>
 8007952:	46bb      	mov	fp, r7
 8007954:	e04a      	b.n	80079ec <_dtoa_r+0x6c4>
 8007956:	4b06      	ldr	r3, [pc, #24]	; (8007970 <_dtoa_r+0x648>)
 8007958:	f7f8 fe56 	bl	8000608 <__aeabi_dmul>
 800795c:	4680      	mov	r8, r0
 800795e:	4689      	mov	r9, r1
 8007960:	e7bd      	b.n	80078de <_dtoa_r+0x5b6>
 8007962:	bf00      	nop
 8007964:	0800a1b0 	.word	0x0800a1b0
 8007968:	0800a188 	.word	0x0800a188
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	40240000 	.word	0x40240000
 8007974:	401c0000 	.word	0x401c0000
 8007978:	40140000 	.word	0x40140000
 800797c:	3fe00000 	.word	0x3fe00000
 8007980:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007984:	9d00      	ldr	r5, [sp, #0]
 8007986:	4642      	mov	r2, r8
 8007988:	464b      	mov	r3, r9
 800798a:	4630      	mov	r0, r6
 800798c:	4639      	mov	r1, r7
 800798e:	f7f8 ff65 	bl	800085c <__aeabi_ddiv>
 8007992:	f7f9 f8e9 	bl	8000b68 <__aeabi_d2iz>
 8007996:	9001      	str	r0, [sp, #4]
 8007998:	f7f8 fdcc 	bl	8000534 <__aeabi_i2d>
 800799c:	4642      	mov	r2, r8
 800799e:	464b      	mov	r3, r9
 80079a0:	f7f8 fe32 	bl	8000608 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fc74 	bl	8000298 <__aeabi_dsub>
 80079b0:	9e01      	ldr	r6, [sp, #4]
 80079b2:	9f04      	ldr	r7, [sp, #16]
 80079b4:	3630      	adds	r6, #48	; 0x30
 80079b6:	f805 6b01 	strb.w	r6, [r5], #1
 80079ba:	9e00      	ldr	r6, [sp, #0]
 80079bc:	1bae      	subs	r6, r5, r6
 80079be:	42b7      	cmp	r7, r6
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	d134      	bne.n	8007a30 <_dtoa_r+0x708>
 80079c6:	f7f8 fc69 	bl	800029c <__adddf3>
 80079ca:	4642      	mov	r2, r8
 80079cc:	464b      	mov	r3, r9
 80079ce:	4606      	mov	r6, r0
 80079d0:	460f      	mov	r7, r1
 80079d2:	f7f9 f8a9 	bl	8000b28 <__aeabi_dcmpgt>
 80079d6:	b9c8      	cbnz	r0, 8007a0c <_dtoa_r+0x6e4>
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f9 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80079e4:	b110      	cbz	r0, 80079ec <_dtoa_r+0x6c4>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	07db      	lsls	r3, r3, #31
 80079ea:	d40f      	bmi.n	8007a0c <_dtoa_r+0x6e4>
 80079ec:	4651      	mov	r1, sl
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 fbcc 	bl	800818c <_Bfree>
 80079f4:	2300      	movs	r3, #0
 80079f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079f8:	702b      	strb	r3, [r5, #0]
 80079fa:	f10b 0301 	add.w	r3, fp, #1
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f43f ace2 	beq.w	80073cc <_dtoa_r+0xa4>
 8007a08:	601d      	str	r5, [r3, #0]
 8007a0a:	e4df      	b.n	80073cc <_dtoa_r+0xa4>
 8007a0c:	465f      	mov	r7, fp
 8007a0e:	462b      	mov	r3, r5
 8007a10:	461d      	mov	r5, r3
 8007a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a16:	2a39      	cmp	r2, #57	; 0x39
 8007a18:	d106      	bne.n	8007a28 <_dtoa_r+0x700>
 8007a1a:	9a00      	ldr	r2, [sp, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d1f7      	bne.n	8007a10 <_dtoa_r+0x6e8>
 8007a20:	9900      	ldr	r1, [sp, #0]
 8007a22:	2230      	movs	r2, #48	; 0x30
 8007a24:	3701      	adds	r7, #1
 8007a26:	700a      	strb	r2, [r1, #0]
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	3201      	adds	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e790      	b.n	8007952 <_dtoa_r+0x62a>
 8007a30:	4ba3      	ldr	r3, [pc, #652]	; (8007cc0 <_dtoa_r+0x998>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	f7f8 fde8 	bl	8000608 <__aeabi_dmul>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	f7f9 f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d09e      	beq.n	8007986 <_dtoa_r+0x65e>
 8007a48:	e7d0      	b.n	80079ec <_dtoa_r+0x6c4>
 8007a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a4c:	2a00      	cmp	r2, #0
 8007a4e:	f000 80ca 	beq.w	8007be6 <_dtoa_r+0x8be>
 8007a52:	9a07      	ldr	r2, [sp, #28]
 8007a54:	2a01      	cmp	r2, #1
 8007a56:	f300 80ad 	bgt.w	8007bb4 <_dtoa_r+0x88c>
 8007a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	f000 80a5 	beq.w	8007bac <_dtoa_r+0x884>
 8007a62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a66:	9e08      	ldr	r6, [sp, #32]
 8007a68:	9d05      	ldr	r5, [sp, #20]
 8007a6a:	9a05      	ldr	r2, [sp, #20]
 8007a6c:	441a      	add	r2, r3
 8007a6e:	9205      	str	r2, [sp, #20]
 8007a70:	9a06      	ldr	r2, [sp, #24]
 8007a72:	2101      	movs	r1, #1
 8007a74:	441a      	add	r2, r3
 8007a76:	4620      	mov	r0, r4
 8007a78:	9206      	str	r2, [sp, #24]
 8007a7a:	f000 fc3d 	bl	80082f8 <__i2b>
 8007a7e:	4607      	mov	r7, r0
 8007a80:	b165      	cbz	r5, 8007a9c <_dtoa_r+0x774>
 8007a82:	9b06      	ldr	r3, [sp, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dd09      	ble.n	8007a9c <_dtoa_r+0x774>
 8007a88:	42ab      	cmp	r3, r5
 8007a8a:	9a05      	ldr	r2, [sp, #20]
 8007a8c:	bfa8      	it	ge
 8007a8e:	462b      	movge	r3, r5
 8007a90:	1ad2      	subs	r2, r2, r3
 8007a92:	9205      	str	r2, [sp, #20]
 8007a94:	9a06      	ldr	r2, [sp, #24]
 8007a96:	1aed      	subs	r5, r5, r3
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	9306      	str	r3, [sp, #24]
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	b1f3      	cbz	r3, 8007ade <_dtoa_r+0x7b6>
 8007aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 80a3 	beq.w	8007bee <_dtoa_r+0x8c6>
 8007aa8:	2e00      	cmp	r6, #0
 8007aaa:	dd10      	ble.n	8007ace <_dtoa_r+0x7a6>
 8007aac:	4639      	mov	r1, r7
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fce1 	bl	8008478 <__pow5mult>
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4601      	mov	r1, r0
 8007aba:	4607      	mov	r7, r0
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fc31 	bl	8008324 <__multiply>
 8007ac2:	4651      	mov	r1, sl
 8007ac4:	4680      	mov	r8, r0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 fb60 	bl	800818c <_Bfree>
 8007acc:	46c2      	mov	sl, r8
 8007ace:	9b08      	ldr	r3, [sp, #32]
 8007ad0:	1b9a      	subs	r2, r3, r6
 8007ad2:	d004      	beq.n	8007ade <_dtoa_r+0x7b6>
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 fcce 	bl	8008478 <__pow5mult>
 8007adc:	4682      	mov	sl, r0
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fc09 	bl	80082f8 <__i2b>
 8007ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	4606      	mov	r6, r0
 8007aec:	f340 8081 	ble.w	8007bf2 <_dtoa_r+0x8ca>
 8007af0:	461a      	mov	r2, r3
 8007af2:	4601      	mov	r1, r0
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fcbf 	bl	8008478 <__pow5mult>
 8007afa:	9b07      	ldr	r3, [sp, #28]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	4606      	mov	r6, r0
 8007b00:	dd7a      	ble.n	8007bf8 <_dtoa_r+0x8d0>
 8007b02:	f04f 0800 	mov.w	r8, #0
 8007b06:	6933      	ldr	r3, [r6, #16]
 8007b08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b0c:	6918      	ldr	r0, [r3, #16]
 8007b0e:	f000 fba5 	bl	800825c <__hi0bits>
 8007b12:	f1c0 0020 	rsb	r0, r0, #32
 8007b16:	9b06      	ldr	r3, [sp, #24]
 8007b18:	4418      	add	r0, r3
 8007b1a:	f010 001f 	ands.w	r0, r0, #31
 8007b1e:	f000 8094 	beq.w	8007c4a <_dtoa_r+0x922>
 8007b22:	f1c0 0320 	rsb	r3, r0, #32
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	f340 8085 	ble.w	8007c36 <_dtoa_r+0x90e>
 8007b2c:	9b05      	ldr	r3, [sp, #20]
 8007b2e:	f1c0 001c 	rsb	r0, r0, #28
 8007b32:	4403      	add	r3, r0
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	4403      	add	r3, r0
 8007b3a:	4405      	add	r5, r0
 8007b3c:	9306      	str	r3, [sp, #24]
 8007b3e:	9b05      	ldr	r3, [sp, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dd05      	ble.n	8007b50 <_dtoa_r+0x828>
 8007b44:	4651      	mov	r1, sl
 8007b46:	461a      	mov	r2, r3
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fcef 	bl	800852c <__lshift>
 8007b4e:	4682      	mov	sl, r0
 8007b50:	9b06      	ldr	r3, [sp, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dd05      	ble.n	8007b62 <_dtoa_r+0x83a>
 8007b56:	4631      	mov	r1, r6
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fce6 	bl	800852c <__lshift>
 8007b60:	4606      	mov	r6, r0
 8007b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d072      	beq.n	8007c4e <_dtoa_r+0x926>
 8007b68:	4631      	mov	r1, r6
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	f000 fd4a 	bl	8008604 <__mcmp>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	da6c      	bge.n	8007c4e <_dtoa_r+0x926>
 8007b74:	2300      	movs	r3, #0
 8007b76:	4651      	mov	r1, sl
 8007b78:	220a      	movs	r2, #10
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fb28 	bl	80081d0 <__multadd>
 8007b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b86:	4682      	mov	sl, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 81b0 	beq.w	8007eee <_dtoa_r+0xbc6>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4639      	mov	r1, r7
 8007b92:	220a      	movs	r2, #10
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 fb1b 	bl	80081d0 <__multadd>
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	f300 8096 	bgt.w	8007cd0 <_dtoa_r+0x9a8>
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	dc59      	bgt.n	8007c5e <_dtoa_r+0x936>
 8007baa:	e091      	b.n	8007cd0 <_dtoa_r+0x9a8>
 8007bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bb2:	e758      	b.n	8007a66 <_dtoa_r+0x73e>
 8007bb4:	9b04      	ldr	r3, [sp, #16]
 8007bb6:	1e5e      	subs	r6, r3, #1
 8007bb8:	9b08      	ldr	r3, [sp, #32]
 8007bba:	42b3      	cmp	r3, r6
 8007bbc:	bfbf      	itttt	lt
 8007bbe:	9b08      	ldrlt	r3, [sp, #32]
 8007bc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007bc2:	9608      	strlt	r6, [sp, #32]
 8007bc4:	1af3      	sublt	r3, r6, r3
 8007bc6:	bfb4      	ite	lt
 8007bc8:	18d2      	addlt	r2, r2, r3
 8007bca:	1b9e      	subge	r6, r3, r6
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	bfbc      	itt	lt
 8007bd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007bd2:	2600      	movlt	r6, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bfb7      	itett	lt
 8007bd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007bdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007be0:	1a9d      	sublt	r5, r3, r2
 8007be2:	2300      	movlt	r3, #0
 8007be4:	e741      	b.n	8007a6a <_dtoa_r+0x742>
 8007be6:	9e08      	ldr	r6, [sp, #32]
 8007be8:	9d05      	ldr	r5, [sp, #20]
 8007bea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007bec:	e748      	b.n	8007a80 <_dtoa_r+0x758>
 8007bee:	9a08      	ldr	r2, [sp, #32]
 8007bf0:	e770      	b.n	8007ad4 <_dtoa_r+0x7ac>
 8007bf2:	9b07      	ldr	r3, [sp, #28]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	dc19      	bgt.n	8007c2c <_dtoa_r+0x904>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	b9bb      	cbnz	r3, 8007c2c <_dtoa_r+0x904>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c02:	b99b      	cbnz	r3, 8007c2c <_dtoa_r+0x904>
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c0a:	0d1b      	lsrs	r3, r3, #20
 8007c0c:	051b      	lsls	r3, r3, #20
 8007c0e:	b183      	cbz	r3, 8007c32 <_dtoa_r+0x90a>
 8007c10:	9b05      	ldr	r3, [sp, #20]
 8007c12:	3301      	adds	r3, #1
 8007c14:	9305      	str	r3, [sp, #20]
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	9306      	str	r3, [sp, #24]
 8007c1c:	f04f 0801 	mov.w	r8, #1
 8007c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f47f af6f 	bne.w	8007b06 <_dtoa_r+0x7de>
 8007c28:	2001      	movs	r0, #1
 8007c2a:	e774      	b.n	8007b16 <_dtoa_r+0x7ee>
 8007c2c:	f04f 0800 	mov.w	r8, #0
 8007c30:	e7f6      	b.n	8007c20 <_dtoa_r+0x8f8>
 8007c32:	4698      	mov	r8, r3
 8007c34:	e7f4      	b.n	8007c20 <_dtoa_r+0x8f8>
 8007c36:	d082      	beq.n	8007b3e <_dtoa_r+0x816>
 8007c38:	9a05      	ldr	r2, [sp, #20]
 8007c3a:	331c      	adds	r3, #28
 8007c3c:	441a      	add	r2, r3
 8007c3e:	9205      	str	r2, [sp, #20]
 8007c40:	9a06      	ldr	r2, [sp, #24]
 8007c42:	441a      	add	r2, r3
 8007c44:	441d      	add	r5, r3
 8007c46:	9206      	str	r2, [sp, #24]
 8007c48:	e779      	b.n	8007b3e <_dtoa_r+0x816>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	e7f4      	b.n	8007c38 <_dtoa_r+0x910>
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	dc37      	bgt.n	8007cc4 <_dtoa_r+0x99c>
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	dd34      	ble.n	8007cc4 <_dtoa_r+0x99c>
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	b963      	cbnz	r3, 8007c7c <_dtoa_r+0x954>
 8007c62:	4631      	mov	r1, r6
 8007c64:	2205      	movs	r2, #5
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fab2 	bl	80081d0 <__multadd>
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	4606      	mov	r6, r0
 8007c70:	4650      	mov	r0, sl
 8007c72:	f000 fcc7 	bl	8008604 <__mcmp>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f73f adbb 	bgt.w	80077f2 <_dtoa_r+0x4ca>
 8007c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7e:	9d00      	ldr	r5, [sp, #0]
 8007c80:	ea6f 0b03 	mvn.w	fp, r3
 8007c84:	f04f 0800 	mov.w	r8, #0
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 fa7e 	bl	800818c <_Bfree>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	f43f aeab 	beq.w	80079ec <_dtoa_r+0x6c4>
 8007c96:	f1b8 0f00 	cmp.w	r8, #0
 8007c9a:	d005      	beq.n	8007ca8 <_dtoa_r+0x980>
 8007c9c:	45b8      	cmp	r8, r7
 8007c9e:	d003      	beq.n	8007ca8 <_dtoa_r+0x980>
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fa72 	bl	800818c <_Bfree>
 8007ca8:	4639      	mov	r1, r7
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fa6e 	bl	800818c <_Bfree>
 8007cb0:	e69c      	b.n	80079ec <_dtoa_r+0x6c4>
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	4637      	mov	r7, r6
 8007cb6:	e7e1      	b.n	8007c7c <_dtoa_r+0x954>
 8007cb8:	46bb      	mov	fp, r7
 8007cba:	4637      	mov	r7, r6
 8007cbc:	e599      	b.n	80077f2 <_dtoa_r+0x4ca>
 8007cbe:	bf00      	nop
 8007cc0:	40240000 	.word	0x40240000
 8007cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 80c8 	beq.w	8007e5c <_dtoa_r+0xb34>
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	dd05      	ble.n	8007ce0 <_dtoa_r+0x9b8>
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fc27 	bl	800852c <__lshift>
 8007cde:	4607      	mov	r7, r0
 8007ce0:	f1b8 0f00 	cmp.w	r8, #0
 8007ce4:	d05b      	beq.n	8007d9e <_dtoa_r+0xa76>
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 fa0f 	bl	800810c <_Balloc>
 8007cee:	4605      	mov	r5, r0
 8007cf0:	b928      	cbnz	r0, 8007cfe <_dtoa_r+0x9d6>
 8007cf2:	4b83      	ldr	r3, [pc, #524]	; (8007f00 <_dtoa_r+0xbd8>)
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007cfa:	f7ff bb2e 	b.w	800735a <_dtoa_r+0x32>
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	3202      	adds	r2, #2
 8007d02:	0092      	lsls	r2, r2, #2
 8007d04:	f107 010c 	add.w	r1, r7, #12
 8007d08:	300c      	adds	r0, #12
 8007d0a:	f000 fe39 	bl	8008980 <memcpy>
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4629      	mov	r1, r5
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fc0a 	bl	800852c <__lshift>
 8007d18:	9b00      	ldr	r3, [sp, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d22:	4413      	add	r3, r2
 8007d24:	9308      	str	r3, [sp, #32]
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	46b8      	mov	r8, r7
 8007d2e:	9306      	str	r3, [sp, #24]
 8007d30:	4607      	mov	r7, r0
 8007d32:	9b04      	ldr	r3, [sp, #16]
 8007d34:	4631      	mov	r1, r6
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4650      	mov	r0, sl
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	f7ff fa6a 	bl	8007214 <quorem>
 8007d40:	4641      	mov	r1, r8
 8007d42:	9002      	str	r0, [sp, #8]
 8007d44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d48:	4650      	mov	r0, sl
 8007d4a:	f000 fc5b 	bl	8008604 <__mcmp>
 8007d4e:	463a      	mov	r2, r7
 8007d50:	9005      	str	r0, [sp, #20]
 8007d52:	4631      	mov	r1, r6
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fc71 	bl	800863c <__mdiff>
 8007d5a:	68c2      	ldr	r2, [r0, #12]
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	bb02      	cbnz	r2, 8007da2 <_dtoa_r+0xa7a>
 8007d60:	4601      	mov	r1, r0
 8007d62:	4650      	mov	r0, sl
 8007d64:	f000 fc4e 	bl	8008604 <__mcmp>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d70:	f000 fa0c 	bl	800818c <_Bfree>
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d78:	9d04      	ldr	r5, [sp, #16]
 8007d7a:	ea43 0102 	orr.w	r1, r3, r2
 8007d7e:	9b06      	ldr	r3, [sp, #24]
 8007d80:	4319      	orrs	r1, r3
 8007d82:	d110      	bne.n	8007da6 <_dtoa_r+0xa7e>
 8007d84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d88:	d029      	beq.n	8007dde <_dtoa_r+0xab6>
 8007d8a:	9b05      	ldr	r3, [sp, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dd02      	ble.n	8007d96 <_dtoa_r+0xa6e>
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007d96:	9b01      	ldr	r3, [sp, #4]
 8007d98:	f883 9000 	strb.w	r9, [r3]
 8007d9c:	e774      	b.n	8007c88 <_dtoa_r+0x960>
 8007d9e:	4638      	mov	r0, r7
 8007da0:	e7ba      	b.n	8007d18 <_dtoa_r+0x9f0>
 8007da2:	2201      	movs	r2, #1
 8007da4:	e7e1      	b.n	8007d6a <_dtoa_r+0xa42>
 8007da6:	9b05      	ldr	r3, [sp, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	db04      	blt.n	8007db6 <_dtoa_r+0xa8e>
 8007dac:	9907      	ldr	r1, [sp, #28]
 8007dae:	430b      	orrs	r3, r1
 8007db0:	9906      	ldr	r1, [sp, #24]
 8007db2:	430b      	orrs	r3, r1
 8007db4:	d120      	bne.n	8007df8 <_dtoa_r+0xad0>
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	dded      	ble.n	8007d96 <_dtoa_r+0xa6e>
 8007dba:	4651      	mov	r1, sl
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f000 fbb4 	bl	800852c <__lshift>
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	f000 fc1c 	bl	8008604 <__mcmp>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	dc03      	bgt.n	8007dd8 <_dtoa_r+0xab0>
 8007dd0:	d1e1      	bne.n	8007d96 <_dtoa_r+0xa6e>
 8007dd2:	f019 0f01 	tst.w	r9, #1
 8007dd6:	d0de      	beq.n	8007d96 <_dtoa_r+0xa6e>
 8007dd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ddc:	d1d8      	bne.n	8007d90 <_dtoa_r+0xa68>
 8007dde:	9a01      	ldr	r2, [sp, #4]
 8007de0:	2339      	movs	r3, #57	; 0x39
 8007de2:	7013      	strb	r3, [r2, #0]
 8007de4:	462b      	mov	r3, r5
 8007de6:	461d      	mov	r5, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007dee:	2a39      	cmp	r2, #57	; 0x39
 8007df0:	d06c      	beq.n	8007ecc <_dtoa_r+0xba4>
 8007df2:	3201      	adds	r2, #1
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	e747      	b.n	8007c88 <_dtoa_r+0x960>
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	dd07      	ble.n	8007e0c <_dtoa_r+0xae4>
 8007dfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e00:	d0ed      	beq.n	8007dde <_dtoa_r+0xab6>
 8007e02:	9a01      	ldr	r2, [sp, #4]
 8007e04:	f109 0301 	add.w	r3, r9, #1
 8007e08:	7013      	strb	r3, [r2, #0]
 8007e0a:	e73d      	b.n	8007c88 <_dtoa_r+0x960>
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	9a08      	ldr	r2, [sp, #32]
 8007e10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d043      	beq.n	8007ea0 <_dtoa_r+0xb78>
 8007e18:	4651      	mov	r1, sl
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f9d6 	bl	80081d0 <__multadd>
 8007e24:	45b8      	cmp	r8, r7
 8007e26:	4682      	mov	sl, r0
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	f04f 020a 	mov.w	r2, #10
 8007e30:	4641      	mov	r1, r8
 8007e32:	4620      	mov	r0, r4
 8007e34:	d107      	bne.n	8007e46 <_dtoa_r+0xb1e>
 8007e36:	f000 f9cb 	bl	80081d0 <__multadd>
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	3301      	adds	r3, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	e775      	b.n	8007d32 <_dtoa_r+0xa0a>
 8007e46:	f000 f9c3 	bl	80081d0 <__multadd>
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	220a      	movs	r2, #10
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f9bc 	bl	80081d0 <__multadd>
 8007e58:	4607      	mov	r7, r0
 8007e5a:	e7f0      	b.n	8007e3e <_dtoa_r+0xb16>
 8007e5c:	9b04      	ldr	r3, [sp, #16]
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	9d00      	ldr	r5, [sp, #0]
 8007e62:	4631      	mov	r1, r6
 8007e64:	4650      	mov	r0, sl
 8007e66:	f7ff f9d5 	bl	8007214 <quorem>
 8007e6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e6e:	9b00      	ldr	r3, [sp, #0]
 8007e70:	f805 9b01 	strb.w	r9, [r5], #1
 8007e74:	1aea      	subs	r2, r5, r3
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	dd07      	ble.n	8007e8c <_dtoa_r+0xb64>
 8007e7c:	4651      	mov	r1, sl
 8007e7e:	2300      	movs	r3, #0
 8007e80:	220a      	movs	r2, #10
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f9a4 	bl	80081d0 <__multadd>
 8007e88:	4682      	mov	sl, r0
 8007e8a:	e7ea      	b.n	8007e62 <_dtoa_r+0xb3a>
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfc8      	it	gt
 8007e92:	461d      	movgt	r5, r3
 8007e94:	9b00      	ldr	r3, [sp, #0]
 8007e96:	bfd8      	it	le
 8007e98:	2501      	movle	r5, #1
 8007e9a:	441d      	add	r5, r3
 8007e9c:	f04f 0800 	mov.w	r8, #0
 8007ea0:	4651      	mov	r1, sl
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fb41 	bl	800852c <__lshift>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4682      	mov	sl, r0
 8007eae:	f000 fba9 	bl	8008604 <__mcmp>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	dc96      	bgt.n	8007de4 <_dtoa_r+0xabc>
 8007eb6:	d102      	bne.n	8007ebe <_dtoa_r+0xb96>
 8007eb8:	f019 0f01 	tst.w	r9, #1
 8007ebc:	d192      	bne.n	8007de4 <_dtoa_r+0xabc>
 8007ebe:	462b      	mov	r3, r5
 8007ec0:	461d      	mov	r5, r3
 8007ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ec6:	2a30      	cmp	r2, #48	; 0x30
 8007ec8:	d0fa      	beq.n	8007ec0 <_dtoa_r+0xb98>
 8007eca:	e6dd      	b.n	8007c88 <_dtoa_r+0x960>
 8007ecc:	9a00      	ldr	r2, [sp, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d189      	bne.n	8007de6 <_dtoa_r+0xabe>
 8007ed2:	f10b 0b01 	add.w	fp, fp, #1
 8007ed6:	2331      	movs	r3, #49	; 0x31
 8007ed8:	e796      	b.n	8007e08 <_dtoa_r+0xae0>
 8007eda:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <_dtoa_r+0xbdc>)
 8007edc:	f7ff ba99 	b.w	8007412 <_dtoa_r+0xea>
 8007ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f47f aa6d 	bne.w	80073c2 <_dtoa_r+0x9a>
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <_dtoa_r+0xbe0>)
 8007eea:	f7ff ba92 	b.w	8007412 <_dtoa_r+0xea>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dcb5      	bgt.n	8007e60 <_dtoa_r+0xb38>
 8007ef4:	9b07      	ldr	r3, [sp, #28]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	f73f aeb1 	bgt.w	8007c5e <_dtoa_r+0x936>
 8007efc:	e7b0      	b.n	8007e60 <_dtoa_r+0xb38>
 8007efe:	bf00      	nop
 8007f00:	0800a119 	.word	0x0800a119
 8007f04:	0800a079 	.word	0x0800a079
 8007f08:	0800a09d 	.word	0x0800a09d

08007f0c <_free_r>:
 8007f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f0e:	2900      	cmp	r1, #0
 8007f10:	d044      	beq.n	8007f9c <_free_r+0x90>
 8007f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f16:	9001      	str	r0, [sp, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f1e:	bfb8      	it	lt
 8007f20:	18e4      	addlt	r4, r4, r3
 8007f22:	f000 f8e7 	bl	80080f4 <__malloc_lock>
 8007f26:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <_free_r+0x94>)
 8007f28:	9801      	ldr	r0, [sp, #4]
 8007f2a:	6813      	ldr	r3, [r2, #0]
 8007f2c:	b933      	cbnz	r3, 8007f3c <_free_r+0x30>
 8007f2e:	6063      	str	r3, [r4, #4]
 8007f30:	6014      	str	r4, [r2, #0]
 8007f32:	b003      	add	sp, #12
 8007f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f38:	f000 b8e2 	b.w	8008100 <__malloc_unlock>
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d908      	bls.n	8007f52 <_free_r+0x46>
 8007f40:	6825      	ldr	r5, [r4, #0]
 8007f42:	1961      	adds	r1, r4, r5
 8007f44:	428b      	cmp	r3, r1
 8007f46:	bf01      	itttt	eq
 8007f48:	6819      	ldreq	r1, [r3, #0]
 8007f4a:	685b      	ldreq	r3, [r3, #4]
 8007f4c:	1949      	addeq	r1, r1, r5
 8007f4e:	6021      	streq	r1, [r4, #0]
 8007f50:	e7ed      	b.n	8007f2e <_free_r+0x22>
 8007f52:	461a      	mov	r2, r3
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	b10b      	cbz	r3, 8007f5c <_free_r+0x50>
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d9fa      	bls.n	8007f52 <_free_r+0x46>
 8007f5c:	6811      	ldr	r1, [r2, #0]
 8007f5e:	1855      	adds	r5, r2, r1
 8007f60:	42a5      	cmp	r5, r4
 8007f62:	d10b      	bne.n	8007f7c <_free_r+0x70>
 8007f64:	6824      	ldr	r4, [r4, #0]
 8007f66:	4421      	add	r1, r4
 8007f68:	1854      	adds	r4, r2, r1
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	6011      	str	r1, [r2, #0]
 8007f6e:	d1e0      	bne.n	8007f32 <_free_r+0x26>
 8007f70:	681c      	ldr	r4, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	6053      	str	r3, [r2, #4]
 8007f76:	440c      	add	r4, r1
 8007f78:	6014      	str	r4, [r2, #0]
 8007f7a:	e7da      	b.n	8007f32 <_free_r+0x26>
 8007f7c:	d902      	bls.n	8007f84 <_free_r+0x78>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	e7d6      	b.n	8007f32 <_free_r+0x26>
 8007f84:	6825      	ldr	r5, [r4, #0]
 8007f86:	1961      	adds	r1, r4, r5
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	bf04      	itt	eq
 8007f8c:	6819      	ldreq	r1, [r3, #0]
 8007f8e:	685b      	ldreq	r3, [r3, #4]
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	bf04      	itt	eq
 8007f94:	1949      	addeq	r1, r1, r5
 8007f96:	6021      	streq	r1, [r4, #0]
 8007f98:	6054      	str	r4, [r2, #4]
 8007f9a:	e7ca      	b.n	8007f32 <_free_r+0x26>
 8007f9c:	b003      	add	sp, #12
 8007f9e:	bd30      	pop	{r4, r5, pc}
 8007fa0:	20000b70 	.word	0x20000b70

08007fa4 <malloc>:
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <malloc+0xc>)
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f000 b823 	b.w	8007ff4 <_malloc_r>
 8007fae:	bf00      	nop
 8007fb0:	2000008c 	.word	0x2000008c

08007fb4 <sbrk_aligned>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4e0e      	ldr	r6, [pc, #56]	; (8007ff0 <sbrk_aligned+0x3c>)
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6831      	ldr	r1, [r6, #0]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	b911      	cbnz	r1, 8007fc6 <sbrk_aligned+0x12>
 8007fc0:	f000 fcce 	bl	8008960 <_sbrk_r>
 8007fc4:	6030      	str	r0, [r6, #0]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 fcc9 	bl	8008960 <_sbrk_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d00a      	beq.n	8007fe8 <sbrk_aligned+0x34>
 8007fd2:	1cc4      	adds	r4, r0, #3
 8007fd4:	f024 0403 	bic.w	r4, r4, #3
 8007fd8:	42a0      	cmp	r0, r4
 8007fda:	d007      	beq.n	8007fec <sbrk_aligned+0x38>
 8007fdc:	1a21      	subs	r1, r4, r0
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 fcbe 	bl	8008960 <_sbrk_r>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d101      	bne.n	8007fec <sbrk_aligned+0x38>
 8007fe8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007fec:	4620      	mov	r0, r4
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	20000b74 	.word	0x20000b74

08007ff4 <_malloc_r>:
 8007ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff8:	1ccd      	adds	r5, r1, #3
 8007ffa:	f025 0503 	bic.w	r5, r5, #3
 8007ffe:	3508      	adds	r5, #8
 8008000:	2d0c      	cmp	r5, #12
 8008002:	bf38      	it	cc
 8008004:	250c      	movcc	r5, #12
 8008006:	2d00      	cmp	r5, #0
 8008008:	4607      	mov	r7, r0
 800800a:	db01      	blt.n	8008010 <_malloc_r+0x1c>
 800800c:	42a9      	cmp	r1, r5
 800800e:	d905      	bls.n	800801c <_malloc_r+0x28>
 8008010:	230c      	movs	r3, #12
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	2600      	movs	r6, #0
 8008016:	4630      	mov	r0, r6
 8008018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080f0 <_malloc_r+0xfc>
 8008020:	f000 f868 	bl	80080f4 <__malloc_lock>
 8008024:	f8d8 3000 	ldr.w	r3, [r8]
 8008028:	461c      	mov	r4, r3
 800802a:	bb5c      	cbnz	r4, 8008084 <_malloc_r+0x90>
 800802c:	4629      	mov	r1, r5
 800802e:	4638      	mov	r0, r7
 8008030:	f7ff ffc0 	bl	8007fb4 <sbrk_aligned>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	4604      	mov	r4, r0
 8008038:	d155      	bne.n	80080e6 <_malloc_r+0xf2>
 800803a:	f8d8 4000 	ldr.w	r4, [r8]
 800803e:	4626      	mov	r6, r4
 8008040:	2e00      	cmp	r6, #0
 8008042:	d145      	bne.n	80080d0 <_malloc_r+0xdc>
 8008044:	2c00      	cmp	r4, #0
 8008046:	d048      	beq.n	80080da <_malloc_r+0xe6>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	4631      	mov	r1, r6
 800804c:	4638      	mov	r0, r7
 800804e:	eb04 0903 	add.w	r9, r4, r3
 8008052:	f000 fc85 	bl	8008960 <_sbrk_r>
 8008056:	4581      	cmp	r9, r0
 8008058:	d13f      	bne.n	80080da <_malloc_r+0xe6>
 800805a:	6821      	ldr	r1, [r4, #0]
 800805c:	1a6d      	subs	r5, r5, r1
 800805e:	4629      	mov	r1, r5
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff ffa7 	bl	8007fb4 <sbrk_aligned>
 8008066:	3001      	adds	r0, #1
 8008068:	d037      	beq.n	80080da <_malloc_r+0xe6>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	442b      	add	r3, r5
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	f8d8 3000 	ldr.w	r3, [r8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d038      	beq.n	80080ea <_malloc_r+0xf6>
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	42a2      	cmp	r2, r4
 800807c:	d12b      	bne.n	80080d6 <_malloc_r+0xe2>
 800807e:	2200      	movs	r2, #0
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	e00f      	b.n	80080a4 <_malloc_r+0xb0>
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	1b52      	subs	r2, r2, r5
 8008088:	d41f      	bmi.n	80080ca <_malloc_r+0xd6>
 800808a:	2a0b      	cmp	r2, #11
 800808c:	d917      	bls.n	80080be <_malloc_r+0xca>
 800808e:	1961      	adds	r1, r4, r5
 8008090:	42a3      	cmp	r3, r4
 8008092:	6025      	str	r5, [r4, #0]
 8008094:	bf18      	it	ne
 8008096:	6059      	strne	r1, [r3, #4]
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	bf08      	it	eq
 800809c:	f8c8 1000 	streq.w	r1, [r8]
 80080a0:	5162      	str	r2, [r4, r5]
 80080a2:	604b      	str	r3, [r1, #4]
 80080a4:	4638      	mov	r0, r7
 80080a6:	f104 060b 	add.w	r6, r4, #11
 80080aa:	f000 f829 	bl	8008100 <__malloc_unlock>
 80080ae:	f026 0607 	bic.w	r6, r6, #7
 80080b2:	1d23      	adds	r3, r4, #4
 80080b4:	1af2      	subs	r2, r6, r3
 80080b6:	d0ae      	beq.n	8008016 <_malloc_r+0x22>
 80080b8:	1b9b      	subs	r3, r3, r6
 80080ba:	50a3      	str	r3, [r4, r2]
 80080bc:	e7ab      	b.n	8008016 <_malloc_r+0x22>
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6862      	ldr	r2, [r4, #4]
 80080c2:	d1dd      	bne.n	8008080 <_malloc_r+0x8c>
 80080c4:	f8c8 2000 	str.w	r2, [r8]
 80080c8:	e7ec      	b.n	80080a4 <_malloc_r+0xb0>
 80080ca:	4623      	mov	r3, r4
 80080cc:	6864      	ldr	r4, [r4, #4]
 80080ce:	e7ac      	b.n	800802a <_malloc_r+0x36>
 80080d0:	4634      	mov	r4, r6
 80080d2:	6876      	ldr	r6, [r6, #4]
 80080d4:	e7b4      	b.n	8008040 <_malloc_r+0x4c>
 80080d6:	4613      	mov	r3, r2
 80080d8:	e7cc      	b.n	8008074 <_malloc_r+0x80>
 80080da:	230c      	movs	r3, #12
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4638      	mov	r0, r7
 80080e0:	f000 f80e 	bl	8008100 <__malloc_unlock>
 80080e4:	e797      	b.n	8008016 <_malloc_r+0x22>
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	e7dc      	b.n	80080a4 <_malloc_r+0xb0>
 80080ea:	605b      	str	r3, [r3, #4]
 80080ec:	deff      	udf	#255	; 0xff
 80080ee:	bf00      	nop
 80080f0:	20000b70 	.word	0x20000b70

080080f4 <__malloc_lock>:
 80080f4:	4801      	ldr	r0, [pc, #4]	; (80080fc <__malloc_lock+0x8>)
 80080f6:	f7ff b88b 	b.w	8007210 <__retarget_lock_acquire_recursive>
 80080fa:	bf00      	nop
 80080fc:	20000b6c 	.word	0x20000b6c

08008100 <__malloc_unlock>:
 8008100:	4801      	ldr	r0, [pc, #4]	; (8008108 <__malloc_unlock+0x8>)
 8008102:	f7ff b886 	b.w	8007212 <__retarget_lock_release_recursive>
 8008106:	bf00      	nop
 8008108:	20000b6c 	.word	0x20000b6c

0800810c <_Balloc>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	69c6      	ldr	r6, [r0, #28]
 8008110:	4604      	mov	r4, r0
 8008112:	460d      	mov	r5, r1
 8008114:	b976      	cbnz	r6, 8008134 <_Balloc+0x28>
 8008116:	2010      	movs	r0, #16
 8008118:	f7ff ff44 	bl	8007fa4 <malloc>
 800811c:	4602      	mov	r2, r0
 800811e:	61e0      	str	r0, [r4, #28]
 8008120:	b920      	cbnz	r0, 800812c <_Balloc+0x20>
 8008122:	4b18      	ldr	r3, [pc, #96]	; (8008184 <_Balloc+0x78>)
 8008124:	4818      	ldr	r0, [pc, #96]	; (8008188 <_Balloc+0x7c>)
 8008126:	216b      	movs	r1, #107	; 0x6b
 8008128:	f000 fc38 	bl	800899c <__assert_func>
 800812c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008130:	6006      	str	r6, [r0, #0]
 8008132:	60c6      	str	r6, [r0, #12]
 8008134:	69e6      	ldr	r6, [r4, #28]
 8008136:	68f3      	ldr	r3, [r6, #12]
 8008138:	b183      	cbz	r3, 800815c <_Balloc+0x50>
 800813a:	69e3      	ldr	r3, [r4, #28]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008142:	b9b8      	cbnz	r0, 8008174 <_Balloc+0x68>
 8008144:	2101      	movs	r1, #1
 8008146:	fa01 f605 	lsl.w	r6, r1, r5
 800814a:	1d72      	adds	r2, r6, #5
 800814c:	0092      	lsls	r2, r2, #2
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fc42 	bl	80089d8 <_calloc_r>
 8008154:	b160      	cbz	r0, 8008170 <_Balloc+0x64>
 8008156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800815a:	e00e      	b.n	800817a <_Balloc+0x6e>
 800815c:	2221      	movs	r2, #33	; 0x21
 800815e:	2104      	movs	r1, #4
 8008160:	4620      	mov	r0, r4
 8008162:	f000 fc39 	bl	80089d8 <_calloc_r>
 8008166:	69e3      	ldr	r3, [r4, #28]
 8008168:	60f0      	str	r0, [r6, #12]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e4      	bne.n	800813a <_Balloc+0x2e>
 8008170:	2000      	movs	r0, #0
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	6802      	ldr	r2, [r0, #0]
 8008176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800817a:	2300      	movs	r3, #0
 800817c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008180:	e7f7      	b.n	8008172 <_Balloc+0x66>
 8008182:	bf00      	nop
 8008184:	0800a0aa 	.word	0x0800a0aa
 8008188:	0800a12a 	.word	0x0800a12a

0800818c <_Bfree>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	69c6      	ldr	r6, [r0, #28]
 8008190:	4605      	mov	r5, r0
 8008192:	460c      	mov	r4, r1
 8008194:	b976      	cbnz	r6, 80081b4 <_Bfree+0x28>
 8008196:	2010      	movs	r0, #16
 8008198:	f7ff ff04 	bl	8007fa4 <malloc>
 800819c:	4602      	mov	r2, r0
 800819e:	61e8      	str	r0, [r5, #28]
 80081a0:	b920      	cbnz	r0, 80081ac <_Bfree+0x20>
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <_Bfree+0x3c>)
 80081a4:	4809      	ldr	r0, [pc, #36]	; (80081cc <_Bfree+0x40>)
 80081a6:	218f      	movs	r1, #143	; 0x8f
 80081a8:	f000 fbf8 	bl	800899c <__assert_func>
 80081ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081b0:	6006      	str	r6, [r0, #0]
 80081b2:	60c6      	str	r6, [r0, #12]
 80081b4:	b13c      	cbz	r4, 80081c6 <_Bfree+0x3a>
 80081b6:	69eb      	ldr	r3, [r5, #28]
 80081b8:	6862      	ldr	r2, [r4, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081c0:	6021      	str	r1, [r4, #0]
 80081c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	0800a0aa 	.word	0x0800a0aa
 80081cc:	0800a12a 	.word	0x0800a12a

080081d0 <__multadd>:
 80081d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	690d      	ldr	r5, [r1, #16]
 80081d6:	4607      	mov	r7, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	461e      	mov	r6, r3
 80081dc:	f101 0c14 	add.w	ip, r1, #20
 80081e0:	2000      	movs	r0, #0
 80081e2:	f8dc 3000 	ldr.w	r3, [ip]
 80081e6:	b299      	uxth	r1, r3
 80081e8:	fb02 6101 	mla	r1, r2, r1, r6
 80081ec:	0c1e      	lsrs	r6, r3, #16
 80081ee:	0c0b      	lsrs	r3, r1, #16
 80081f0:	fb02 3306 	mla	r3, r2, r6, r3
 80081f4:	b289      	uxth	r1, r1
 80081f6:	3001      	adds	r0, #1
 80081f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081fc:	4285      	cmp	r5, r0
 80081fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008202:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008206:	dcec      	bgt.n	80081e2 <__multadd+0x12>
 8008208:	b30e      	cbz	r6, 800824e <__multadd+0x7e>
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	42ab      	cmp	r3, r5
 800820e:	dc19      	bgt.n	8008244 <__multadd+0x74>
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	4638      	mov	r0, r7
 8008214:	3101      	adds	r1, #1
 8008216:	f7ff ff79 	bl	800810c <_Balloc>
 800821a:	4680      	mov	r8, r0
 800821c:	b928      	cbnz	r0, 800822a <__multadd+0x5a>
 800821e:	4602      	mov	r2, r0
 8008220:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <__multadd+0x84>)
 8008222:	480d      	ldr	r0, [pc, #52]	; (8008258 <__multadd+0x88>)
 8008224:	21ba      	movs	r1, #186	; 0xba
 8008226:	f000 fbb9 	bl	800899c <__assert_func>
 800822a:	6922      	ldr	r2, [r4, #16]
 800822c:	3202      	adds	r2, #2
 800822e:	f104 010c 	add.w	r1, r4, #12
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	300c      	adds	r0, #12
 8008236:	f000 fba3 	bl	8008980 <memcpy>
 800823a:	4621      	mov	r1, r4
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff ffa5 	bl	800818c <_Bfree>
 8008242:	4644      	mov	r4, r8
 8008244:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008248:	3501      	adds	r5, #1
 800824a:	615e      	str	r6, [r3, #20]
 800824c:	6125      	str	r5, [r4, #16]
 800824e:	4620      	mov	r0, r4
 8008250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008254:	0800a119 	.word	0x0800a119
 8008258:	0800a12a 	.word	0x0800a12a

0800825c <__hi0bits>:
 800825c:	0c03      	lsrs	r3, r0, #16
 800825e:	041b      	lsls	r3, r3, #16
 8008260:	b9d3      	cbnz	r3, 8008298 <__hi0bits+0x3c>
 8008262:	0400      	lsls	r0, r0, #16
 8008264:	2310      	movs	r3, #16
 8008266:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800826a:	bf04      	itt	eq
 800826c:	0200      	lsleq	r0, r0, #8
 800826e:	3308      	addeq	r3, #8
 8008270:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008274:	bf04      	itt	eq
 8008276:	0100      	lsleq	r0, r0, #4
 8008278:	3304      	addeq	r3, #4
 800827a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800827e:	bf04      	itt	eq
 8008280:	0080      	lsleq	r0, r0, #2
 8008282:	3302      	addeq	r3, #2
 8008284:	2800      	cmp	r0, #0
 8008286:	db05      	blt.n	8008294 <__hi0bits+0x38>
 8008288:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800828c:	f103 0301 	add.w	r3, r3, #1
 8008290:	bf08      	it	eq
 8008292:	2320      	moveq	r3, #32
 8008294:	4618      	mov	r0, r3
 8008296:	4770      	bx	lr
 8008298:	2300      	movs	r3, #0
 800829a:	e7e4      	b.n	8008266 <__hi0bits+0xa>

0800829c <__lo0bits>:
 800829c:	6803      	ldr	r3, [r0, #0]
 800829e:	f013 0207 	ands.w	r2, r3, #7
 80082a2:	d00c      	beq.n	80082be <__lo0bits+0x22>
 80082a4:	07d9      	lsls	r1, r3, #31
 80082a6:	d422      	bmi.n	80082ee <__lo0bits+0x52>
 80082a8:	079a      	lsls	r2, r3, #30
 80082aa:	bf49      	itett	mi
 80082ac:	085b      	lsrmi	r3, r3, #1
 80082ae:	089b      	lsrpl	r3, r3, #2
 80082b0:	6003      	strmi	r3, [r0, #0]
 80082b2:	2201      	movmi	r2, #1
 80082b4:	bf5c      	itt	pl
 80082b6:	6003      	strpl	r3, [r0, #0]
 80082b8:	2202      	movpl	r2, #2
 80082ba:	4610      	mov	r0, r2
 80082bc:	4770      	bx	lr
 80082be:	b299      	uxth	r1, r3
 80082c0:	b909      	cbnz	r1, 80082c6 <__lo0bits+0x2a>
 80082c2:	0c1b      	lsrs	r3, r3, #16
 80082c4:	2210      	movs	r2, #16
 80082c6:	b2d9      	uxtb	r1, r3
 80082c8:	b909      	cbnz	r1, 80082ce <__lo0bits+0x32>
 80082ca:	3208      	adds	r2, #8
 80082cc:	0a1b      	lsrs	r3, r3, #8
 80082ce:	0719      	lsls	r1, r3, #28
 80082d0:	bf04      	itt	eq
 80082d2:	091b      	lsreq	r3, r3, #4
 80082d4:	3204      	addeq	r2, #4
 80082d6:	0799      	lsls	r1, r3, #30
 80082d8:	bf04      	itt	eq
 80082da:	089b      	lsreq	r3, r3, #2
 80082dc:	3202      	addeq	r2, #2
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d403      	bmi.n	80082ea <__lo0bits+0x4e>
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	f102 0201 	add.w	r2, r2, #1
 80082e8:	d003      	beq.n	80082f2 <__lo0bits+0x56>
 80082ea:	6003      	str	r3, [r0, #0]
 80082ec:	e7e5      	b.n	80082ba <__lo0bits+0x1e>
 80082ee:	2200      	movs	r2, #0
 80082f0:	e7e3      	b.n	80082ba <__lo0bits+0x1e>
 80082f2:	2220      	movs	r2, #32
 80082f4:	e7e1      	b.n	80082ba <__lo0bits+0x1e>
	...

080082f8 <__i2b>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	460c      	mov	r4, r1
 80082fc:	2101      	movs	r1, #1
 80082fe:	f7ff ff05 	bl	800810c <_Balloc>
 8008302:	4602      	mov	r2, r0
 8008304:	b928      	cbnz	r0, 8008312 <__i2b+0x1a>
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <__i2b+0x24>)
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <__i2b+0x28>)
 800830a:	f240 1145 	movw	r1, #325	; 0x145
 800830e:	f000 fb45 	bl	800899c <__assert_func>
 8008312:	2301      	movs	r3, #1
 8008314:	6144      	str	r4, [r0, #20]
 8008316:	6103      	str	r3, [r0, #16]
 8008318:	bd10      	pop	{r4, pc}
 800831a:	bf00      	nop
 800831c:	0800a119 	.word	0x0800a119
 8008320:	0800a12a 	.word	0x0800a12a

08008324 <__multiply>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	4691      	mov	r9, r2
 800832a:	690a      	ldr	r2, [r1, #16]
 800832c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	bfb8      	it	lt
 8008334:	460b      	movlt	r3, r1
 8008336:	460c      	mov	r4, r1
 8008338:	bfbc      	itt	lt
 800833a:	464c      	movlt	r4, r9
 800833c:	4699      	movlt	r9, r3
 800833e:	6927      	ldr	r7, [r4, #16]
 8008340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	6861      	ldr	r1, [r4, #4]
 8008348:	eb07 060a 	add.w	r6, r7, sl
 800834c:	42b3      	cmp	r3, r6
 800834e:	b085      	sub	sp, #20
 8008350:	bfb8      	it	lt
 8008352:	3101      	addlt	r1, #1
 8008354:	f7ff feda 	bl	800810c <_Balloc>
 8008358:	b930      	cbnz	r0, 8008368 <__multiply+0x44>
 800835a:	4602      	mov	r2, r0
 800835c:	4b44      	ldr	r3, [pc, #272]	; (8008470 <__multiply+0x14c>)
 800835e:	4845      	ldr	r0, [pc, #276]	; (8008474 <__multiply+0x150>)
 8008360:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008364:	f000 fb1a 	bl	800899c <__assert_func>
 8008368:	f100 0514 	add.w	r5, r0, #20
 800836c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008370:	462b      	mov	r3, r5
 8008372:	2200      	movs	r2, #0
 8008374:	4543      	cmp	r3, r8
 8008376:	d321      	bcc.n	80083bc <__multiply+0x98>
 8008378:	f104 0314 	add.w	r3, r4, #20
 800837c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008380:	f109 0314 	add.w	r3, r9, #20
 8008384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008388:	9202      	str	r2, [sp, #8]
 800838a:	1b3a      	subs	r2, r7, r4
 800838c:	3a15      	subs	r2, #21
 800838e:	f022 0203 	bic.w	r2, r2, #3
 8008392:	3204      	adds	r2, #4
 8008394:	f104 0115 	add.w	r1, r4, #21
 8008398:	428f      	cmp	r7, r1
 800839a:	bf38      	it	cc
 800839c:	2204      	movcc	r2, #4
 800839e:	9201      	str	r2, [sp, #4]
 80083a0:	9a02      	ldr	r2, [sp, #8]
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d80c      	bhi.n	80083c2 <__multiply+0x9e>
 80083a8:	2e00      	cmp	r6, #0
 80083aa:	dd03      	ble.n	80083b4 <__multiply+0x90>
 80083ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d05b      	beq.n	800846c <__multiply+0x148>
 80083b4:	6106      	str	r6, [r0, #16]
 80083b6:	b005      	add	sp, #20
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	f843 2b04 	str.w	r2, [r3], #4
 80083c0:	e7d8      	b.n	8008374 <__multiply+0x50>
 80083c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80083c6:	f1ba 0f00 	cmp.w	sl, #0
 80083ca:	d024      	beq.n	8008416 <__multiply+0xf2>
 80083cc:	f104 0e14 	add.w	lr, r4, #20
 80083d0:	46a9      	mov	r9, r5
 80083d2:	f04f 0c00 	mov.w	ip, #0
 80083d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083da:	f8d9 1000 	ldr.w	r1, [r9]
 80083de:	fa1f fb82 	uxth.w	fp, r2
 80083e2:	b289      	uxth	r1, r1
 80083e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80083e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083ec:	f8d9 2000 	ldr.w	r2, [r9]
 80083f0:	4461      	add	r1, ip
 80083f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80083fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083fe:	b289      	uxth	r1, r1
 8008400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008404:	4577      	cmp	r7, lr
 8008406:	f849 1b04 	str.w	r1, [r9], #4
 800840a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800840e:	d8e2      	bhi.n	80083d6 <__multiply+0xb2>
 8008410:	9a01      	ldr	r2, [sp, #4]
 8008412:	f845 c002 	str.w	ip, [r5, r2]
 8008416:	9a03      	ldr	r2, [sp, #12]
 8008418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800841c:	3304      	adds	r3, #4
 800841e:	f1b9 0f00 	cmp.w	r9, #0
 8008422:	d021      	beq.n	8008468 <__multiply+0x144>
 8008424:	6829      	ldr	r1, [r5, #0]
 8008426:	f104 0c14 	add.w	ip, r4, #20
 800842a:	46ae      	mov	lr, r5
 800842c:	f04f 0a00 	mov.w	sl, #0
 8008430:	f8bc b000 	ldrh.w	fp, [ip]
 8008434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008438:	fb09 220b 	mla	r2, r9, fp, r2
 800843c:	4452      	add	r2, sl
 800843e:	b289      	uxth	r1, r1
 8008440:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008444:	f84e 1b04 	str.w	r1, [lr], #4
 8008448:	f85c 1b04 	ldr.w	r1, [ip], #4
 800844c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008450:	f8be 1000 	ldrh.w	r1, [lr]
 8008454:	fb09 110a 	mla	r1, r9, sl, r1
 8008458:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800845c:	4567      	cmp	r7, ip
 800845e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008462:	d8e5      	bhi.n	8008430 <__multiply+0x10c>
 8008464:	9a01      	ldr	r2, [sp, #4]
 8008466:	50a9      	str	r1, [r5, r2]
 8008468:	3504      	adds	r5, #4
 800846a:	e799      	b.n	80083a0 <__multiply+0x7c>
 800846c:	3e01      	subs	r6, #1
 800846e:	e79b      	b.n	80083a8 <__multiply+0x84>
 8008470:	0800a119 	.word	0x0800a119
 8008474:	0800a12a 	.word	0x0800a12a

08008478 <__pow5mult>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	4615      	mov	r5, r2
 800847e:	f012 0203 	ands.w	r2, r2, #3
 8008482:	4606      	mov	r6, r0
 8008484:	460f      	mov	r7, r1
 8008486:	d007      	beq.n	8008498 <__pow5mult+0x20>
 8008488:	4c25      	ldr	r4, [pc, #148]	; (8008520 <__pow5mult+0xa8>)
 800848a:	3a01      	subs	r2, #1
 800848c:	2300      	movs	r3, #0
 800848e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008492:	f7ff fe9d 	bl	80081d0 <__multadd>
 8008496:	4607      	mov	r7, r0
 8008498:	10ad      	asrs	r5, r5, #2
 800849a:	d03d      	beq.n	8008518 <__pow5mult+0xa0>
 800849c:	69f4      	ldr	r4, [r6, #28]
 800849e:	b97c      	cbnz	r4, 80084c0 <__pow5mult+0x48>
 80084a0:	2010      	movs	r0, #16
 80084a2:	f7ff fd7f 	bl	8007fa4 <malloc>
 80084a6:	4602      	mov	r2, r0
 80084a8:	61f0      	str	r0, [r6, #28]
 80084aa:	b928      	cbnz	r0, 80084b8 <__pow5mult+0x40>
 80084ac:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <__pow5mult+0xac>)
 80084ae:	481e      	ldr	r0, [pc, #120]	; (8008528 <__pow5mult+0xb0>)
 80084b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80084b4:	f000 fa72 	bl	800899c <__assert_func>
 80084b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084bc:	6004      	str	r4, [r0, #0]
 80084be:	60c4      	str	r4, [r0, #12]
 80084c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80084c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084c8:	b94c      	cbnz	r4, 80084de <__pow5mult+0x66>
 80084ca:	f240 2171 	movw	r1, #625	; 0x271
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ff12 	bl	80082f8 <__i2b>
 80084d4:	2300      	movs	r3, #0
 80084d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084da:	4604      	mov	r4, r0
 80084dc:	6003      	str	r3, [r0, #0]
 80084de:	f04f 0900 	mov.w	r9, #0
 80084e2:	07eb      	lsls	r3, r5, #31
 80084e4:	d50a      	bpl.n	80084fc <__pow5mult+0x84>
 80084e6:	4639      	mov	r1, r7
 80084e8:	4622      	mov	r2, r4
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ff1a 	bl	8008324 <__multiply>
 80084f0:	4639      	mov	r1, r7
 80084f2:	4680      	mov	r8, r0
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7ff fe49 	bl	800818c <_Bfree>
 80084fa:	4647      	mov	r7, r8
 80084fc:	106d      	asrs	r5, r5, #1
 80084fe:	d00b      	beq.n	8008518 <__pow5mult+0xa0>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	b938      	cbnz	r0, 8008514 <__pow5mult+0x9c>
 8008504:	4622      	mov	r2, r4
 8008506:	4621      	mov	r1, r4
 8008508:	4630      	mov	r0, r6
 800850a:	f7ff ff0b 	bl	8008324 <__multiply>
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	f8c0 9000 	str.w	r9, [r0]
 8008514:	4604      	mov	r4, r0
 8008516:	e7e4      	b.n	80084e2 <__pow5mult+0x6a>
 8008518:	4638      	mov	r0, r7
 800851a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800851e:	bf00      	nop
 8008520:	0800a278 	.word	0x0800a278
 8008524:	0800a0aa 	.word	0x0800a0aa
 8008528:	0800a12a 	.word	0x0800a12a

0800852c <__lshift>:
 800852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	460c      	mov	r4, r1
 8008532:	6849      	ldr	r1, [r1, #4]
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	4607      	mov	r7, r0
 800853e:	4691      	mov	r9, r2
 8008540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008544:	f108 0601 	add.w	r6, r8, #1
 8008548:	42b3      	cmp	r3, r6
 800854a:	db0b      	blt.n	8008564 <__lshift+0x38>
 800854c:	4638      	mov	r0, r7
 800854e:	f7ff fddd 	bl	800810c <_Balloc>
 8008552:	4605      	mov	r5, r0
 8008554:	b948      	cbnz	r0, 800856a <__lshift+0x3e>
 8008556:	4602      	mov	r2, r0
 8008558:	4b28      	ldr	r3, [pc, #160]	; (80085fc <__lshift+0xd0>)
 800855a:	4829      	ldr	r0, [pc, #164]	; (8008600 <__lshift+0xd4>)
 800855c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008560:	f000 fa1c 	bl	800899c <__assert_func>
 8008564:	3101      	adds	r1, #1
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	e7ee      	b.n	8008548 <__lshift+0x1c>
 800856a:	2300      	movs	r3, #0
 800856c:	f100 0114 	add.w	r1, r0, #20
 8008570:	f100 0210 	add.w	r2, r0, #16
 8008574:	4618      	mov	r0, r3
 8008576:	4553      	cmp	r3, sl
 8008578:	db33      	blt.n	80085e2 <__lshift+0xb6>
 800857a:	6920      	ldr	r0, [r4, #16]
 800857c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008580:	f104 0314 	add.w	r3, r4, #20
 8008584:	f019 091f 	ands.w	r9, r9, #31
 8008588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800858c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008590:	d02b      	beq.n	80085ea <__lshift+0xbe>
 8008592:	f1c9 0e20 	rsb	lr, r9, #32
 8008596:	468a      	mov	sl, r1
 8008598:	2200      	movs	r2, #0
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	fa00 f009 	lsl.w	r0, r0, r9
 80085a0:	4310      	orrs	r0, r2
 80085a2:	f84a 0b04 	str.w	r0, [sl], #4
 80085a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085aa:	459c      	cmp	ip, r3
 80085ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80085b0:	d8f3      	bhi.n	800859a <__lshift+0x6e>
 80085b2:	ebac 0304 	sub.w	r3, ip, r4
 80085b6:	3b15      	subs	r3, #21
 80085b8:	f023 0303 	bic.w	r3, r3, #3
 80085bc:	3304      	adds	r3, #4
 80085be:	f104 0015 	add.w	r0, r4, #21
 80085c2:	4584      	cmp	ip, r0
 80085c4:	bf38      	it	cc
 80085c6:	2304      	movcc	r3, #4
 80085c8:	50ca      	str	r2, [r1, r3]
 80085ca:	b10a      	cbz	r2, 80085d0 <__lshift+0xa4>
 80085cc:	f108 0602 	add.w	r6, r8, #2
 80085d0:	3e01      	subs	r6, #1
 80085d2:	4638      	mov	r0, r7
 80085d4:	612e      	str	r6, [r5, #16]
 80085d6:	4621      	mov	r1, r4
 80085d8:	f7ff fdd8 	bl	800818c <_Bfree>
 80085dc:	4628      	mov	r0, r5
 80085de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80085e6:	3301      	adds	r3, #1
 80085e8:	e7c5      	b.n	8008576 <__lshift+0x4a>
 80085ea:	3904      	subs	r1, #4
 80085ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80085f4:	459c      	cmp	ip, r3
 80085f6:	d8f9      	bhi.n	80085ec <__lshift+0xc0>
 80085f8:	e7ea      	b.n	80085d0 <__lshift+0xa4>
 80085fa:	bf00      	nop
 80085fc:	0800a119 	.word	0x0800a119
 8008600:	0800a12a 	.word	0x0800a12a

08008604 <__mcmp>:
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	6902      	ldr	r2, [r0, #16]
 8008608:	690c      	ldr	r4, [r1, #16]
 800860a:	1b12      	subs	r2, r2, r4
 800860c:	d10e      	bne.n	800862c <__mcmp+0x28>
 800860e:	f100 0314 	add.w	r3, r0, #20
 8008612:	3114      	adds	r1, #20
 8008614:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008618:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800861c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008620:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008624:	42a5      	cmp	r5, r4
 8008626:	d003      	beq.n	8008630 <__mcmp+0x2c>
 8008628:	d305      	bcc.n	8008636 <__mcmp+0x32>
 800862a:	2201      	movs	r2, #1
 800862c:	4610      	mov	r0, r2
 800862e:	bd30      	pop	{r4, r5, pc}
 8008630:	4283      	cmp	r3, r0
 8008632:	d3f3      	bcc.n	800861c <__mcmp+0x18>
 8008634:	e7fa      	b.n	800862c <__mcmp+0x28>
 8008636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800863a:	e7f7      	b.n	800862c <__mcmp+0x28>

0800863c <__mdiff>:
 800863c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	4606      	mov	r6, r0
 8008644:	4611      	mov	r1, r2
 8008646:	4620      	mov	r0, r4
 8008648:	4690      	mov	r8, r2
 800864a:	f7ff ffdb 	bl	8008604 <__mcmp>
 800864e:	1e05      	subs	r5, r0, #0
 8008650:	d110      	bne.n	8008674 <__mdiff+0x38>
 8008652:	4629      	mov	r1, r5
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff fd59 	bl	800810c <_Balloc>
 800865a:	b930      	cbnz	r0, 800866a <__mdiff+0x2e>
 800865c:	4b3a      	ldr	r3, [pc, #232]	; (8008748 <__mdiff+0x10c>)
 800865e:	4602      	mov	r2, r0
 8008660:	f240 2137 	movw	r1, #567	; 0x237
 8008664:	4839      	ldr	r0, [pc, #228]	; (800874c <__mdiff+0x110>)
 8008666:	f000 f999 	bl	800899c <__assert_func>
 800866a:	2301      	movs	r3, #1
 800866c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	bfa4      	itt	ge
 8008676:	4643      	movge	r3, r8
 8008678:	46a0      	movge	r8, r4
 800867a:	4630      	mov	r0, r6
 800867c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008680:	bfa6      	itte	ge
 8008682:	461c      	movge	r4, r3
 8008684:	2500      	movge	r5, #0
 8008686:	2501      	movlt	r5, #1
 8008688:	f7ff fd40 	bl	800810c <_Balloc>
 800868c:	b920      	cbnz	r0, 8008698 <__mdiff+0x5c>
 800868e:	4b2e      	ldr	r3, [pc, #184]	; (8008748 <__mdiff+0x10c>)
 8008690:	4602      	mov	r2, r0
 8008692:	f240 2145 	movw	r1, #581	; 0x245
 8008696:	e7e5      	b.n	8008664 <__mdiff+0x28>
 8008698:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800869c:	6926      	ldr	r6, [r4, #16]
 800869e:	60c5      	str	r5, [r0, #12]
 80086a0:	f104 0914 	add.w	r9, r4, #20
 80086a4:	f108 0514 	add.w	r5, r8, #20
 80086a8:	f100 0e14 	add.w	lr, r0, #20
 80086ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086b4:	f108 0210 	add.w	r2, r8, #16
 80086b8:	46f2      	mov	sl, lr
 80086ba:	2100      	movs	r1, #0
 80086bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80086c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086c4:	fa11 f88b 	uxtah	r8, r1, fp
 80086c8:	b299      	uxth	r1, r3
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	eba8 0801 	sub.w	r8, r8, r1
 80086d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086d8:	fa1f f888 	uxth.w	r8, r8
 80086dc:	1419      	asrs	r1, r3, #16
 80086de:	454e      	cmp	r6, r9
 80086e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086e4:	f84a 3b04 	str.w	r3, [sl], #4
 80086e8:	d8e8      	bhi.n	80086bc <__mdiff+0x80>
 80086ea:	1b33      	subs	r3, r6, r4
 80086ec:	3b15      	subs	r3, #21
 80086ee:	f023 0303 	bic.w	r3, r3, #3
 80086f2:	3304      	adds	r3, #4
 80086f4:	3415      	adds	r4, #21
 80086f6:	42a6      	cmp	r6, r4
 80086f8:	bf38      	it	cc
 80086fa:	2304      	movcc	r3, #4
 80086fc:	441d      	add	r5, r3
 80086fe:	4473      	add	r3, lr
 8008700:	469e      	mov	lr, r3
 8008702:	462e      	mov	r6, r5
 8008704:	4566      	cmp	r6, ip
 8008706:	d30e      	bcc.n	8008726 <__mdiff+0xea>
 8008708:	f10c 0203 	add.w	r2, ip, #3
 800870c:	1b52      	subs	r2, r2, r5
 800870e:	f022 0203 	bic.w	r2, r2, #3
 8008712:	3d03      	subs	r5, #3
 8008714:	45ac      	cmp	ip, r5
 8008716:	bf38      	it	cc
 8008718:	2200      	movcc	r2, #0
 800871a:	4413      	add	r3, r2
 800871c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008720:	b17a      	cbz	r2, 8008742 <__mdiff+0x106>
 8008722:	6107      	str	r7, [r0, #16]
 8008724:	e7a4      	b.n	8008670 <__mdiff+0x34>
 8008726:	f856 8b04 	ldr.w	r8, [r6], #4
 800872a:	fa11 f288 	uxtah	r2, r1, r8
 800872e:	1414      	asrs	r4, r2, #16
 8008730:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008734:	b292      	uxth	r2, r2
 8008736:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800873a:	f84e 2b04 	str.w	r2, [lr], #4
 800873e:	1421      	asrs	r1, r4, #16
 8008740:	e7e0      	b.n	8008704 <__mdiff+0xc8>
 8008742:	3f01      	subs	r7, #1
 8008744:	e7ea      	b.n	800871c <__mdiff+0xe0>
 8008746:	bf00      	nop
 8008748:	0800a119 	.word	0x0800a119
 800874c:	0800a12a 	.word	0x0800a12a

08008750 <__d2b>:
 8008750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008754:	460f      	mov	r7, r1
 8008756:	2101      	movs	r1, #1
 8008758:	ec59 8b10 	vmov	r8, r9, d0
 800875c:	4616      	mov	r6, r2
 800875e:	f7ff fcd5 	bl	800810c <_Balloc>
 8008762:	4604      	mov	r4, r0
 8008764:	b930      	cbnz	r0, 8008774 <__d2b+0x24>
 8008766:	4602      	mov	r2, r0
 8008768:	4b24      	ldr	r3, [pc, #144]	; (80087fc <__d2b+0xac>)
 800876a:	4825      	ldr	r0, [pc, #148]	; (8008800 <__d2b+0xb0>)
 800876c:	f240 310f 	movw	r1, #783	; 0x30f
 8008770:	f000 f914 	bl	800899c <__assert_func>
 8008774:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800877c:	bb2d      	cbnz	r5, 80087ca <__d2b+0x7a>
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	f1b8 0300 	subs.w	r3, r8, #0
 8008784:	d026      	beq.n	80087d4 <__d2b+0x84>
 8008786:	4668      	mov	r0, sp
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	f7ff fd87 	bl	800829c <__lo0bits>
 800878e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008792:	b1e8      	cbz	r0, 80087d0 <__d2b+0x80>
 8008794:	f1c0 0320 	rsb	r3, r0, #32
 8008798:	fa02 f303 	lsl.w	r3, r2, r3
 800879c:	430b      	orrs	r3, r1
 800879e:	40c2      	lsrs	r2, r0
 80087a0:	6163      	str	r3, [r4, #20]
 80087a2:	9201      	str	r2, [sp, #4]
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	61a3      	str	r3, [r4, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bf14      	ite	ne
 80087ac:	2202      	movne	r2, #2
 80087ae:	2201      	moveq	r2, #1
 80087b0:	6122      	str	r2, [r4, #16]
 80087b2:	b1bd      	cbz	r5, 80087e4 <__d2b+0x94>
 80087b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087b8:	4405      	add	r5, r0
 80087ba:	603d      	str	r5, [r7, #0]
 80087bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087c0:	6030      	str	r0, [r6, #0]
 80087c2:	4620      	mov	r0, r4
 80087c4:	b003      	add	sp, #12
 80087c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ce:	e7d6      	b.n	800877e <__d2b+0x2e>
 80087d0:	6161      	str	r1, [r4, #20]
 80087d2:	e7e7      	b.n	80087a4 <__d2b+0x54>
 80087d4:	a801      	add	r0, sp, #4
 80087d6:	f7ff fd61 	bl	800829c <__lo0bits>
 80087da:	9b01      	ldr	r3, [sp, #4]
 80087dc:	6163      	str	r3, [r4, #20]
 80087de:	3020      	adds	r0, #32
 80087e0:	2201      	movs	r2, #1
 80087e2:	e7e5      	b.n	80087b0 <__d2b+0x60>
 80087e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087ec:	6038      	str	r0, [r7, #0]
 80087ee:	6918      	ldr	r0, [r3, #16]
 80087f0:	f7ff fd34 	bl	800825c <__hi0bits>
 80087f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087f8:	e7e2      	b.n	80087c0 <__d2b+0x70>
 80087fa:	bf00      	nop
 80087fc:	0800a119 	.word	0x0800a119
 8008800:	0800a12a 	.word	0x0800a12a

08008804 <__sflush_r>:
 8008804:	898a      	ldrh	r2, [r1, #12]
 8008806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800880a:	4605      	mov	r5, r0
 800880c:	0710      	lsls	r0, r2, #28
 800880e:	460c      	mov	r4, r1
 8008810:	d458      	bmi.n	80088c4 <__sflush_r+0xc0>
 8008812:	684b      	ldr	r3, [r1, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	dc05      	bgt.n	8008824 <__sflush_r+0x20>
 8008818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	dc02      	bgt.n	8008824 <__sflush_r+0x20>
 800881e:	2000      	movs	r0, #0
 8008820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008826:	2e00      	cmp	r6, #0
 8008828:	d0f9      	beq.n	800881e <__sflush_r+0x1a>
 800882a:	2300      	movs	r3, #0
 800882c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008830:	682f      	ldr	r7, [r5, #0]
 8008832:	6a21      	ldr	r1, [r4, #32]
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	d032      	beq.n	800889e <__sflush_r+0x9a>
 8008838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	075a      	lsls	r2, r3, #29
 800883e:	d505      	bpl.n	800884c <__sflush_r+0x48>
 8008840:	6863      	ldr	r3, [r4, #4]
 8008842:	1ac0      	subs	r0, r0, r3
 8008844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008846:	b10b      	cbz	r3, 800884c <__sflush_r+0x48>
 8008848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800884a:	1ac0      	subs	r0, r0, r3
 800884c:	2300      	movs	r3, #0
 800884e:	4602      	mov	r2, r0
 8008850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008852:	6a21      	ldr	r1, [r4, #32]
 8008854:	4628      	mov	r0, r5
 8008856:	47b0      	blx	r6
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	d106      	bne.n	800886c <__sflush_r+0x68>
 800885e:	6829      	ldr	r1, [r5, #0]
 8008860:	291d      	cmp	r1, #29
 8008862:	d82b      	bhi.n	80088bc <__sflush_r+0xb8>
 8008864:	4a29      	ldr	r2, [pc, #164]	; (800890c <__sflush_r+0x108>)
 8008866:	410a      	asrs	r2, r1
 8008868:	07d6      	lsls	r6, r2, #31
 800886a:	d427      	bmi.n	80088bc <__sflush_r+0xb8>
 800886c:	2200      	movs	r2, #0
 800886e:	6062      	str	r2, [r4, #4]
 8008870:	04d9      	lsls	r1, r3, #19
 8008872:	6922      	ldr	r2, [r4, #16]
 8008874:	6022      	str	r2, [r4, #0]
 8008876:	d504      	bpl.n	8008882 <__sflush_r+0x7e>
 8008878:	1c42      	adds	r2, r0, #1
 800887a:	d101      	bne.n	8008880 <__sflush_r+0x7c>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b903      	cbnz	r3, 8008882 <__sflush_r+0x7e>
 8008880:	6560      	str	r0, [r4, #84]	; 0x54
 8008882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008884:	602f      	str	r7, [r5, #0]
 8008886:	2900      	cmp	r1, #0
 8008888:	d0c9      	beq.n	800881e <__sflush_r+0x1a>
 800888a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800888e:	4299      	cmp	r1, r3
 8008890:	d002      	beq.n	8008898 <__sflush_r+0x94>
 8008892:	4628      	mov	r0, r5
 8008894:	f7ff fb3a 	bl	8007f0c <_free_r>
 8008898:	2000      	movs	r0, #0
 800889a:	6360      	str	r0, [r4, #52]	; 0x34
 800889c:	e7c0      	b.n	8008820 <__sflush_r+0x1c>
 800889e:	2301      	movs	r3, #1
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b0      	blx	r6
 80088a4:	1c41      	adds	r1, r0, #1
 80088a6:	d1c8      	bne.n	800883a <__sflush_r+0x36>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0c5      	beq.n	800883a <__sflush_r+0x36>
 80088ae:	2b1d      	cmp	r3, #29
 80088b0:	d001      	beq.n	80088b6 <__sflush_r+0xb2>
 80088b2:	2b16      	cmp	r3, #22
 80088b4:	d101      	bne.n	80088ba <__sflush_r+0xb6>
 80088b6:	602f      	str	r7, [r5, #0]
 80088b8:	e7b1      	b.n	800881e <__sflush_r+0x1a>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	e7ad      	b.n	8008820 <__sflush_r+0x1c>
 80088c4:	690f      	ldr	r7, [r1, #16]
 80088c6:	2f00      	cmp	r7, #0
 80088c8:	d0a9      	beq.n	800881e <__sflush_r+0x1a>
 80088ca:	0793      	lsls	r3, r2, #30
 80088cc:	680e      	ldr	r6, [r1, #0]
 80088ce:	bf08      	it	eq
 80088d0:	694b      	ldreq	r3, [r1, #20]
 80088d2:	600f      	str	r7, [r1, #0]
 80088d4:	bf18      	it	ne
 80088d6:	2300      	movne	r3, #0
 80088d8:	eba6 0807 	sub.w	r8, r6, r7
 80088dc:	608b      	str	r3, [r1, #8]
 80088de:	f1b8 0f00 	cmp.w	r8, #0
 80088e2:	dd9c      	ble.n	800881e <__sflush_r+0x1a>
 80088e4:	6a21      	ldr	r1, [r4, #32]
 80088e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088e8:	4643      	mov	r3, r8
 80088ea:	463a      	mov	r2, r7
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b0      	blx	r6
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dc06      	bgt.n	8008902 <__sflush_r+0xfe>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008900:	e78e      	b.n	8008820 <__sflush_r+0x1c>
 8008902:	4407      	add	r7, r0
 8008904:	eba8 0800 	sub.w	r8, r8, r0
 8008908:	e7e9      	b.n	80088de <__sflush_r+0xda>
 800890a:	bf00      	nop
 800890c:	dfbffffe 	.word	0xdfbffffe

08008910 <_fflush_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	690b      	ldr	r3, [r1, #16]
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	b913      	cbnz	r3, 8008920 <_fflush_r+0x10>
 800891a:	2500      	movs	r5, #0
 800891c:	4628      	mov	r0, r5
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	b118      	cbz	r0, 800892a <_fflush_r+0x1a>
 8008922:	6a03      	ldr	r3, [r0, #32]
 8008924:	b90b      	cbnz	r3, 800892a <_fflush_r+0x1a>
 8008926:	f7fe fb7d 	bl	8007024 <__sinit>
 800892a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0f3      	beq.n	800891a <_fflush_r+0xa>
 8008932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008934:	07d0      	lsls	r0, r2, #31
 8008936:	d404      	bmi.n	8008942 <_fflush_r+0x32>
 8008938:	0599      	lsls	r1, r3, #22
 800893a:	d402      	bmi.n	8008942 <_fflush_r+0x32>
 800893c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893e:	f7fe fc67 	bl	8007210 <__retarget_lock_acquire_recursive>
 8008942:	4628      	mov	r0, r5
 8008944:	4621      	mov	r1, r4
 8008946:	f7ff ff5d 	bl	8008804 <__sflush_r>
 800894a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800894c:	07da      	lsls	r2, r3, #31
 800894e:	4605      	mov	r5, r0
 8008950:	d4e4      	bmi.n	800891c <_fflush_r+0xc>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	059b      	lsls	r3, r3, #22
 8008956:	d4e1      	bmi.n	800891c <_fflush_r+0xc>
 8008958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895a:	f7fe fc5a 	bl	8007212 <__retarget_lock_release_recursive>
 800895e:	e7dd      	b.n	800891c <_fflush_r+0xc>

08008960 <_sbrk_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d06      	ldr	r5, [pc, #24]	; (800897c <_sbrk_r+0x1c>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f8 fe32 	bl	80015d4 <_sbrk>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_sbrk_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_sbrk_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20000b68 	.word	0x20000b68

08008980 <memcpy>:
 8008980:	440a      	add	r2, r1
 8008982:	4291      	cmp	r1, r2
 8008984:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008988:	d100      	bne.n	800898c <memcpy+0xc>
 800898a:	4770      	bx	lr
 800898c:	b510      	push	{r4, lr}
 800898e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008996:	4291      	cmp	r1, r2
 8008998:	d1f9      	bne.n	800898e <memcpy+0xe>
 800899a:	bd10      	pop	{r4, pc}

0800899c <__assert_func>:
 800899c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800899e:	4614      	mov	r4, r2
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <__assert_func+0x2c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4605      	mov	r5, r0
 80089a8:	68d8      	ldr	r0, [r3, #12]
 80089aa:	b14c      	cbz	r4, 80089c0 <__assert_func+0x24>
 80089ac:	4b07      	ldr	r3, [pc, #28]	; (80089cc <__assert_func+0x30>)
 80089ae:	9100      	str	r1, [sp, #0]
 80089b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089b4:	4906      	ldr	r1, [pc, #24]	; (80089d0 <__assert_func+0x34>)
 80089b6:	462b      	mov	r3, r5
 80089b8:	f000 f844 	bl	8008a44 <fiprintf>
 80089bc:	f000 f854 	bl	8008a68 <abort>
 80089c0:	4b04      	ldr	r3, [pc, #16]	; (80089d4 <__assert_func+0x38>)
 80089c2:	461c      	mov	r4, r3
 80089c4:	e7f3      	b.n	80089ae <__assert_func+0x12>
 80089c6:	bf00      	nop
 80089c8:	2000008c 	.word	0x2000008c
 80089cc:	0800a28e 	.word	0x0800a28e
 80089d0:	0800a29b 	.word	0x0800a29b
 80089d4:	0800a2c9 	.word	0x0800a2c9

080089d8 <_calloc_r>:
 80089d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089da:	fba1 2402 	umull	r2, r4, r1, r2
 80089de:	b94c      	cbnz	r4, 80089f4 <_calloc_r+0x1c>
 80089e0:	4611      	mov	r1, r2
 80089e2:	9201      	str	r2, [sp, #4]
 80089e4:	f7ff fb06 	bl	8007ff4 <_malloc_r>
 80089e8:	9a01      	ldr	r2, [sp, #4]
 80089ea:	4605      	mov	r5, r0
 80089ec:	b930      	cbnz	r0, 80089fc <_calloc_r+0x24>
 80089ee:	4628      	mov	r0, r5
 80089f0:	b003      	add	sp, #12
 80089f2:	bd30      	pop	{r4, r5, pc}
 80089f4:	220c      	movs	r2, #12
 80089f6:	6002      	str	r2, [r0, #0]
 80089f8:	2500      	movs	r5, #0
 80089fa:	e7f8      	b.n	80089ee <_calloc_r+0x16>
 80089fc:	4621      	mov	r1, r4
 80089fe:	f7fe fb8a 	bl	8007116 <memset>
 8008a02:	e7f4      	b.n	80089ee <_calloc_r+0x16>

08008a04 <__ascii_mbtowc>:
 8008a04:	b082      	sub	sp, #8
 8008a06:	b901      	cbnz	r1, 8008a0a <__ascii_mbtowc+0x6>
 8008a08:	a901      	add	r1, sp, #4
 8008a0a:	b142      	cbz	r2, 8008a1e <__ascii_mbtowc+0x1a>
 8008a0c:	b14b      	cbz	r3, 8008a22 <__ascii_mbtowc+0x1e>
 8008a0e:	7813      	ldrb	r3, [r2, #0]
 8008a10:	600b      	str	r3, [r1, #0]
 8008a12:	7812      	ldrb	r2, [r2, #0]
 8008a14:	1e10      	subs	r0, r2, #0
 8008a16:	bf18      	it	ne
 8008a18:	2001      	movne	r0, #1
 8008a1a:	b002      	add	sp, #8
 8008a1c:	4770      	bx	lr
 8008a1e:	4610      	mov	r0, r2
 8008a20:	e7fb      	b.n	8008a1a <__ascii_mbtowc+0x16>
 8008a22:	f06f 0001 	mvn.w	r0, #1
 8008a26:	e7f8      	b.n	8008a1a <__ascii_mbtowc+0x16>

08008a28 <__ascii_wctomb>:
 8008a28:	b149      	cbz	r1, 8008a3e <__ascii_wctomb+0x16>
 8008a2a:	2aff      	cmp	r2, #255	; 0xff
 8008a2c:	bf85      	ittet	hi
 8008a2e:	238a      	movhi	r3, #138	; 0x8a
 8008a30:	6003      	strhi	r3, [r0, #0]
 8008a32:	700a      	strbls	r2, [r1, #0]
 8008a34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008a38:	bf98      	it	ls
 8008a3a:	2001      	movls	r0, #1
 8008a3c:	4770      	bx	lr
 8008a3e:	4608      	mov	r0, r1
 8008a40:	4770      	bx	lr
	...

08008a44 <fiprintf>:
 8008a44:	b40e      	push	{r1, r2, r3}
 8008a46:	b503      	push	{r0, r1, lr}
 8008a48:	4601      	mov	r1, r0
 8008a4a:	ab03      	add	r3, sp, #12
 8008a4c:	4805      	ldr	r0, [pc, #20]	; (8008a64 <fiprintf+0x20>)
 8008a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a52:	6800      	ldr	r0, [r0, #0]
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	f000 f837 	bl	8008ac8 <_vfiprintf_r>
 8008a5a:	b002      	add	sp, #8
 8008a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a60:	b003      	add	sp, #12
 8008a62:	4770      	bx	lr
 8008a64:	2000008c 	.word	0x2000008c

08008a68 <abort>:
 8008a68:	b508      	push	{r3, lr}
 8008a6a:	2006      	movs	r0, #6
 8008a6c:	f000 fa04 	bl	8008e78 <raise>
 8008a70:	2001      	movs	r0, #1
 8008a72:	f7f8 fd37 	bl	80014e4 <_exit>

08008a76 <__sfputc_r>:
 8008a76:	6893      	ldr	r3, [r2, #8]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	b410      	push	{r4}
 8008a7e:	6093      	str	r3, [r2, #8]
 8008a80:	da08      	bge.n	8008a94 <__sfputc_r+0x1e>
 8008a82:	6994      	ldr	r4, [r2, #24]
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	db01      	blt.n	8008a8c <__sfputc_r+0x16>
 8008a88:	290a      	cmp	r1, #10
 8008a8a:	d103      	bne.n	8008a94 <__sfputc_r+0x1e>
 8008a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a90:	f000 b934 	b.w	8008cfc <__swbuf_r>
 8008a94:	6813      	ldr	r3, [r2, #0]
 8008a96:	1c58      	adds	r0, r3, #1
 8008a98:	6010      	str	r0, [r2, #0]
 8008a9a:	7019      	strb	r1, [r3, #0]
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <__sfputs_r>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	4614      	mov	r4, r2
 8008aac:	18d5      	adds	r5, r2, r3
 8008aae:	42ac      	cmp	r4, r5
 8008ab0:	d101      	bne.n	8008ab6 <__sfputs_r+0x12>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e007      	b.n	8008ac6 <__sfputs_r+0x22>
 8008ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aba:	463a      	mov	r2, r7
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff ffda 	bl	8008a76 <__sfputc_r>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d1f3      	bne.n	8008aae <__sfputs_r+0xa>
 8008ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ac8 <_vfiprintf_r>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	460d      	mov	r5, r1
 8008ace:	b09d      	sub	sp, #116	; 0x74
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	4698      	mov	r8, r3
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	b118      	cbz	r0, 8008ae0 <_vfiprintf_r+0x18>
 8008ad8:	6a03      	ldr	r3, [r0, #32]
 8008ada:	b90b      	cbnz	r3, 8008ae0 <_vfiprintf_r+0x18>
 8008adc:	f7fe faa2 	bl	8007024 <__sinit>
 8008ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae2:	07d9      	lsls	r1, r3, #31
 8008ae4:	d405      	bmi.n	8008af2 <_vfiprintf_r+0x2a>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_vfiprintf_r+0x2a>
 8008aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aee:	f7fe fb8f 	bl	8007210 <__retarget_lock_acquire_recursive>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	071b      	lsls	r3, r3, #28
 8008af6:	d501      	bpl.n	8008afc <_vfiprintf_r+0x34>
 8008af8:	692b      	ldr	r3, [r5, #16]
 8008afa:	b99b      	cbnz	r3, 8008b24 <_vfiprintf_r+0x5c>
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f000 f93a 	bl	8008d78 <__swsetup_r>
 8008b04:	b170      	cbz	r0, 8008b24 <_vfiprintf_r+0x5c>
 8008b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b08:	07dc      	lsls	r4, r3, #31
 8008b0a:	d504      	bpl.n	8008b16 <_vfiprintf_r+0x4e>
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b10:	b01d      	add	sp, #116	; 0x74
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	0598      	lsls	r0, r3, #22
 8008b1a:	d4f7      	bmi.n	8008b0c <_vfiprintf_r+0x44>
 8008b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1e:	f7fe fb78 	bl	8007212 <__retarget_lock_release_recursive>
 8008b22:	e7f3      	b.n	8008b0c <_vfiprintf_r+0x44>
 8008b24:	2300      	movs	r3, #0
 8008b26:	9309      	str	r3, [sp, #36]	; 0x24
 8008b28:	2320      	movs	r3, #32
 8008b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b32:	2330      	movs	r3, #48	; 0x30
 8008b34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ce8 <_vfiprintf_r+0x220>
 8008b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	4623      	mov	r3, r4
 8008b42:	469a      	mov	sl, r3
 8008b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b48:	b10a      	cbz	r2, 8008b4e <_vfiprintf_r+0x86>
 8008b4a:	2a25      	cmp	r2, #37	; 0x25
 8008b4c:	d1f9      	bne.n	8008b42 <_vfiprintf_r+0x7a>
 8008b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b52:	d00b      	beq.n	8008b6c <_vfiprintf_r+0xa4>
 8008b54:	465b      	mov	r3, fp
 8008b56:	4622      	mov	r2, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7ff ffa2 	bl	8008aa4 <__sfputs_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	f000 80a9 	beq.w	8008cb8 <_vfiprintf_r+0x1f0>
 8008b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b68:	445a      	add	r2, fp
 8008b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80a1 	beq.w	8008cb8 <_vfiprintf_r+0x1f0>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b80:	f10a 0a01 	add.w	sl, sl, #1
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8e:	4654      	mov	r4, sl
 8008b90:	2205      	movs	r2, #5
 8008b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b96:	4854      	ldr	r0, [pc, #336]	; (8008ce8 <_vfiprintf_r+0x220>)
 8008b98:	f7f7 fb22 	bl	80001e0 <memchr>
 8008b9c:	9a04      	ldr	r2, [sp, #16]
 8008b9e:	b9d8      	cbnz	r0, 8008bd8 <_vfiprintf_r+0x110>
 8008ba0:	06d1      	lsls	r1, r2, #27
 8008ba2:	bf44      	itt	mi
 8008ba4:	2320      	movmi	r3, #32
 8008ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008baa:	0713      	lsls	r3, r2, #28
 8008bac:	bf44      	itt	mi
 8008bae:	232b      	movmi	r3, #43	; 0x2b
 8008bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bba:	d015      	beq.n	8008be8 <_vfiprintf_r+0x120>
 8008bbc:	9a07      	ldr	r2, [sp, #28]
 8008bbe:	4654      	mov	r4, sl
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f04f 0c0a 	mov.w	ip, #10
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bcc:	3b30      	subs	r3, #48	; 0x30
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d94d      	bls.n	8008c6e <_vfiprintf_r+0x1a6>
 8008bd2:	b1b0      	cbz	r0, 8008c02 <_vfiprintf_r+0x13a>
 8008bd4:	9207      	str	r2, [sp, #28]
 8008bd6:	e014      	b.n	8008c02 <_vfiprintf_r+0x13a>
 8008bd8:	eba0 0308 	sub.w	r3, r0, r8
 8008bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8008be0:	4313      	orrs	r3, r2
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	46a2      	mov	sl, r4
 8008be6:	e7d2      	b.n	8008b8e <_vfiprintf_r+0xc6>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	1d19      	adds	r1, r3, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	9103      	str	r1, [sp, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bfbb      	ittet	lt
 8008bf4:	425b      	neglt	r3, r3
 8008bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfa:	9307      	strge	r3, [sp, #28]
 8008bfc:	9307      	strlt	r3, [sp, #28]
 8008bfe:	bfb8      	it	lt
 8008c00:	9204      	strlt	r2, [sp, #16]
 8008c02:	7823      	ldrb	r3, [r4, #0]
 8008c04:	2b2e      	cmp	r3, #46	; 0x2e
 8008c06:	d10c      	bne.n	8008c22 <_vfiprintf_r+0x15a>
 8008c08:	7863      	ldrb	r3, [r4, #1]
 8008c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0c:	d134      	bne.n	8008c78 <_vfiprintf_r+0x1b0>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	1d1a      	adds	r2, r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	9203      	str	r2, [sp, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bfb8      	it	lt
 8008c1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c1e:	3402      	adds	r4, #2
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cf8 <_vfiprintf_r+0x230>
 8008c26:	7821      	ldrb	r1, [r4, #0]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	f7f7 fad8 	bl	80001e0 <memchr>
 8008c30:	b138      	cbz	r0, 8008c42 <_vfiprintf_r+0x17a>
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	eba0 000a 	sub.w	r0, r0, sl
 8008c38:	2240      	movs	r2, #64	; 0x40
 8008c3a:	4082      	lsls	r2, r0
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	3401      	adds	r4, #1
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	4829      	ldr	r0, [pc, #164]	; (8008cec <_vfiprintf_r+0x224>)
 8008c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c4c:	2206      	movs	r2, #6
 8008c4e:	f7f7 fac7 	bl	80001e0 <memchr>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d03f      	beq.n	8008cd6 <_vfiprintf_r+0x20e>
 8008c56:	4b26      	ldr	r3, [pc, #152]	; (8008cf0 <_vfiprintf_r+0x228>)
 8008c58:	bb1b      	cbnz	r3, 8008ca2 <_vfiprintf_r+0x1da>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	3307      	adds	r3, #7
 8008c5e:	f023 0307 	bic.w	r3, r3, #7
 8008c62:	3308      	adds	r3, #8
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	443b      	add	r3, r7
 8008c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6c:	e768      	b.n	8008b40 <_vfiprintf_r+0x78>
 8008c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c72:	460c      	mov	r4, r1
 8008c74:	2001      	movs	r0, #1
 8008c76:	e7a6      	b.n	8008bc6 <_vfiprintf_r+0xfe>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f04f 0c0a 	mov.w	ip, #10
 8008c84:	4620      	mov	r0, r4
 8008c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8a:	3a30      	subs	r2, #48	; 0x30
 8008c8c:	2a09      	cmp	r2, #9
 8008c8e:	d903      	bls.n	8008c98 <_vfiprintf_r+0x1d0>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0c6      	beq.n	8008c22 <_vfiprintf_r+0x15a>
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	e7c4      	b.n	8008c22 <_vfiprintf_r+0x15a>
 8008c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e7f0      	b.n	8008c84 <_vfiprintf_r+0x1bc>
 8008ca2:	ab03      	add	r3, sp, #12
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <_vfiprintf_r+0x22c>)
 8008caa:	a904      	add	r1, sp, #16
 8008cac:	4630      	mov	r0, r6
 8008cae:	f7fd fd79 	bl	80067a4 <_printf_float>
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	1c78      	adds	r0, r7, #1
 8008cb6:	d1d6      	bne.n	8008c66 <_vfiprintf_r+0x19e>
 8008cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cba:	07d9      	lsls	r1, r3, #31
 8008cbc:	d405      	bmi.n	8008cca <_vfiprintf_r+0x202>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_vfiprintf_r+0x202>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc6:	f7fe faa4 	bl	8007212 <__retarget_lock_release_recursive>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	065b      	lsls	r3, r3, #25
 8008cce:	f53f af1d 	bmi.w	8008b0c <_vfiprintf_r+0x44>
 8008cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd4:	e71c      	b.n	8008b10 <_vfiprintf_r+0x48>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <_vfiprintf_r+0x22c>)
 8008cde:	a904      	add	r1, sp, #16
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7fe f803 	bl	8006cec <_printf_i>
 8008ce6:	e7e4      	b.n	8008cb2 <_vfiprintf_r+0x1ea>
 8008ce8:	0800a2ca 	.word	0x0800a2ca
 8008cec:	0800a2d4 	.word	0x0800a2d4
 8008cf0:	080067a5 	.word	0x080067a5
 8008cf4:	08008aa5 	.word	0x08008aa5
 8008cf8:	0800a2d0 	.word	0x0800a2d0

08008cfc <__swbuf_r>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	460e      	mov	r6, r1
 8008d00:	4614      	mov	r4, r2
 8008d02:	4605      	mov	r5, r0
 8008d04:	b118      	cbz	r0, 8008d0e <__swbuf_r+0x12>
 8008d06:	6a03      	ldr	r3, [r0, #32]
 8008d08:	b90b      	cbnz	r3, 8008d0e <__swbuf_r+0x12>
 8008d0a:	f7fe f98b 	bl	8007024 <__sinit>
 8008d0e:	69a3      	ldr	r3, [r4, #24]
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	071a      	lsls	r2, r3, #28
 8008d16:	d525      	bpl.n	8008d64 <__swbuf_r+0x68>
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	b31b      	cbz	r3, 8008d64 <__swbuf_r+0x68>
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	6922      	ldr	r2, [r4, #16]
 8008d20:	1a98      	subs	r0, r3, r2
 8008d22:	6963      	ldr	r3, [r4, #20]
 8008d24:	b2f6      	uxtb	r6, r6
 8008d26:	4283      	cmp	r3, r0
 8008d28:	4637      	mov	r7, r6
 8008d2a:	dc04      	bgt.n	8008d36 <__swbuf_r+0x3a>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f7ff fdee 	bl	8008910 <_fflush_r>
 8008d34:	b9e0      	cbnz	r0, 8008d70 <__swbuf_r+0x74>
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	60a3      	str	r3, [r4, #8]
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	701e      	strb	r6, [r3, #0]
 8008d44:	6962      	ldr	r2, [r4, #20]
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d004      	beq.n	8008d56 <__swbuf_r+0x5a>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	07db      	lsls	r3, r3, #31
 8008d50:	d506      	bpl.n	8008d60 <__swbuf_r+0x64>
 8008d52:	2e0a      	cmp	r6, #10
 8008d54:	d104      	bne.n	8008d60 <__swbuf_r+0x64>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f7ff fdd9 	bl	8008910 <_fflush_r>
 8008d5e:	b938      	cbnz	r0, 8008d70 <__swbuf_r+0x74>
 8008d60:	4638      	mov	r0, r7
 8008d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d64:	4621      	mov	r1, r4
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 f806 	bl	8008d78 <__swsetup_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d0d5      	beq.n	8008d1c <__swbuf_r+0x20>
 8008d70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d74:	e7f4      	b.n	8008d60 <__swbuf_r+0x64>
	...

08008d78 <__swsetup_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <__swsetup_r+0xac>)
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	460c      	mov	r4, r1
 8008d82:	b118      	cbz	r0, 8008d8c <__swsetup_r+0x14>
 8008d84:	6a03      	ldr	r3, [r0, #32]
 8008d86:	b90b      	cbnz	r3, 8008d8c <__swsetup_r+0x14>
 8008d88:	f7fe f94c 	bl	8007024 <__sinit>
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d92:	0718      	lsls	r0, r3, #28
 8008d94:	d422      	bmi.n	8008ddc <__swsetup_r+0x64>
 8008d96:	06d9      	lsls	r1, r3, #27
 8008d98:	d407      	bmi.n	8008daa <__swsetup_r+0x32>
 8008d9a:	2309      	movs	r3, #9
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008da8:	e034      	b.n	8008e14 <__swsetup_r+0x9c>
 8008daa:	0758      	lsls	r0, r3, #29
 8008dac:	d512      	bpl.n	8008dd4 <__swsetup_r+0x5c>
 8008dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008db0:	b141      	cbz	r1, 8008dc4 <__swsetup_r+0x4c>
 8008db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008db6:	4299      	cmp	r1, r3
 8008db8:	d002      	beq.n	8008dc0 <__swsetup_r+0x48>
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f7ff f8a6 	bl	8007f0c <_free_r>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	6363      	str	r3, [r4, #52]	; 0x34
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dca:	81a3      	strh	r3, [r4, #12]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	f043 0308 	orr.w	r3, r3, #8
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	b94b      	cbnz	r3, 8008df4 <__swsetup_r+0x7c>
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dea:	d003      	beq.n	8008df4 <__swsetup_r+0x7c>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 f884 	bl	8008efc <__smakebuf_r>
 8008df4:	89a0      	ldrh	r0, [r4, #12]
 8008df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dfa:	f010 0301 	ands.w	r3, r0, #1
 8008dfe:	d00a      	beq.n	8008e16 <__swsetup_r+0x9e>
 8008e00:	2300      	movs	r3, #0
 8008e02:	60a3      	str	r3, [r4, #8]
 8008e04:	6963      	ldr	r3, [r4, #20]
 8008e06:	425b      	negs	r3, r3
 8008e08:	61a3      	str	r3, [r4, #24]
 8008e0a:	6923      	ldr	r3, [r4, #16]
 8008e0c:	b943      	cbnz	r3, 8008e20 <__swsetup_r+0xa8>
 8008e0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e12:	d1c4      	bne.n	8008d9e <__swsetup_r+0x26>
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	0781      	lsls	r1, r0, #30
 8008e18:	bf58      	it	pl
 8008e1a:	6963      	ldrpl	r3, [r4, #20]
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	e7f4      	b.n	8008e0a <__swsetup_r+0x92>
 8008e20:	2000      	movs	r0, #0
 8008e22:	e7f7      	b.n	8008e14 <__swsetup_r+0x9c>
 8008e24:	2000008c 	.word	0x2000008c

08008e28 <_raise_r>:
 8008e28:	291f      	cmp	r1, #31
 8008e2a:	b538      	push	{r3, r4, r5, lr}
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	460d      	mov	r5, r1
 8008e30:	d904      	bls.n	8008e3c <_raise_r+0x14>
 8008e32:	2316      	movs	r3, #22
 8008e34:	6003      	str	r3, [r0, #0]
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e3e:	b112      	cbz	r2, 8008e46 <_raise_r+0x1e>
 8008e40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e44:	b94b      	cbnz	r3, 8008e5a <_raise_r+0x32>
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 f830 	bl	8008eac <_getpid_r>
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	4601      	mov	r1, r0
 8008e50:	4620      	mov	r0, r4
 8008e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e56:	f000 b817 	b.w	8008e88 <_kill_r>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d00a      	beq.n	8008e74 <_raise_r+0x4c>
 8008e5e:	1c59      	adds	r1, r3, #1
 8008e60:	d103      	bne.n	8008e6a <_raise_r+0x42>
 8008e62:	2316      	movs	r3, #22
 8008e64:	6003      	str	r3, [r0, #0]
 8008e66:	2001      	movs	r0, #1
 8008e68:	e7e7      	b.n	8008e3a <_raise_r+0x12>
 8008e6a:	2400      	movs	r4, #0
 8008e6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e70:	4628      	mov	r0, r5
 8008e72:	4798      	blx	r3
 8008e74:	2000      	movs	r0, #0
 8008e76:	e7e0      	b.n	8008e3a <_raise_r+0x12>

08008e78 <raise>:
 8008e78:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <raise+0xc>)
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	f7ff bfd3 	b.w	8008e28 <_raise_r>
 8008e82:	bf00      	nop
 8008e84:	2000008c 	.word	0x2000008c

08008e88 <_kill_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d07      	ldr	r5, [pc, #28]	; (8008ea8 <_kill_r+0x20>)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	4611      	mov	r1, r2
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	f7f8 fb15 	bl	80014c4 <_kill>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	d102      	bne.n	8008ea4 <_kill_r+0x1c>
 8008e9e:	682b      	ldr	r3, [r5, #0]
 8008ea0:	b103      	cbz	r3, 8008ea4 <_kill_r+0x1c>
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	bd38      	pop	{r3, r4, r5, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000b68 	.word	0x20000b68

08008eac <_getpid_r>:
 8008eac:	f7f8 bb02 	b.w	80014b4 <_getpid>

08008eb0 <__swhatbuf_r>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	b096      	sub	sp, #88	; 0x58
 8008ebc:	4615      	mov	r5, r2
 8008ebe:	461e      	mov	r6, r3
 8008ec0:	da0d      	bge.n	8008ede <__swhatbuf_r+0x2e>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ec8:	f04f 0100 	mov.w	r1, #0
 8008ecc:	bf0c      	ite	eq
 8008ece:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ed2:	2340      	movne	r3, #64	; 0x40
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	6031      	str	r1, [r6, #0]
 8008ed8:	602b      	str	r3, [r5, #0]
 8008eda:	b016      	add	sp, #88	; 0x58
 8008edc:	bd70      	pop	{r4, r5, r6, pc}
 8008ede:	466a      	mov	r2, sp
 8008ee0:	f000 f848 	bl	8008f74 <_fstat_r>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	dbec      	blt.n	8008ec2 <__swhatbuf_r+0x12>
 8008ee8:	9901      	ldr	r1, [sp, #4]
 8008eea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008eee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ef2:	4259      	negs	r1, r3
 8008ef4:	4159      	adcs	r1, r3
 8008ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efa:	e7eb      	b.n	8008ed4 <__swhatbuf_r+0x24>

08008efc <__smakebuf_r>:
 8008efc:	898b      	ldrh	r3, [r1, #12]
 8008efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f00:	079d      	lsls	r5, r3, #30
 8008f02:	4606      	mov	r6, r0
 8008f04:	460c      	mov	r4, r1
 8008f06:	d507      	bpl.n	8008f18 <__smakebuf_r+0x1c>
 8008f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	2301      	movs	r3, #1
 8008f12:	6163      	str	r3, [r4, #20]
 8008f14:	b002      	add	sp, #8
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	ab01      	add	r3, sp, #4
 8008f1a:	466a      	mov	r2, sp
 8008f1c:	f7ff ffc8 	bl	8008eb0 <__swhatbuf_r>
 8008f20:	9900      	ldr	r1, [sp, #0]
 8008f22:	4605      	mov	r5, r0
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff f865 	bl	8007ff4 <_malloc_r>
 8008f2a:	b948      	cbnz	r0, 8008f40 <__smakebuf_r+0x44>
 8008f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f30:	059a      	lsls	r2, r3, #22
 8008f32:	d4ef      	bmi.n	8008f14 <__smakebuf_r+0x18>
 8008f34:	f023 0303 	bic.w	r3, r3, #3
 8008f38:	f043 0302 	orr.w	r3, r3, #2
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	e7e3      	b.n	8008f08 <__smakebuf_r+0xc>
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	6020      	str	r0, [r4, #0]
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	6163      	str	r3, [r4, #20]
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	6120      	str	r0, [r4, #16]
 8008f52:	b15b      	cbz	r3, 8008f6c <__smakebuf_r+0x70>
 8008f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 f81d 	bl	8008f98 <_isatty_r>
 8008f5e:	b128      	cbz	r0, 8008f6c <__smakebuf_r+0x70>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f023 0303 	bic.w	r3, r3, #3
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	431d      	orrs	r5, r3
 8008f70:	81a5      	strh	r5, [r4, #12]
 8008f72:	e7cf      	b.n	8008f14 <__smakebuf_r+0x18>

08008f74 <_fstat_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4d07      	ldr	r5, [pc, #28]	; (8008f94 <_fstat_r+0x20>)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	4611      	mov	r1, r2
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	f7f8 fafe 	bl	8001582 <_fstat>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d102      	bne.n	8008f90 <_fstat_r+0x1c>
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	b103      	cbz	r3, 8008f90 <_fstat_r+0x1c>
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
 8008f92:	bf00      	nop
 8008f94:	20000b68 	.word	0x20000b68

08008f98 <_isatty_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d06      	ldr	r5, [pc, #24]	; (8008fb4 <_isatty_r+0x1c>)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	f7f8 fafd 	bl	80015a2 <_isatty>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_isatty_r+0x1a>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_isatty_r+0x1a>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20000b68 	.word	0x20000b68

08008fb8 <pow>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	ed2d 8b02 	vpush	{d8}
 8008fbe:	eeb0 8a40 	vmov.f32	s16, s0
 8008fc2:	eef0 8a60 	vmov.f32	s17, s1
 8008fc6:	ec55 4b11 	vmov	r4, r5, d1
 8008fca:	f000 f8f1 	bl	80091b0 <__ieee754_pow>
 8008fce:	4622      	mov	r2, r4
 8008fd0:	462b      	mov	r3, r5
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	ec57 6b10 	vmov	r6, r7, d0
 8008fda:	f7f7 fdaf 	bl	8000b3c <__aeabi_dcmpun>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d13b      	bne.n	800905a <pow+0xa2>
 8008fe2:	ec51 0b18 	vmov	r0, r1, d8
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f7f7 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fee:	b1b8      	cbz	r0, 8009020 <pow+0x68>
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f7f7 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d146      	bne.n	800908e <pow+0xd6>
 8009000:	ec45 4b10 	vmov	d0, r4, r5
 8009004:	f000 f848 	bl	8009098 <finite>
 8009008:	b338      	cbz	r0, 800905a <pow+0xa2>
 800900a:	2200      	movs	r2, #0
 800900c:	2300      	movs	r3, #0
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 fd6b 	bl	8000aec <__aeabi_dcmplt>
 8009016:	b300      	cbz	r0, 800905a <pow+0xa2>
 8009018:	f7fe f8d0 	bl	80071bc <__errno>
 800901c:	2322      	movs	r3, #34	; 0x22
 800901e:	e01b      	b.n	8009058 <pow+0xa0>
 8009020:	ec47 6b10 	vmov	d0, r6, r7
 8009024:	f000 f838 	bl	8009098 <finite>
 8009028:	b9e0      	cbnz	r0, 8009064 <pow+0xac>
 800902a:	eeb0 0a48 	vmov.f32	s0, s16
 800902e:	eef0 0a68 	vmov.f32	s1, s17
 8009032:	f000 f831 	bl	8009098 <finite>
 8009036:	b1a8      	cbz	r0, 8009064 <pow+0xac>
 8009038:	ec45 4b10 	vmov	d0, r4, r5
 800903c:	f000 f82c 	bl	8009098 <finite>
 8009040:	b180      	cbz	r0, 8009064 <pow+0xac>
 8009042:	4632      	mov	r2, r6
 8009044:	463b      	mov	r3, r7
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fd77 	bl	8000b3c <__aeabi_dcmpun>
 800904e:	2800      	cmp	r0, #0
 8009050:	d0e2      	beq.n	8009018 <pow+0x60>
 8009052:	f7fe f8b3 	bl	80071bc <__errno>
 8009056:	2321      	movs	r3, #33	; 0x21
 8009058:	6003      	str	r3, [r0, #0]
 800905a:	ecbd 8b02 	vpop	{d8}
 800905e:	ec47 6b10 	vmov	d0, r6, r7
 8009062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009064:	2200      	movs	r2, #0
 8009066:	2300      	movs	r3, #0
 8009068:	4630      	mov	r0, r6
 800906a:	4639      	mov	r1, r7
 800906c:	f7f7 fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 8009070:	2800      	cmp	r0, #0
 8009072:	d0f2      	beq.n	800905a <pow+0xa2>
 8009074:	eeb0 0a48 	vmov.f32	s0, s16
 8009078:	eef0 0a68 	vmov.f32	s1, s17
 800907c:	f000 f80c 	bl	8009098 <finite>
 8009080:	2800      	cmp	r0, #0
 8009082:	d0ea      	beq.n	800905a <pow+0xa2>
 8009084:	ec45 4b10 	vmov	d0, r4, r5
 8009088:	f000 f806 	bl	8009098 <finite>
 800908c:	e7c3      	b.n	8009016 <pow+0x5e>
 800908e:	4f01      	ldr	r7, [pc, #4]	; (8009094 <pow+0xdc>)
 8009090:	2600      	movs	r6, #0
 8009092:	e7e2      	b.n	800905a <pow+0xa2>
 8009094:	3ff00000 	.word	0x3ff00000

08009098 <finite>:
 8009098:	b082      	sub	sp, #8
 800909a:	ed8d 0b00 	vstr	d0, [sp]
 800909e:	9801      	ldr	r0, [sp, #4]
 80090a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80090a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80090a8:	0fc0      	lsrs	r0, r0, #31
 80090aa:	b002      	add	sp, #8
 80090ac:	4770      	bx	lr
	...

080090b0 <floor>:
 80090b0:	ec51 0b10 	vmov	r0, r1, d0
 80090b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80090b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80090c0:	2e13      	cmp	r6, #19
 80090c2:	ee10 5a10 	vmov	r5, s0
 80090c6:	ee10 8a10 	vmov	r8, s0
 80090ca:	460c      	mov	r4, r1
 80090cc:	dc31      	bgt.n	8009132 <floor+0x82>
 80090ce:	2e00      	cmp	r6, #0
 80090d0:	da14      	bge.n	80090fc <floor+0x4c>
 80090d2:	a333      	add	r3, pc, #204	; (adr r3, 80091a0 <floor+0xf0>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 f8e0 	bl	800029c <__adddf3>
 80090dc:	2200      	movs	r2, #0
 80090de:	2300      	movs	r3, #0
 80090e0:	f7f7 fd22 	bl	8000b28 <__aeabi_dcmpgt>
 80090e4:	b138      	cbz	r0, 80090f6 <floor+0x46>
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	da53      	bge.n	8009192 <floor+0xe2>
 80090ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80090ee:	4325      	orrs	r5, r4
 80090f0:	d052      	beq.n	8009198 <floor+0xe8>
 80090f2:	4c2d      	ldr	r4, [pc, #180]	; (80091a8 <floor+0xf8>)
 80090f4:	2500      	movs	r5, #0
 80090f6:	4621      	mov	r1, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	e024      	b.n	8009146 <floor+0x96>
 80090fc:	4f2b      	ldr	r7, [pc, #172]	; (80091ac <floor+0xfc>)
 80090fe:	4137      	asrs	r7, r6
 8009100:	ea01 0307 	and.w	r3, r1, r7
 8009104:	4303      	orrs	r3, r0
 8009106:	d01e      	beq.n	8009146 <floor+0x96>
 8009108:	a325      	add	r3, pc, #148	; (adr r3, 80091a0 <floor+0xf0>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 f8c5 	bl	800029c <__adddf3>
 8009112:	2200      	movs	r2, #0
 8009114:	2300      	movs	r3, #0
 8009116:	f7f7 fd07 	bl	8000b28 <__aeabi_dcmpgt>
 800911a:	2800      	cmp	r0, #0
 800911c:	d0eb      	beq.n	80090f6 <floor+0x46>
 800911e:	2c00      	cmp	r4, #0
 8009120:	bfbe      	ittt	lt
 8009122:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009126:	4133      	asrlt	r3, r6
 8009128:	18e4      	addlt	r4, r4, r3
 800912a:	ea24 0407 	bic.w	r4, r4, r7
 800912e:	2500      	movs	r5, #0
 8009130:	e7e1      	b.n	80090f6 <floor+0x46>
 8009132:	2e33      	cmp	r6, #51	; 0x33
 8009134:	dd0b      	ble.n	800914e <floor+0x9e>
 8009136:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800913a:	d104      	bne.n	8009146 <floor+0x96>
 800913c:	ee10 2a10 	vmov	r2, s0
 8009140:	460b      	mov	r3, r1
 8009142:	f7f7 f8ab 	bl	800029c <__adddf3>
 8009146:	ec41 0b10 	vmov	d0, r0, r1
 800914a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009152:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009156:	40df      	lsrs	r7, r3
 8009158:	4238      	tst	r0, r7
 800915a:	d0f4      	beq.n	8009146 <floor+0x96>
 800915c:	a310      	add	r3, pc, #64	; (adr r3, 80091a0 <floor+0xf0>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 f89b 	bl	800029c <__adddf3>
 8009166:	2200      	movs	r2, #0
 8009168:	2300      	movs	r3, #0
 800916a:	f7f7 fcdd 	bl	8000b28 <__aeabi_dcmpgt>
 800916e:	2800      	cmp	r0, #0
 8009170:	d0c1      	beq.n	80090f6 <floor+0x46>
 8009172:	2c00      	cmp	r4, #0
 8009174:	da0a      	bge.n	800918c <floor+0xdc>
 8009176:	2e14      	cmp	r6, #20
 8009178:	d101      	bne.n	800917e <floor+0xce>
 800917a:	3401      	adds	r4, #1
 800917c:	e006      	b.n	800918c <floor+0xdc>
 800917e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009182:	2301      	movs	r3, #1
 8009184:	40b3      	lsls	r3, r6
 8009186:	441d      	add	r5, r3
 8009188:	45a8      	cmp	r8, r5
 800918a:	d8f6      	bhi.n	800917a <floor+0xca>
 800918c:	ea25 0507 	bic.w	r5, r5, r7
 8009190:	e7b1      	b.n	80090f6 <floor+0x46>
 8009192:	2500      	movs	r5, #0
 8009194:	462c      	mov	r4, r5
 8009196:	e7ae      	b.n	80090f6 <floor+0x46>
 8009198:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800919c:	e7ab      	b.n	80090f6 <floor+0x46>
 800919e:	bf00      	nop
 80091a0:	8800759c 	.word	0x8800759c
 80091a4:	7e37e43c 	.word	0x7e37e43c
 80091a8:	bff00000 	.word	0xbff00000
 80091ac:	000fffff 	.word	0x000fffff

080091b0 <__ieee754_pow>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	ed2d 8b06 	vpush	{d8-d10}
 80091b8:	b089      	sub	sp, #36	; 0x24
 80091ba:	ed8d 1b00 	vstr	d1, [sp]
 80091be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80091c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80091c6:	ea58 0102 	orrs.w	r1, r8, r2
 80091ca:	ec57 6b10 	vmov	r6, r7, d0
 80091ce:	d115      	bne.n	80091fc <__ieee754_pow+0x4c>
 80091d0:	19b3      	adds	r3, r6, r6
 80091d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80091d6:	4152      	adcs	r2, r2
 80091d8:	4299      	cmp	r1, r3
 80091da:	4b89      	ldr	r3, [pc, #548]	; (8009400 <__ieee754_pow+0x250>)
 80091dc:	4193      	sbcs	r3, r2
 80091de:	f080 84d1 	bcs.w	8009b84 <__ieee754_pow+0x9d4>
 80091e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091e6:	4630      	mov	r0, r6
 80091e8:	4639      	mov	r1, r7
 80091ea:	f7f7 f857 	bl	800029c <__adddf3>
 80091ee:	ec41 0b10 	vmov	d0, r0, r1
 80091f2:	b009      	add	sp, #36	; 0x24
 80091f4:	ecbd 8b06 	vpop	{d8-d10}
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	4b81      	ldr	r3, [pc, #516]	; (8009404 <__ieee754_pow+0x254>)
 80091fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009202:	429c      	cmp	r4, r3
 8009204:	ee10 aa10 	vmov	sl, s0
 8009208:	463d      	mov	r5, r7
 800920a:	dc06      	bgt.n	800921a <__ieee754_pow+0x6a>
 800920c:	d101      	bne.n	8009212 <__ieee754_pow+0x62>
 800920e:	2e00      	cmp	r6, #0
 8009210:	d1e7      	bne.n	80091e2 <__ieee754_pow+0x32>
 8009212:	4598      	cmp	r8, r3
 8009214:	dc01      	bgt.n	800921a <__ieee754_pow+0x6a>
 8009216:	d10f      	bne.n	8009238 <__ieee754_pow+0x88>
 8009218:	b172      	cbz	r2, 8009238 <__ieee754_pow+0x88>
 800921a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800921e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009222:	ea55 050a 	orrs.w	r5, r5, sl
 8009226:	d1dc      	bne.n	80091e2 <__ieee754_pow+0x32>
 8009228:	e9dd 3200 	ldrd	r3, r2, [sp]
 800922c:	18db      	adds	r3, r3, r3
 800922e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009232:	4152      	adcs	r2, r2
 8009234:	429d      	cmp	r5, r3
 8009236:	e7d0      	b.n	80091da <__ieee754_pow+0x2a>
 8009238:	2d00      	cmp	r5, #0
 800923a:	da3b      	bge.n	80092b4 <__ieee754_pow+0x104>
 800923c:	4b72      	ldr	r3, [pc, #456]	; (8009408 <__ieee754_pow+0x258>)
 800923e:	4598      	cmp	r8, r3
 8009240:	dc51      	bgt.n	80092e6 <__ieee754_pow+0x136>
 8009242:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009246:	4598      	cmp	r8, r3
 8009248:	f340 84ab 	ble.w	8009ba2 <__ieee754_pow+0x9f2>
 800924c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009250:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009254:	2b14      	cmp	r3, #20
 8009256:	dd0f      	ble.n	8009278 <__ieee754_pow+0xc8>
 8009258:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800925c:	fa22 f103 	lsr.w	r1, r2, r3
 8009260:	fa01 f303 	lsl.w	r3, r1, r3
 8009264:	4293      	cmp	r3, r2
 8009266:	f040 849c 	bne.w	8009ba2 <__ieee754_pow+0x9f2>
 800926a:	f001 0101 	and.w	r1, r1, #1
 800926e:	f1c1 0302 	rsb	r3, r1, #2
 8009272:	9304      	str	r3, [sp, #16]
 8009274:	b182      	cbz	r2, 8009298 <__ieee754_pow+0xe8>
 8009276:	e05f      	b.n	8009338 <__ieee754_pow+0x188>
 8009278:	2a00      	cmp	r2, #0
 800927a:	d15b      	bne.n	8009334 <__ieee754_pow+0x184>
 800927c:	f1c3 0314 	rsb	r3, r3, #20
 8009280:	fa48 f103 	asr.w	r1, r8, r3
 8009284:	fa01 f303 	lsl.w	r3, r1, r3
 8009288:	4543      	cmp	r3, r8
 800928a:	f040 8487 	bne.w	8009b9c <__ieee754_pow+0x9ec>
 800928e:	f001 0101 	and.w	r1, r1, #1
 8009292:	f1c1 0302 	rsb	r3, r1, #2
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	4b5c      	ldr	r3, [pc, #368]	; (800940c <__ieee754_pow+0x25c>)
 800929a:	4598      	cmp	r8, r3
 800929c:	d132      	bne.n	8009304 <__ieee754_pow+0x154>
 800929e:	f1b9 0f00 	cmp.w	r9, #0
 80092a2:	f280 8477 	bge.w	8009b94 <__ieee754_pow+0x9e4>
 80092a6:	4959      	ldr	r1, [pc, #356]	; (800940c <__ieee754_pow+0x25c>)
 80092a8:	4632      	mov	r2, r6
 80092aa:	463b      	mov	r3, r7
 80092ac:	2000      	movs	r0, #0
 80092ae:	f7f7 fad5 	bl	800085c <__aeabi_ddiv>
 80092b2:	e79c      	b.n	80091ee <__ieee754_pow+0x3e>
 80092b4:	2300      	movs	r3, #0
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	2a00      	cmp	r2, #0
 80092ba:	d13d      	bne.n	8009338 <__ieee754_pow+0x188>
 80092bc:	4b51      	ldr	r3, [pc, #324]	; (8009404 <__ieee754_pow+0x254>)
 80092be:	4598      	cmp	r8, r3
 80092c0:	d1ea      	bne.n	8009298 <__ieee754_pow+0xe8>
 80092c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80092c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80092ca:	ea53 030a 	orrs.w	r3, r3, sl
 80092ce:	f000 8459 	beq.w	8009b84 <__ieee754_pow+0x9d4>
 80092d2:	4b4f      	ldr	r3, [pc, #316]	; (8009410 <__ieee754_pow+0x260>)
 80092d4:	429c      	cmp	r4, r3
 80092d6:	dd08      	ble.n	80092ea <__ieee754_pow+0x13a>
 80092d8:	f1b9 0f00 	cmp.w	r9, #0
 80092dc:	f2c0 8456 	blt.w	8009b8c <__ieee754_pow+0x9dc>
 80092e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092e4:	e783      	b.n	80091ee <__ieee754_pow+0x3e>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e7e5      	b.n	80092b6 <__ieee754_pow+0x106>
 80092ea:	f1b9 0f00 	cmp.w	r9, #0
 80092ee:	f04f 0000 	mov.w	r0, #0
 80092f2:	f04f 0100 	mov.w	r1, #0
 80092f6:	f6bf af7a 	bge.w	80091ee <__ieee754_pow+0x3e>
 80092fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80092fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009302:	e774      	b.n	80091ee <__ieee754_pow+0x3e>
 8009304:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009308:	d106      	bne.n	8009318 <__ieee754_pow+0x168>
 800930a:	4632      	mov	r2, r6
 800930c:	463b      	mov	r3, r7
 800930e:	4630      	mov	r0, r6
 8009310:	4639      	mov	r1, r7
 8009312:	f7f7 f979 	bl	8000608 <__aeabi_dmul>
 8009316:	e76a      	b.n	80091ee <__ieee754_pow+0x3e>
 8009318:	4b3e      	ldr	r3, [pc, #248]	; (8009414 <__ieee754_pow+0x264>)
 800931a:	4599      	cmp	r9, r3
 800931c:	d10c      	bne.n	8009338 <__ieee754_pow+0x188>
 800931e:	2d00      	cmp	r5, #0
 8009320:	db0a      	blt.n	8009338 <__ieee754_pow+0x188>
 8009322:	ec47 6b10 	vmov	d0, r6, r7
 8009326:	b009      	add	sp, #36	; 0x24
 8009328:	ecbd 8b06 	vpop	{d8-d10}
 800932c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	f000 bd20 	b.w	8009d74 <__ieee754_sqrt>
 8009334:	2300      	movs	r3, #0
 8009336:	9304      	str	r3, [sp, #16]
 8009338:	ec47 6b10 	vmov	d0, r6, r7
 800933c:	f000 fc62 	bl	8009c04 <fabs>
 8009340:	ec51 0b10 	vmov	r0, r1, d0
 8009344:	f1ba 0f00 	cmp.w	sl, #0
 8009348:	d129      	bne.n	800939e <__ieee754_pow+0x1ee>
 800934a:	b124      	cbz	r4, 8009356 <__ieee754_pow+0x1a6>
 800934c:	4b2f      	ldr	r3, [pc, #188]	; (800940c <__ieee754_pow+0x25c>)
 800934e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009352:	429a      	cmp	r2, r3
 8009354:	d123      	bne.n	800939e <__ieee754_pow+0x1ee>
 8009356:	f1b9 0f00 	cmp.w	r9, #0
 800935a:	da05      	bge.n	8009368 <__ieee754_pow+0x1b8>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	2000      	movs	r0, #0
 8009362:	492a      	ldr	r1, [pc, #168]	; (800940c <__ieee754_pow+0x25c>)
 8009364:	f7f7 fa7a 	bl	800085c <__aeabi_ddiv>
 8009368:	2d00      	cmp	r5, #0
 800936a:	f6bf af40 	bge.w	80091ee <__ieee754_pow+0x3e>
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009374:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009378:	431c      	orrs	r4, r3
 800937a:	d108      	bne.n	800938e <__ieee754_pow+0x1de>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4610      	mov	r0, r2
 8009382:	4619      	mov	r1, r3
 8009384:	f7f6 ff88 	bl	8000298 <__aeabi_dsub>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	e78f      	b.n	80092ae <__ieee754_pow+0xfe>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	2b01      	cmp	r3, #1
 8009392:	f47f af2c 	bne.w	80091ee <__ieee754_pow+0x3e>
 8009396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800939a:	4619      	mov	r1, r3
 800939c:	e727      	b.n	80091ee <__ieee754_pow+0x3e>
 800939e:	0feb      	lsrs	r3, r5, #31
 80093a0:	3b01      	subs	r3, #1
 80093a2:	9306      	str	r3, [sp, #24]
 80093a4:	9a06      	ldr	r2, [sp, #24]
 80093a6:	9b04      	ldr	r3, [sp, #16]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	d102      	bne.n	80093b2 <__ieee754_pow+0x202>
 80093ac:	4632      	mov	r2, r6
 80093ae:	463b      	mov	r3, r7
 80093b0:	e7e6      	b.n	8009380 <__ieee754_pow+0x1d0>
 80093b2:	4b19      	ldr	r3, [pc, #100]	; (8009418 <__ieee754_pow+0x268>)
 80093b4:	4598      	cmp	r8, r3
 80093b6:	f340 80fb 	ble.w	80095b0 <__ieee754_pow+0x400>
 80093ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80093be:	4598      	cmp	r8, r3
 80093c0:	4b13      	ldr	r3, [pc, #76]	; (8009410 <__ieee754_pow+0x260>)
 80093c2:	dd0c      	ble.n	80093de <__ieee754_pow+0x22e>
 80093c4:	429c      	cmp	r4, r3
 80093c6:	dc0f      	bgt.n	80093e8 <__ieee754_pow+0x238>
 80093c8:	f1b9 0f00 	cmp.w	r9, #0
 80093cc:	da0f      	bge.n	80093ee <__ieee754_pow+0x23e>
 80093ce:	2000      	movs	r0, #0
 80093d0:	b009      	add	sp, #36	; 0x24
 80093d2:	ecbd 8b06 	vpop	{d8-d10}
 80093d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	f000 bcc2 	b.w	8009d62 <__math_oflow>
 80093de:	429c      	cmp	r4, r3
 80093e0:	dbf2      	blt.n	80093c8 <__ieee754_pow+0x218>
 80093e2:	4b0a      	ldr	r3, [pc, #40]	; (800940c <__ieee754_pow+0x25c>)
 80093e4:	429c      	cmp	r4, r3
 80093e6:	dd19      	ble.n	800941c <__ieee754_pow+0x26c>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	dcef      	bgt.n	80093ce <__ieee754_pow+0x21e>
 80093ee:	2000      	movs	r0, #0
 80093f0:	b009      	add	sp, #36	; 0x24
 80093f2:	ecbd 8b06 	vpop	{d8-d10}
 80093f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fa:	f000 bca9 	b.w	8009d50 <__math_uflow>
 80093fe:	bf00      	nop
 8009400:	fff00000 	.word	0xfff00000
 8009404:	7ff00000 	.word	0x7ff00000
 8009408:	433fffff 	.word	0x433fffff
 800940c:	3ff00000 	.word	0x3ff00000
 8009410:	3fefffff 	.word	0x3fefffff
 8009414:	3fe00000 	.word	0x3fe00000
 8009418:	41e00000 	.word	0x41e00000
 800941c:	4b60      	ldr	r3, [pc, #384]	; (80095a0 <__ieee754_pow+0x3f0>)
 800941e:	2200      	movs	r2, #0
 8009420:	f7f6 ff3a 	bl	8000298 <__aeabi_dsub>
 8009424:	a354      	add	r3, pc, #336	; (adr r3, 8009578 <__ieee754_pow+0x3c8>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	4604      	mov	r4, r0
 800942c:	460d      	mov	r5, r1
 800942e:	f7f7 f8eb 	bl	8000608 <__aeabi_dmul>
 8009432:	a353      	add	r3, pc, #332	; (adr r3, 8009580 <__ieee754_pow+0x3d0>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	4606      	mov	r6, r0
 800943a:	460f      	mov	r7, r1
 800943c:	4620      	mov	r0, r4
 800943e:	4629      	mov	r1, r5
 8009440:	f7f7 f8e2 	bl	8000608 <__aeabi_dmul>
 8009444:	4b57      	ldr	r3, [pc, #348]	; (80095a4 <__ieee754_pow+0x3f4>)
 8009446:	4682      	mov	sl, r0
 8009448:	468b      	mov	fp, r1
 800944a:	2200      	movs	r2, #0
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f7f7 f8da 	bl	8000608 <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	a14b      	add	r1, pc, #300	; (adr r1, 8009588 <__ieee754_pow+0x3d8>)
 800945a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800945e:	f7f6 ff1b 	bl	8000298 <__aeabi_dsub>
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	f7f7 f8cf 	bl	8000608 <__aeabi_dmul>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	2000      	movs	r0, #0
 8009470:	494d      	ldr	r1, [pc, #308]	; (80095a8 <__ieee754_pow+0x3f8>)
 8009472:	f7f6 ff11 	bl	8000298 <__aeabi_dsub>
 8009476:	4622      	mov	r2, r4
 8009478:	4680      	mov	r8, r0
 800947a:	4689      	mov	r9, r1
 800947c:	462b      	mov	r3, r5
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7f7 f8c1 	bl	8000608 <__aeabi_dmul>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f7f7 f8bb 	bl	8000608 <__aeabi_dmul>
 8009492:	a33f      	add	r3, pc, #252	; (adr r3, 8009590 <__ieee754_pow+0x3e0>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f7 f8b6 	bl	8000608 <__aeabi_dmul>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4650      	mov	r0, sl
 80094a2:	4659      	mov	r1, fp
 80094a4:	f7f6 fef8 	bl	8000298 <__aeabi_dsub>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4680      	mov	r8, r0
 80094ae:	4689      	mov	r9, r1
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f6 fef2 	bl	800029c <__adddf3>
 80094b8:	2000      	movs	r0, #0
 80094ba:	4632      	mov	r2, r6
 80094bc:	463b      	mov	r3, r7
 80094be:	4604      	mov	r4, r0
 80094c0:	460d      	mov	r5, r1
 80094c2:	f7f6 fee9 	bl	8000298 <__aeabi_dsub>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f6 fee3 	bl	8000298 <__aeabi_dsub>
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	9a06      	ldr	r2, [sp, #24]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	4313      	orrs	r3, r2
 80094da:	4682      	mov	sl, r0
 80094dc:	468b      	mov	fp, r1
 80094de:	f040 81e7 	bne.w	80098b0 <__ieee754_pow+0x700>
 80094e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009598 <__ieee754_pow+0x3e8>
 80094e6:	eeb0 8a47 	vmov.f32	s16, s14
 80094ea:	eef0 8a67 	vmov.f32	s17, s15
 80094ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094f2:	2600      	movs	r6, #0
 80094f4:	4632      	mov	r2, r6
 80094f6:	463b      	mov	r3, r7
 80094f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	4622      	mov	r2, r4
 8009502:	462b      	mov	r3, r5
 8009504:	f7f7 f880 	bl	8000608 <__aeabi_dmul>
 8009508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800950c:	4680      	mov	r8, r0
 800950e:	4689      	mov	r9, r1
 8009510:	4650      	mov	r0, sl
 8009512:	4659      	mov	r1, fp
 8009514:	f7f7 f878 	bl	8000608 <__aeabi_dmul>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f6 febc 	bl	800029c <__adddf3>
 8009524:	4632      	mov	r2, r6
 8009526:	463b      	mov	r3, r7
 8009528:	4680      	mov	r8, r0
 800952a:	4689      	mov	r9, r1
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f7 f86a 	bl	8000608 <__aeabi_dmul>
 8009534:	460b      	mov	r3, r1
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
 800953a:	4602      	mov	r2, r0
 800953c:	4649      	mov	r1, r9
 800953e:	4640      	mov	r0, r8
 8009540:	f7f6 feac 	bl	800029c <__adddf3>
 8009544:	4b19      	ldr	r3, [pc, #100]	; (80095ac <__ieee754_pow+0x3fc>)
 8009546:	4299      	cmp	r1, r3
 8009548:	ec45 4b19 	vmov	d9, r4, r5
 800954c:	4606      	mov	r6, r0
 800954e:	460f      	mov	r7, r1
 8009550:	468b      	mov	fp, r1
 8009552:	f340 82f0 	ble.w	8009b36 <__ieee754_pow+0x986>
 8009556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800955a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800955e:	4303      	orrs	r3, r0
 8009560:	f000 81e4 	beq.w	800992c <__ieee754_pow+0x77c>
 8009564:	ec51 0b18 	vmov	r0, r1, d8
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	f7f7 fabe 	bl	8000aec <__aeabi_dcmplt>
 8009570:	3800      	subs	r0, #0
 8009572:	bf18      	it	ne
 8009574:	2001      	movne	r0, #1
 8009576:	e72b      	b.n	80093d0 <__ieee754_pow+0x220>
 8009578:	60000000 	.word	0x60000000
 800957c:	3ff71547 	.word	0x3ff71547
 8009580:	f85ddf44 	.word	0xf85ddf44
 8009584:	3e54ae0b 	.word	0x3e54ae0b
 8009588:	55555555 	.word	0x55555555
 800958c:	3fd55555 	.word	0x3fd55555
 8009590:	652b82fe 	.word	0x652b82fe
 8009594:	3ff71547 	.word	0x3ff71547
 8009598:	00000000 	.word	0x00000000
 800959c:	bff00000 	.word	0xbff00000
 80095a0:	3ff00000 	.word	0x3ff00000
 80095a4:	3fd00000 	.word	0x3fd00000
 80095a8:	3fe00000 	.word	0x3fe00000
 80095ac:	408fffff 	.word	0x408fffff
 80095b0:	4bd5      	ldr	r3, [pc, #852]	; (8009908 <__ieee754_pow+0x758>)
 80095b2:	402b      	ands	r3, r5
 80095b4:	2200      	movs	r2, #0
 80095b6:	b92b      	cbnz	r3, 80095c4 <__ieee754_pow+0x414>
 80095b8:	4bd4      	ldr	r3, [pc, #848]	; (800990c <__ieee754_pow+0x75c>)
 80095ba:	f7f7 f825 	bl	8000608 <__aeabi_dmul>
 80095be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80095c2:	460c      	mov	r4, r1
 80095c4:	1523      	asrs	r3, r4, #20
 80095c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80095ca:	4413      	add	r3, r2
 80095cc:	9305      	str	r3, [sp, #20]
 80095ce:	4bd0      	ldr	r3, [pc, #832]	; (8009910 <__ieee754_pow+0x760>)
 80095d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80095d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80095d8:	429c      	cmp	r4, r3
 80095da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80095de:	dd08      	ble.n	80095f2 <__ieee754_pow+0x442>
 80095e0:	4bcc      	ldr	r3, [pc, #816]	; (8009914 <__ieee754_pow+0x764>)
 80095e2:	429c      	cmp	r4, r3
 80095e4:	f340 8162 	ble.w	80098ac <__ieee754_pow+0x6fc>
 80095e8:	9b05      	ldr	r3, [sp, #20]
 80095ea:	3301      	adds	r3, #1
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80095f2:	2400      	movs	r4, #0
 80095f4:	00e3      	lsls	r3, r4, #3
 80095f6:	9307      	str	r3, [sp, #28]
 80095f8:	4bc7      	ldr	r3, [pc, #796]	; (8009918 <__ieee754_pow+0x768>)
 80095fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095fe:	ed93 7b00 	vldr	d7, [r3]
 8009602:	4629      	mov	r1, r5
 8009604:	ec53 2b17 	vmov	r2, r3, d7
 8009608:	eeb0 9a47 	vmov.f32	s18, s14
 800960c:	eef0 9a67 	vmov.f32	s19, s15
 8009610:	4682      	mov	sl, r0
 8009612:	f7f6 fe41 	bl	8000298 <__aeabi_dsub>
 8009616:	4652      	mov	r2, sl
 8009618:	4606      	mov	r6, r0
 800961a:	460f      	mov	r7, r1
 800961c:	462b      	mov	r3, r5
 800961e:	ec51 0b19 	vmov	r0, r1, d9
 8009622:	f7f6 fe3b 	bl	800029c <__adddf3>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	2000      	movs	r0, #0
 800962c:	49bb      	ldr	r1, [pc, #748]	; (800991c <__ieee754_pow+0x76c>)
 800962e:	f7f7 f915 	bl	800085c <__aeabi_ddiv>
 8009632:	ec41 0b1a 	vmov	d10, r0, r1
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4630      	mov	r0, r6
 800963c:	4639      	mov	r1, r7
 800963e:	f7f6 ffe3 	bl	8000608 <__aeabi_dmul>
 8009642:	2300      	movs	r3, #0
 8009644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009648:	9302      	str	r3, [sp, #8]
 800964a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800964e:	46ab      	mov	fp, r5
 8009650:	106d      	asrs	r5, r5, #1
 8009652:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009656:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800965a:	ec41 0b18 	vmov	d8, r0, r1
 800965e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009662:	2200      	movs	r2, #0
 8009664:	4640      	mov	r0, r8
 8009666:	4649      	mov	r1, r9
 8009668:	4614      	mov	r4, r2
 800966a:	461d      	mov	r5, r3
 800966c:	f7f6 ffcc 	bl	8000608 <__aeabi_dmul>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4630      	mov	r0, r6
 8009676:	4639      	mov	r1, r7
 8009678:	f7f6 fe0e 	bl	8000298 <__aeabi_dsub>
 800967c:	ec53 2b19 	vmov	r2, r3, d9
 8009680:	4606      	mov	r6, r0
 8009682:	460f      	mov	r7, r1
 8009684:	4620      	mov	r0, r4
 8009686:	4629      	mov	r1, r5
 8009688:	f7f6 fe06 	bl	8000298 <__aeabi_dsub>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4650      	mov	r0, sl
 8009692:	4659      	mov	r1, fp
 8009694:	f7f6 fe00 	bl	8000298 <__aeabi_dsub>
 8009698:	4642      	mov	r2, r8
 800969a:	464b      	mov	r3, r9
 800969c:	f7f6 ffb4 	bl	8000608 <__aeabi_dmul>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4630      	mov	r0, r6
 80096a6:	4639      	mov	r1, r7
 80096a8:	f7f6 fdf6 	bl	8000298 <__aeabi_dsub>
 80096ac:	ec53 2b1a 	vmov	r2, r3, d10
 80096b0:	f7f6 ffaa 	bl	8000608 <__aeabi_dmul>
 80096b4:	ec53 2b18 	vmov	r2, r3, d8
 80096b8:	ec41 0b19 	vmov	d9, r0, r1
 80096bc:	ec51 0b18 	vmov	r0, r1, d8
 80096c0:	f7f6 ffa2 	bl	8000608 <__aeabi_dmul>
 80096c4:	a37c      	add	r3, pc, #496	; (adr r3, 80098b8 <__ieee754_pow+0x708>)
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	f7f6 ff9b 	bl	8000608 <__aeabi_dmul>
 80096d2:	a37b      	add	r3, pc, #492	; (adr r3, 80098c0 <__ieee754_pow+0x710>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f6 fde0 	bl	800029c <__adddf3>
 80096dc:	4622      	mov	r2, r4
 80096de:	462b      	mov	r3, r5
 80096e0:	f7f6 ff92 	bl	8000608 <__aeabi_dmul>
 80096e4:	a378      	add	r3, pc, #480	; (adr r3, 80098c8 <__ieee754_pow+0x718>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fdd7 	bl	800029c <__adddf3>
 80096ee:	4622      	mov	r2, r4
 80096f0:	462b      	mov	r3, r5
 80096f2:	f7f6 ff89 	bl	8000608 <__aeabi_dmul>
 80096f6:	a376      	add	r3, pc, #472	; (adr r3, 80098d0 <__ieee754_pow+0x720>)
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	f7f6 fdce 	bl	800029c <__adddf3>
 8009700:	4622      	mov	r2, r4
 8009702:	462b      	mov	r3, r5
 8009704:	f7f6 ff80 	bl	8000608 <__aeabi_dmul>
 8009708:	a373      	add	r3, pc, #460	; (adr r3, 80098d8 <__ieee754_pow+0x728>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7f6 fdc5 	bl	800029c <__adddf3>
 8009712:	4622      	mov	r2, r4
 8009714:	462b      	mov	r3, r5
 8009716:	f7f6 ff77 	bl	8000608 <__aeabi_dmul>
 800971a:	a371      	add	r3, pc, #452	; (adr r3, 80098e0 <__ieee754_pow+0x730>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fdbc 	bl	800029c <__adddf3>
 8009724:	4622      	mov	r2, r4
 8009726:	4606      	mov	r6, r0
 8009728:	460f      	mov	r7, r1
 800972a:	462b      	mov	r3, r5
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	f7f6 ff6a 	bl	8000608 <__aeabi_dmul>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f6 ff64 	bl	8000608 <__aeabi_dmul>
 8009740:	4642      	mov	r2, r8
 8009742:	4604      	mov	r4, r0
 8009744:	460d      	mov	r5, r1
 8009746:	464b      	mov	r3, r9
 8009748:	ec51 0b18 	vmov	r0, r1, d8
 800974c:	f7f6 fda6 	bl	800029c <__adddf3>
 8009750:	ec53 2b19 	vmov	r2, r3, d9
 8009754:	f7f6 ff58 	bl	8000608 <__aeabi_dmul>
 8009758:	4622      	mov	r2, r4
 800975a:	462b      	mov	r3, r5
 800975c:	f7f6 fd9e 	bl	800029c <__adddf3>
 8009760:	4642      	mov	r2, r8
 8009762:	4682      	mov	sl, r0
 8009764:	468b      	mov	fp, r1
 8009766:	464b      	mov	r3, r9
 8009768:	4640      	mov	r0, r8
 800976a:	4649      	mov	r1, r9
 800976c:	f7f6 ff4c 	bl	8000608 <__aeabi_dmul>
 8009770:	4b6b      	ldr	r3, [pc, #428]	; (8009920 <__ieee754_pow+0x770>)
 8009772:	2200      	movs	r2, #0
 8009774:	4606      	mov	r6, r0
 8009776:	460f      	mov	r7, r1
 8009778:	f7f6 fd90 	bl	800029c <__adddf3>
 800977c:	4652      	mov	r2, sl
 800977e:	465b      	mov	r3, fp
 8009780:	f7f6 fd8c 	bl	800029c <__adddf3>
 8009784:	2000      	movs	r0, #0
 8009786:	4604      	mov	r4, r0
 8009788:	460d      	mov	r5, r1
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4640      	mov	r0, r8
 8009790:	4649      	mov	r1, r9
 8009792:	f7f6 ff39 	bl	8000608 <__aeabi_dmul>
 8009796:	4b62      	ldr	r3, [pc, #392]	; (8009920 <__ieee754_pow+0x770>)
 8009798:	4680      	mov	r8, r0
 800979a:	4689      	mov	r9, r1
 800979c:	2200      	movs	r2, #0
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f6 fd79 	bl	8000298 <__aeabi_dsub>
 80097a6:	4632      	mov	r2, r6
 80097a8:	463b      	mov	r3, r7
 80097aa:	f7f6 fd75 	bl	8000298 <__aeabi_dsub>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4650      	mov	r0, sl
 80097b4:	4659      	mov	r1, fp
 80097b6:	f7f6 fd6f 	bl	8000298 <__aeabi_dsub>
 80097ba:	ec53 2b18 	vmov	r2, r3, d8
 80097be:	f7f6 ff23 	bl	8000608 <__aeabi_dmul>
 80097c2:	4622      	mov	r2, r4
 80097c4:	4606      	mov	r6, r0
 80097c6:	460f      	mov	r7, r1
 80097c8:	462b      	mov	r3, r5
 80097ca:	ec51 0b19 	vmov	r0, r1, d9
 80097ce:	f7f6 ff1b 	bl	8000608 <__aeabi_dmul>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 fd5f 	bl	800029c <__adddf3>
 80097de:	4606      	mov	r6, r0
 80097e0:	460f      	mov	r7, r1
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4640      	mov	r0, r8
 80097e8:	4649      	mov	r1, r9
 80097ea:	f7f6 fd57 	bl	800029c <__adddf3>
 80097ee:	a33e      	add	r3, pc, #248	; (adr r3, 80098e8 <__ieee754_pow+0x738>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	2000      	movs	r0, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	460d      	mov	r5, r1
 80097fa:	f7f6 ff05 	bl	8000608 <__aeabi_dmul>
 80097fe:	4642      	mov	r2, r8
 8009800:	ec41 0b18 	vmov	d8, r0, r1
 8009804:	464b      	mov	r3, r9
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	f7f6 fd45 	bl	8000298 <__aeabi_dsub>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 fd3f 	bl	8000298 <__aeabi_dsub>
 800981a:	a335      	add	r3, pc, #212	; (adr r3, 80098f0 <__ieee754_pow+0x740>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f7f6 fef2 	bl	8000608 <__aeabi_dmul>
 8009824:	a334      	add	r3, pc, #208	; (adr r3, 80098f8 <__ieee754_pow+0x748>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 fee9 	bl	8000608 <__aeabi_dmul>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4630      	mov	r0, r6
 800983c:	4639      	mov	r1, r7
 800983e:	f7f6 fd2d 	bl	800029c <__adddf3>
 8009842:	9a07      	ldr	r2, [sp, #28]
 8009844:	4b37      	ldr	r3, [pc, #220]	; (8009924 <__ieee754_pow+0x774>)
 8009846:	4413      	add	r3, r2
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fd26 	bl	800029c <__adddf3>
 8009850:	4682      	mov	sl, r0
 8009852:	9805      	ldr	r0, [sp, #20]
 8009854:	468b      	mov	fp, r1
 8009856:	f7f6 fe6d 	bl	8000534 <__aeabi_i2d>
 800985a:	9a07      	ldr	r2, [sp, #28]
 800985c:	4b32      	ldr	r3, [pc, #200]	; (8009928 <__ieee754_pow+0x778>)
 800985e:	4413      	add	r3, r2
 8009860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009864:	4606      	mov	r6, r0
 8009866:	460f      	mov	r7, r1
 8009868:	4652      	mov	r2, sl
 800986a:	465b      	mov	r3, fp
 800986c:	ec51 0b18 	vmov	r0, r1, d8
 8009870:	f7f6 fd14 	bl	800029c <__adddf3>
 8009874:	4642      	mov	r2, r8
 8009876:	464b      	mov	r3, r9
 8009878:	f7f6 fd10 	bl	800029c <__adddf3>
 800987c:	4632      	mov	r2, r6
 800987e:	463b      	mov	r3, r7
 8009880:	f7f6 fd0c 	bl	800029c <__adddf3>
 8009884:	2000      	movs	r0, #0
 8009886:	4632      	mov	r2, r6
 8009888:	463b      	mov	r3, r7
 800988a:	4604      	mov	r4, r0
 800988c:	460d      	mov	r5, r1
 800988e:	f7f6 fd03 	bl	8000298 <__aeabi_dsub>
 8009892:	4642      	mov	r2, r8
 8009894:	464b      	mov	r3, r9
 8009896:	f7f6 fcff 	bl	8000298 <__aeabi_dsub>
 800989a:	ec53 2b18 	vmov	r2, r3, d8
 800989e:	f7f6 fcfb 	bl	8000298 <__aeabi_dsub>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4650      	mov	r0, sl
 80098a8:	4659      	mov	r1, fp
 80098aa:	e610      	b.n	80094ce <__ieee754_pow+0x31e>
 80098ac:	2401      	movs	r4, #1
 80098ae:	e6a1      	b.n	80095f4 <__ieee754_pow+0x444>
 80098b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009900 <__ieee754_pow+0x750>
 80098b4:	e617      	b.n	80094e6 <__ieee754_pow+0x336>
 80098b6:	bf00      	nop
 80098b8:	4a454eef 	.word	0x4a454eef
 80098bc:	3fca7e28 	.word	0x3fca7e28
 80098c0:	93c9db65 	.word	0x93c9db65
 80098c4:	3fcd864a 	.word	0x3fcd864a
 80098c8:	a91d4101 	.word	0xa91d4101
 80098cc:	3fd17460 	.word	0x3fd17460
 80098d0:	518f264d 	.word	0x518f264d
 80098d4:	3fd55555 	.word	0x3fd55555
 80098d8:	db6fabff 	.word	0xdb6fabff
 80098dc:	3fdb6db6 	.word	0x3fdb6db6
 80098e0:	33333303 	.word	0x33333303
 80098e4:	3fe33333 	.word	0x3fe33333
 80098e8:	e0000000 	.word	0xe0000000
 80098ec:	3feec709 	.word	0x3feec709
 80098f0:	dc3a03fd 	.word	0xdc3a03fd
 80098f4:	3feec709 	.word	0x3feec709
 80098f8:	145b01f5 	.word	0x145b01f5
 80098fc:	be3e2fe0 	.word	0xbe3e2fe0
 8009900:	00000000 	.word	0x00000000
 8009904:	3ff00000 	.word	0x3ff00000
 8009908:	7ff00000 	.word	0x7ff00000
 800990c:	43400000 	.word	0x43400000
 8009910:	0003988e 	.word	0x0003988e
 8009914:	000bb679 	.word	0x000bb679
 8009918:	0800a2e0 	.word	0x0800a2e0
 800991c:	3ff00000 	.word	0x3ff00000
 8009920:	40080000 	.word	0x40080000
 8009924:	0800a300 	.word	0x0800a300
 8009928:	0800a2f0 	.word	0x0800a2f0
 800992c:	a3b3      	add	r3, pc, #716	; (adr r3, 8009bfc <__ieee754_pow+0xa4c>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	4640      	mov	r0, r8
 8009934:	4649      	mov	r1, r9
 8009936:	f7f6 fcb1 	bl	800029c <__adddf3>
 800993a:	4622      	mov	r2, r4
 800993c:	ec41 0b1a 	vmov	d10, r0, r1
 8009940:	462b      	mov	r3, r5
 8009942:	4630      	mov	r0, r6
 8009944:	4639      	mov	r1, r7
 8009946:	f7f6 fca7 	bl	8000298 <__aeabi_dsub>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	ec51 0b1a 	vmov	r0, r1, d10
 8009952:	f7f7 f8e9 	bl	8000b28 <__aeabi_dcmpgt>
 8009956:	2800      	cmp	r0, #0
 8009958:	f47f ae04 	bne.w	8009564 <__ieee754_pow+0x3b4>
 800995c:	4aa2      	ldr	r2, [pc, #648]	; (8009be8 <__ieee754_pow+0xa38>)
 800995e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009962:	4293      	cmp	r3, r2
 8009964:	f340 8107 	ble.w	8009b76 <__ieee754_pow+0x9c6>
 8009968:	151b      	asrs	r3, r3, #20
 800996a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800996e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009972:	fa4a fa03 	asr.w	sl, sl, r3
 8009976:	44da      	add	sl, fp
 8009978:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800997c:	489b      	ldr	r0, [pc, #620]	; (8009bec <__ieee754_pow+0xa3c>)
 800997e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009982:	4108      	asrs	r0, r1
 8009984:	ea00 030a 	and.w	r3, r0, sl
 8009988:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800998c:	f1c1 0114 	rsb	r1, r1, #20
 8009990:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009994:	fa4a fa01 	asr.w	sl, sl, r1
 8009998:	f1bb 0f00 	cmp.w	fp, #0
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	4620      	mov	r0, r4
 80099a2:	4629      	mov	r1, r5
 80099a4:	bfb8      	it	lt
 80099a6:	f1ca 0a00 	rsblt	sl, sl, #0
 80099aa:	f7f6 fc75 	bl	8000298 <__aeabi_dsub>
 80099ae:	ec41 0b19 	vmov	d9, r0, r1
 80099b2:	4642      	mov	r2, r8
 80099b4:	464b      	mov	r3, r9
 80099b6:	ec51 0b19 	vmov	r0, r1, d9
 80099ba:	f7f6 fc6f 	bl	800029c <__adddf3>
 80099be:	a37a      	add	r3, pc, #488	; (adr r3, 8009ba8 <__ieee754_pow+0x9f8>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	2000      	movs	r0, #0
 80099c6:	4604      	mov	r4, r0
 80099c8:	460d      	mov	r5, r1
 80099ca:	f7f6 fe1d 	bl	8000608 <__aeabi_dmul>
 80099ce:	ec53 2b19 	vmov	r2, r3, d9
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	f7f6 fc5d 	bl	8000298 <__aeabi_dsub>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7f6 fc57 	bl	8000298 <__aeabi_dsub>
 80099ea:	a371      	add	r3, pc, #452	; (adr r3, 8009bb0 <__ieee754_pow+0xa00>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f7f6 fe0a 	bl	8000608 <__aeabi_dmul>
 80099f4:	a370      	add	r3, pc, #448	; (adr r3, 8009bb8 <__ieee754_pow+0xa08>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	4680      	mov	r8, r0
 80099fc:	4689      	mov	r9, r1
 80099fe:	4620      	mov	r0, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	f7f6 fe01 	bl	8000608 <__aeabi_dmul>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fc45 	bl	800029c <__adddf3>
 8009a12:	4604      	mov	r4, r0
 8009a14:	460d      	mov	r5, r1
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	f7f6 fc3d 	bl	800029c <__adddf3>
 8009a22:	4632      	mov	r2, r6
 8009a24:	463b      	mov	r3, r7
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	f7f6 fc35 	bl	8000298 <__aeabi_dsub>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fc2f 	bl	8000298 <__aeabi_dsub>
 8009a3a:	4642      	mov	r2, r8
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	464b      	mov	r3, r9
 8009a42:	4640      	mov	r0, r8
 8009a44:	4649      	mov	r1, r9
 8009a46:	f7f6 fddf 	bl	8000608 <__aeabi_dmul>
 8009a4a:	a35d      	add	r3, pc, #372	; (adr r3, 8009bc0 <__ieee754_pow+0xa10>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	4604      	mov	r4, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	f7f6 fdd8 	bl	8000608 <__aeabi_dmul>
 8009a58:	a35b      	add	r3, pc, #364	; (adr r3, 8009bc8 <__ieee754_pow+0xa18>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f7f6 fc1b 	bl	8000298 <__aeabi_dsub>
 8009a62:	4622      	mov	r2, r4
 8009a64:	462b      	mov	r3, r5
 8009a66:	f7f6 fdcf 	bl	8000608 <__aeabi_dmul>
 8009a6a:	a359      	add	r3, pc, #356	; (adr r3, 8009bd0 <__ieee754_pow+0xa20>)
 8009a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a70:	f7f6 fc14 	bl	800029c <__adddf3>
 8009a74:	4622      	mov	r2, r4
 8009a76:	462b      	mov	r3, r5
 8009a78:	f7f6 fdc6 	bl	8000608 <__aeabi_dmul>
 8009a7c:	a356      	add	r3, pc, #344	; (adr r3, 8009bd8 <__ieee754_pow+0xa28>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fc09 	bl	8000298 <__aeabi_dsub>
 8009a86:	4622      	mov	r2, r4
 8009a88:	462b      	mov	r3, r5
 8009a8a:	f7f6 fdbd 	bl	8000608 <__aeabi_dmul>
 8009a8e:	a354      	add	r3, pc, #336	; (adr r3, 8009be0 <__ieee754_pow+0xa30>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fc02 	bl	800029c <__adddf3>
 8009a98:	4622      	mov	r2, r4
 8009a9a:	462b      	mov	r3, r5
 8009a9c:	f7f6 fdb4 	bl	8000608 <__aeabi_dmul>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4640      	mov	r0, r8
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	f7f6 fbf6 	bl	8000298 <__aeabi_dsub>
 8009aac:	4604      	mov	r4, r0
 8009aae:	460d      	mov	r5, r1
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	f7f6 fda6 	bl	8000608 <__aeabi_dmul>
 8009abc:	2200      	movs	r2, #0
 8009abe:	ec41 0b19 	vmov	d9, r0, r1
 8009ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7f6 fbe5 	bl	8000298 <__aeabi_dsub>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	ec51 0b19 	vmov	r0, r1, d9
 8009ad6:	f7f6 fec1 	bl	800085c <__aeabi_ddiv>
 8009ada:	4632      	mov	r2, r6
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	f7f6 fd8f 	bl	8000608 <__aeabi_dmul>
 8009aea:	4632      	mov	r2, r6
 8009aec:	463b      	mov	r3, r7
 8009aee:	f7f6 fbd5 	bl	800029c <__adddf3>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	f7f6 fbcd 	bl	8000298 <__aeabi_dsub>
 8009afe:	4642      	mov	r2, r8
 8009b00:	464b      	mov	r3, r9
 8009b02:	f7f6 fbc9 	bl	8000298 <__aeabi_dsub>
 8009b06:	460b      	mov	r3, r1
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4939      	ldr	r1, [pc, #228]	; (8009bf0 <__ieee754_pow+0xa40>)
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f7f6 fbc3 	bl	8000298 <__aeabi_dsub>
 8009b12:	ec41 0b10 	vmov	d0, r0, r1
 8009b16:	ee10 3a90 	vmov	r3, s1
 8009b1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b22:	da2b      	bge.n	8009b7c <__ieee754_pow+0x9cc>
 8009b24:	4650      	mov	r0, sl
 8009b26:	f000 f877 	bl	8009c18 <scalbn>
 8009b2a:	ec51 0b10 	vmov	r0, r1, d0
 8009b2e:	ec53 2b18 	vmov	r2, r3, d8
 8009b32:	f7ff bbee 	b.w	8009312 <__ieee754_pow+0x162>
 8009b36:	4b2f      	ldr	r3, [pc, #188]	; (8009bf4 <__ieee754_pow+0xa44>)
 8009b38:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009b3c:	429e      	cmp	r6, r3
 8009b3e:	f77f af0d 	ble.w	800995c <__ieee754_pow+0x7ac>
 8009b42:	4b2d      	ldr	r3, [pc, #180]	; (8009bf8 <__ieee754_pow+0xa48>)
 8009b44:	440b      	add	r3, r1
 8009b46:	4303      	orrs	r3, r0
 8009b48:	d009      	beq.n	8009b5e <__ieee754_pow+0x9ae>
 8009b4a:	ec51 0b18 	vmov	r0, r1, d8
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2300      	movs	r3, #0
 8009b52:	f7f6 ffcb 	bl	8000aec <__aeabi_dcmplt>
 8009b56:	3800      	subs	r0, #0
 8009b58:	bf18      	it	ne
 8009b5a:	2001      	movne	r0, #1
 8009b5c:	e448      	b.n	80093f0 <__ieee754_pow+0x240>
 8009b5e:	4622      	mov	r2, r4
 8009b60:	462b      	mov	r3, r5
 8009b62:	f7f6 fb99 	bl	8000298 <__aeabi_dsub>
 8009b66:	4642      	mov	r2, r8
 8009b68:	464b      	mov	r3, r9
 8009b6a:	f7f6 ffd3 	bl	8000b14 <__aeabi_dcmpge>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	f43f aef4 	beq.w	800995c <__ieee754_pow+0x7ac>
 8009b74:	e7e9      	b.n	8009b4a <__ieee754_pow+0x99a>
 8009b76:	f04f 0a00 	mov.w	sl, #0
 8009b7a:	e71a      	b.n	80099b2 <__ieee754_pow+0x802>
 8009b7c:	ec51 0b10 	vmov	r0, r1, d0
 8009b80:	4619      	mov	r1, r3
 8009b82:	e7d4      	b.n	8009b2e <__ieee754_pow+0x97e>
 8009b84:	491a      	ldr	r1, [pc, #104]	; (8009bf0 <__ieee754_pow+0xa40>)
 8009b86:	2000      	movs	r0, #0
 8009b88:	f7ff bb31 	b.w	80091ee <__ieee754_pow+0x3e>
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	2100      	movs	r1, #0
 8009b90:	f7ff bb2d 	b.w	80091ee <__ieee754_pow+0x3e>
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7ff bb29 	b.w	80091ee <__ieee754_pow+0x3e>
 8009b9c:	9204      	str	r2, [sp, #16]
 8009b9e:	f7ff bb7b 	b.w	8009298 <__ieee754_pow+0xe8>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f7ff bb65 	b.w	8009272 <__ieee754_pow+0xc2>
 8009ba8:	00000000 	.word	0x00000000
 8009bac:	3fe62e43 	.word	0x3fe62e43
 8009bb0:	fefa39ef 	.word	0xfefa39ef
 8009bb4:	3fe62e42 	.word	0x3fe62e42
 8009bb8:	0ca86c39 	.word	0x0ca86c39
 8009bbc:	be205c61 	.word	0xbe205c61
 8009bc0:	72bea4d0 	.word	0x72bea4d0
 8009bc4:	3e663769 	.word	0x3e663769
 8009bc8:	c5d26bf1 	.word	0xc5d26bf1
 8009bcc:	3ebbbd41 	.word	0x3ebbbd41
 8009bd0:	af25de2c 	.word	0xaf25de2c
 8009bd4:	3f11566a 	.word	0x3f11566a
 8009bd8:	16bebd93 	.word	0x16bebd93
 8009bdc:	3f66c16c 	.word	0x3f66c16c
 8009be0:	5555553e 	.word	0x5555553e
 8009be4:	3fc55555 	.word	0x3fc55555
 8009be8:	3fe00000 	.word	0x3fe00000
 8009bec:	fff00000 	.word	0xfff00000
 8009bf0:	3ff00000 	.word	0x3ff00000
 8009bf4:	4090cbff 	.word	0x4090cbff
 8009bf8:	3f6f3400 	.word	0x3f6f3400
 8009bfc:	652b82fe 	.word	0x652b82fe
 8009c00:	3c971547 	.word	0x3c971547

08009c04 <fabs>:
 8009c04:	ec51 0b10 	vmov	r0, r1, d0
 8009c08:	ee10 2a10 	vmov	r2, s0
 8009c0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c10:	ec43 2b10 	vmov	d0, r2, r3
 8009c14:	4770      	bx	lr
	...

08009c18 <scalbn>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	ec55 4b10 	vmov	r4, r5, d0
 8009c1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009c22:	4606      	mov	r6, r0
 8009c24:	462b      	mov	r3, r5
 8009c26:	b999      	cbnz	r1, 8009c50 <scalbn+0x38>
 8009c28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c2c:	4323      	orrs	r3, r4
 8009c2e:	d03f      	beq.n	8009cb0 <scalbn+0x98>
 8009c30:	4b35      	ldr	r3, [pc, #212]	; (8009d08 <scalbn+0xf0>)
 8009c32:	4629      	mov	r1, r5
 8009c34:	ee10 0a10 	vmov	r0, s0
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f7f6 fce5 	bl	8000608 <__aeabi_dmul>
 8009c3e:	4b33      	ldr	r3, [pc, #204]	; (8009d0c <scalbn+0xf4>)
 8009c40:	429e      	cmp	r6, r3
 8009c42:	4604      	mov	r4, r0
 8009c44:	460d      	mov	r5, r1
 8009c46:	da10      	bge.n	8009c6a <scalbn+0x52>
 8009c48:	a327      	add	r3, pc, #156	; (adr r3, 8009ce8 <scalbn+0xd0>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	e01f      	b.n	8009c90 <scalbn+0x78>
 8009c50:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009c54:	4291      	cmp	r1, r2
 8009c56:	d10c      	bne.n	8009c72 <scalbn+0x5a>
 8009c58:	ee10 2a10 	vmov	r2, s0
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 fb1c 	bl	800029c <__adddf3>
 8009c64:	4604      	mov	r4, r0
 8009c66:	460d      	mov	r5, r1
 8009c68:	e022      	b.n	8009cb0 <scalbn+0x98>
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009c70:	3936      	subs	r1, #54	; 0x36
 8009c72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009c76:	4296      	cmp	r6, r2
 8009c78:	dd0d      	ble.n	8009c96 <scalbn+0x7e>
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	a11c      	add	r1, pc, #112	; (adr r1, 8009cf0 <scalbn+0xd8>)
 8009c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c82:	da02      	bge.n	8009c8a <scalbn+0x72>
 8009c84:	a11c      	add	r1, pc, #112	; (adr r1, 8009cf8 <scalbn+0xe0>)
 8009c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c8a:	a319      	add	r3, pc, #100	; (adr r3, 8009cf0 <scalbn+0xd8>)
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	f7f6 fcba 	bl	8000608 <__aeabi_dmul>
 8009c94:	e7e6      	b.n	8009c64 <scalbn+0x4c>
 8009c96:	1872      	adds	r2, r6, r1
 8009c98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009c9c:	428a      	cmp	r2, r1
 8009c9e:	dcec      	bgt.n	8009c7a <scalbn+0x62>
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	dd08      	ble.n	8009cb6 <scalbn+0x9e>
 8009ca4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ca8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009cac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009cb0:	ec45 4b10 	vmov	d0, r4, r5
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009cba:	da08      	bge.n	8009cce <scalbn+0xb6>
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	a10a      	add	r1, pc, #40	; (adr r1, 8009ce8 <scalbn+0xd0>)
 8009cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc4:	dac0      	bge.n	8009c48 <scalbn+0x30>
 8009cc6:	a10e      	add	r1, pc, #56	; (adr r1, 8009d00 <scalbn+0xe8>)
 8009cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ccc:	e7bc      	b.n	8009c48 <scalbn+0x30>
 8009cce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cd2:	3236      	adds	r2, #54	; 0x36
 8009cd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009cd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <scalbn+0xf8>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	e7d5      	b.n	8009c90 <scalbn+0x78>
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	c2f8f359 	.word	0xc2f8f359
 8009cec:	01a56e1f 	.word	0x01a56e1f
 8009cf0:	8800759c 	.word	0x8800759c
 8009cf4:	7e37e43c 	.word	0x7e37e43c
 8009cf8:	8800759c 	.word	0x8800759c
 8009cfc:	fe37e43c 	.word	0xfe37e43c
 8009d00:	c2f8f359 	.word	0xc2f8f359
 8009d04:	81a56e1f 	.word	0x81a56e1f
 8009d08:	43500000 	.word	0x43500000
 8009d0c:	ffff3cb0 	.word	0xffff3cb0
 8009d10:	3c900000 	.word	0x3c900000

08009d14 <with_errno>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4604      	mov	r4, r0
 8009d18:	460d      	mov	r5, r1
 8009d1a:	4616      	mov	r6, r2
 8009d1c:	f7fd fa4e 	bl	80071bc <__errno>
 8009d20:	4629      	mov	r1, r5
 8009d22:	6006      	str	r6, [r0, #0]
 8009d24:	4620      	mov	r0, r4
 8009d26:	bd70      	pop	{r4, r5, r6, pc}

08009d28 <xflow>:
 8009d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d2a:	4614      	mov	r4, r2
 8009d2c:	461d      	mov	r5, r3
 8009d2e:	b108      	cbz	r0, 8009d34 <xflow+0xc>
 8009d30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d34:	e9cd 2300 	strd	r2, r3, [sp]
 8009d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7f6 fc62 	bl	8000608 <__aeabi_dmul>
 8009d44:	2222      	movs	r2, #34	; 0x22
 8009d46:	b003      	add	sp, #12
 8009d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d4c:	f7ff bfe2 	b.w	8009d14 <with_errno>

08009d50 <__math_uflow>:
 8009d50:	b508      	push	{r3, lr}
 8009d52:	2200      	movs	r2, #0
 8009d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d58:	f7ff ffe6 	bl	8009d28 <xflow>
 8009d5c:	ec41 0b10 	vmov	d0, r0, r1
 8009d60:	bd08      	pop	{r3, pc}

08009d62 <__math_oflow>:
 8009d62:	b508      	push	{r3, lr}
 8009d64:	2200      	movs	r2, #0
 8009d66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009d6a:	f7ff ffdd 	bl	8009d28 <xflow>
 8009d6e:	ec41 0b10 	vmov	d0, r0, r1
 8009d72:	bd08      	pop	{r3, pc}

08009d74 <__ieee754_sqrt>:
 8009d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	ec55 4b10 	vmov	r4, r5, d0
 8009d7c:	4e67      	ldr	r6, [pc, #412]	; (8009f1c <__ieee754_sqrt+0x1a8>)
 8009d7e:	43ae      	bics	r6, r5
 8009d80:	ee10 0a10 	vmov	r0, s0
 8009d84:	ee10 2a10 	vmov	r2, s0
 8009d88:	4629      	mov	r1, r5
 8009d8a:	462b      	mov	r3, r5
 8009d8c:	d10d      	bne.n	8009daa <__ieee754_sqrt+0x36>
 8009d8e:	f7f6 fc3b 	bl	8000608 <__aeabi_dmul>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 fa7f 	bl	800029c <__adddf3>
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
 8009da2:	ec45 4b10 	vmov	d0, r4, r5
 8009da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009daa:	2d00      	cmp	r5, #0
 8009dac:	dc0b      	bgt.n	8009dc6 <__ieee754_sqrt+0x52>
 8009dae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009db2:	4326      	orrs	r6, r4
 8009db4:	d0f5      	beq.n	8009da2 <__ieee754_sqrt+0x2e>
 8009db6:	b135      	cbz	r5, 8009dc6 <__ieee754_sqrt+0x52>
 8009db8:	f7f6 fa6e 	bl	8000298 <__aeabi_dsub>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	f7f6 fd4c 	bl	800085c <__aeabi_ddiv>
 8009dc4:	e7eb      	b.n	8009d9e <__ieee754_sqrt+0x2a>
 8009dc6:	1509      	asrs	r1, r1, #20
 8009dc8:	f000 808d 	beq.w	8009ee6 <__ieee754_sqrt+0x172>
 8009dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dd0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dd8:	07c9      	lsls	r1, r1, #31
 8009dda:	bf5c      	itt	pl
 8009ddc:	005b      	lslpl	r3, r3, #1
 8009dde:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009de2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009de6:	bf58      	it	pl
 8009de8:	0052      	lslpl	r2, r2, #1
 8009dea:	2500      	movs	r5, #0
 8009dec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009df0:	1076      	asrs	r6, r6, #1
 8009df2:	0052      	lsls	r2, r2, #1
 8009df4:	f04f 0e16 	mov.w	lr, #22
 8009df8:	46ac      	mov	ip, r5
 8009dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009dfe:	eb0c 0001 	add.w	r0, ip, r1
 8009e02:	4298      	cmp	r0, r3
 8009e04:	bfde      	ittt	le
 8009e06:	1a1b      	suble	r3, r3, r0
 8009e08:	eb00 0c01 	addle.w	ip, r0, r1
 8009e0c:	186d      	addle	r5, r5, r1
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	f1be 0e01 	subs.w	lr, lr, #1
 8009e14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009e18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009e20:	d1ed      	bne.n	8009dfe <__ieee754_sqrt+0x8a>
 8009e22:	4674      	mov	r4, lr
 8009e24:	2720      	movs	r7, #32
 8009e26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009e2a:	4563      	cmp	r3, ip
 8009e2c:	eb01 000e 	add.w	r0, r1, lr
 8009e30:	dc02      	bgt.n	8009e38 <__ieee754_sqrt+0xc4>
 8009e32:	d113      	bne.n	8009e5c <__ieee754_sqrt+0xe8>
 8009e34:	4290      	cmp	r0, r2
 8009e36:	d811      	bhi.n	8009e5c <__ieee754_sqrt+0xe8>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	eb00 0e01 	add.w	lr, r0, r1
 8009e3e:	da57      	bge.n	8009ef0 <__ieee754_sqrt+0x17c>
 8009e40:	f1be 0f00 	cmp.w	lr, #0
 8009e44:	db54      	blt.n	8009ef0 <__ieee754_sqrt+0x17c>
 8009e46:	f10c 0801 	add.w	r8, ip, #1
 8009e4a:	eba3 030c 	sub.w	r3, r3, ip
 8009e4e:	4290      	cmp	r0, r2
 8009e50:	bf88      	it	hi
 8009e52:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009e56:	1a12      	subs	r2, r2, r0
 8009e58:	440c      	add	r4, r1
 8009e5a:	46c4      	mov	ip, r8
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	3f01      	subs	r7, #1
 8009e60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009e64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009e6c:	d1dd      	bne.n	8009e2a <__ieee754_sqrt+0xb6>
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	d01b      	beq.n	8009eaa <__ieee754_sqrt+0x136>
 8009e72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009f20 <__ieee754_sqrt+0x1ac>
 8009e76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009f24 <__ieee754_sqrt+0x1b0>
 8009e7a:	e9da 0100 	ldrd	r0, r1, [sl]
 8009e7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009e82:	f7f6 fa09 	bl	8000298 <__aeabi_dsub>
 8009e86:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4640      	mov	r0, r8
 8009e90:	4649      	mov	r1, r9
 8009e92:	f7f6 fe35 	bl	8000b00 <__aeabi_dcmple>
 8009e96:	b140      	cbz	r0, 8009eaa <__ieee754_sqrt+0x136>
 8009e98:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009e9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009ea0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ea4:	d126      	bne.n	8009ef4 <__ieee754_sqrt+0x180>
 8009ea6:	3501      	adds	r5, #1
 8009ea8:	463c      	mov	r4, r7
 8009eaa:	106a      	asrs	r2, r5, #1
 8009eac:	0863      	lsrs	r3, r4, #1
 8009eae:	07e9      	lsls	r1, r5, #31
 8009eb0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009eb4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009eb8:	bf48      	it	mi
 8009eba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009ebe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009ec2:	461c      	mov	r4, r3
 8009ec4:	e76d      	b.n	8009da2 <__ieee754_sqrt+0x2e>
 8009ec6:	0ad3      	lsrs	r3, r2, #11
 8009ec8:	3815      	subs	r0, #21
 8009eca:	0552      	lsls	r2, r2, #21
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d0fa      	beq.n	8009ec6 <__ieee754_sqrt+0x152>
 8009ed0:	02dc      	lsls	r4, r3, #11
 8009ed2:	d50a      	bpl.n	8009eea <__ieee754_sqrt+0x176>
 8009ed4:	f1c1 0420 	rsb	r4, r1, #32
 8009ed8:	fa22 f404 	lsr.w	r4, r2, r4
 8009edc:	1e4d      	subs	r5, r1, #1
 8009ede:	408a      	lsls	r2, r1
 8009ee0:	4323      	orrs	r3, r4
 8009ee2:	1b41      	subs	r1, r0, r5
 8009ee4:	e772      	b.n	8009dcc <__ieee754_sqrt+0x58>
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	e7f0      	b.n	8009ecc <__ieee754_sqrt+0x158>
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	3101      	adds	r1, #1
 8009eee:	e7ef      	b.n	8009ed0 <__ieee754_sqrt+0x15c>
 8009ef0:	46e0      	mov	r8, ip
 8009ef2:	e7aa      	b.n	8009e4a <__ieee754_sqrt+0xd6>
 8009ef4:	f7f6 f9d2 	bl	800029c <__adddf3>
 8009ef8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7f6 fdf2 	bl	8000aec <__aeabi_dcmplt>
 8009f08:	b120      	cbz	r0, 8009f14 <__ieee754_sqrt+0x1a0>
 8009f0a:	1ca0      	adds	r0, r4, #2
 8009f0c:	bf08      	it	eq
 8009f0e:	3501      	addeq	r5, #1
 8009f10:	3402      	adds	r4, #2
 8009f12:	e7ca      	b.n	8009eaa <__ieee754_sqrt+0x136>
 8009f14:	3401      	adds	r4, #1
 8009f16:	f024 0401 	bic.w	r4, r4, #1
 8009f1a:	e7c6      	b.n	8009eaa <__ieee754_sqrt+0x136>
 8009f1c:	7ff00000 	.word	0x7ff00000
 8009f20:	20000200 	.word	0x20000200
 8009f24:	20000208 	.word	0x20000208

08009f28 <_init>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr

08009f34 <_fini>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr
